/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "fatfs_sd.h"
#include "string.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
// Адрес страницы, куда будут сохраняться структуры
#define flashADDR   0x08022000
/*----------------------------------------------------------------------------*/
// Тестовая структура для записи
struct
{
	uint8_t  var1;
	uint16_t var2;
	uint32_t var3;
	double   var4;
} test_struct;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi3;

TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_SPI3_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

FATFS fs; // File system
FIL fil; // file
FILINFO finfo;    // File information object
FRESULT fresult; // to store the result
char buffer[1024]; // to store data

UINT br, bw; // file read/write count

/* capacity related variable */

FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

/* to send the data to the uart */

void send_uart (char *string){
	uint8_t len = strlen(string);
	HAL_UART_Transmit(&huart2, (uint8_t *) string , len, -1); // transmit in blocking mode
}

/* to find the size of data in the buffer */
int bufsize( char *buf){
	int i=0;
	while(*buf++ != '\0') i++;
	return i;
}

void bufclear (void) // clear buffer
{
	for (int i = 0; i < 1024; i++){
		buffer[i] = '\0';
	}
}


/**
 * @brief Функция записывает структуру "test_struct" во flash память микроконтроллера
 * @param addr - адрес в памяти микроконтроллера
 * @return статус операции
 */
uint8_t writeFlash (uint32_t addr)
{
//	HAL_StatusTypeDef status;
	uint32_t structureSize = sizeof(test_struct);          // замеряем размер структуры
//	FLASH_EraseInitTypeDef FlashErase;                     // структура для функции стирания страницы
//	uint32_t sectorError = 0;                              // переменная для записи информации об ошибках в процессе стирания

	uint32_t *dataPtr = (uint32_t *)&test_struct;          // создаем указатель на нашу структуру и записываем ее кусочками по 32 бита


	FLASH_Erase_Sector(FLASH_SECTOR_5, FLASH_VOLTAGE_RANGE_1);
	HAL_FLASH_Unlock();                                    // разлочить память

	for (uint8_t i = 0; i < structureSize / 4; i++)
	{
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, dataPtr[i]) != HAL_OK)
				return 1;
		addr += 4;
	}

	HAL_FLASH_Lock();

	return 0;


//	FlashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
//	FlashErase.NbSectors = 1;
//	FlashErase.Sector = FLASH_SECTOR_5;
//	FlashErase.VoltageRange = VOLTAGE_RANGE_3;
//	if (HAL_FLASHEx_Erase(&FlashErase, &sectorError) != HAL_OK)   // вызов функции стирания
//	{
//		HAL_FLASH_Lock();                                  // если не смог стереть, то закрыть память и вернуть ошибку
//        __enable_irq();
//		return HAL_ERROR;
//	}
//	uint32_t *dataPtr = (uint32_t *)&test_struct;          // создаем указатель на нашу структуру и записываем ее кусочками по 32 бита
//	for (uint8_t i = 0; i < structureSize / 4; i++)
//	{
//		status += HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, dataPtr[i]);
//		addr += 4;
//	}
//	__enable_irq();                                        // включаем прерывания обратно
//	return status;
}


/*----------------------------------------------------------------------------*/
/**
 * @brief функция считывает значения структуры "test_struct", записанные ранее во flash
 * @param addr - адрес в памяти микроконтроллера
 */
void readFlash (uint32_t addr)
{
	uint32_t structureSize = sizeof(test_struct);
	uint32_t *dataPtr = (uint32_t *)&test_struct;
	for (int i = 0; i < structureSize / 4; i++)
	{
		dataPtr[i] = *(__IO uint32_t*)addr;
		addr += 4;
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM2_Init();
  MX_FATFS_Init();
  MX_SPI3_Init();
  /* USER CODE BEGIN 2 */
  send_uart ("Lift off\n");
  /* Mount SD Card*/
  fresult = f_mount(&fs, "", 0);
  if (fresult != FR_OK) send_uart ("error in mounting SD CARD ... \n");
  else send_uart("SD CARD mounted successfully...\n");

  /*********** Card capacity details ***********************/
  	  /* Check free space */
  	  f_getfree("", &fre_clust, &pfs);

  	  total = (uint32_t)((pfs->n_fatent - 2)* pfs->csize*0.5);
  	  sprintf (buffer, "SD CARD Total Size: \t%lu\n", total);
  	  send_uart(buffer);
  	  bufclear();
  	  free_space = (uint32_t)(fre_clust * pfs->csize*0.5);
  	  sprintf (buffer, "SD CARD Free Space: \t%lu\n", free_space);
  	  send_uart(buffer);

  /************ The following operation is using PUST and GETS *******************/
  	  /* Open file to write/ create a file if it doesn't exist */
  	  fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
  	  f_stat("file1.txt", &finfo);
  	  /* Writing text */
  	  fresult = f_puts("This data is from the First FILE \n\n", &fil);

  	  send_uart ("File1.txt created and the data is written \n");

  	  /* Close file */
  	  fresult = f_close(&fil);

  	  /* Open file to read */
  	  fresult = f_open(&fil, "file1.txt", FA_READ);

  	  /* Read string from the file*/
  	  f_gets(buffer, finfo.fsize, &fil);

  	  send_uart(buffer);

  	  /* Close file */
  	  bufclear();

	  	// clearing buffer to show that result obtained is from the file
	  f_close(&fil);

  	/**************** The following operation is using f_write and f_read **************************/

  	  	/* Create second file with read write access and open it */
  	  	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);

  	  	/* Writing text */
  	  	strcpy (buffer, "This is File2.txt, written using ...f_write... and it says Hello from Controllerstech\n");

  	  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);

  	  	send_uart ("File2.txt created and data is written\n");

  	  	/* Close file */
  	  	f_close(&fil);



  	  	// clearing buffer to show that result obtained is from the file
  	  	bufclear();

  	  	/* Open second file to read */
  	  	fresult = f_open(&fil, "file2.txt", FA_READ);
  	  	if (fresult == FR_OK)send_uart ("file2.txt is open and the data is shown below\n");

  	  	/* Read data from the file
  	  	 * Please see the function details for the arguments */
  	  	f_read (&fil, buffer, f_size(&fil), &br);
  	  	send_uart(buffer);
  	  	send_uart("\n\n");

  	  	/* Close file */
  	  	f_close(&fil);

  	  bufclear();


  	  	/*********************UPDATING an existing file ***************************/

  	  	/* Open the file with write access */
  	  	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);

  	  	/* Move to offset to the end of the file */
  	  	fresult = f_lseek(&fil, f_size(&fil));

  	  	if (fresult == FR_OK)send_uart ("About to update the file2.txt\n");

  	  	/* write the string to the file */
  	  	fresult = f_puts("This is updated data and it should be in the end", &fil);

  	  	f_close (&fil);

  	  bufclear();

  	  	/* Open to read the file */
  	  	fresult = f_open (&fil, "file2.txt", FA_READ);

  	  	/* Read string from the file */
  	  	fresult = f_read (&fil, buffer, f_size(&fil), &br);
  	  	if (fresult == FR_OK)send_uart ("Below is the data from updated file2.txt\n");
  	  	send_uart(buffer);
  	  	send_uart("\n\n");

  	  	/* Close file */
  	  	f_close(&fil);

  	  bufclear();


  	  	/*************************REMOVING FILES FROM THE DIRECTORY ****************************/

  	  	fresult = f_unlink("/file1.txt");
  	  	if (fresult == FR_OK) send_uart("file1.txt removed successfully...\n");
  	  	else send_uart("WTF 0_0\n");

  	  	fresult = f_unlink("/file2.txt");
  	  	if (fresult == FR_OK) send_uart("file2.txt removed successfully...\n");

  	  	/* Unmount SDCARD */
  	  	fresult = f_mount(NULL, "/", 1);
  	  	if (fresult == FR_OK) send_uart ("SD CARD UNMOUNTED successfully...\n");

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
  hspi3.Init.Mode = SPI_MODE_MASTER;
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
