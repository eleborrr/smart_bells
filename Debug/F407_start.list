
F407_start.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000880c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  0800899c  0800899c  0001899c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090f4  080090f4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080090f4  080090f4  000190f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090fc  080090fc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090fc  080090fc  000190fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009100  08009100  00019100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00001394  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000141c  2000141c  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b4c  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c04  00000000  00000000  00034c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  00037808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010e8  00000000  00000000  00038a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023669  00000000  00000000  00039b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001703b  00000000  00000000  0005d169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf13a  00000000  00000000  000741a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001432de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005164  00000000  00000000  00143330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008984 	.word	0x08008984

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08008984 	.word	0x08008984

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_frsub>:
 8000280:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__addsf3>
 8000286:	bf00      	nop

08000288 <__aeabi_fsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800028c <__addsf3>:
 800028c:	0042      	lsls	r2, r0, #1
 800028e:	bf1f      	itttt	ne
 8000290:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000294:	ea92 0f03 	teqne	r2, r3
 8000298:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800029c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002a0:	d06a      	beq.n	8000378 <__addsf3+0xec>
 80002a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002aa:	bfc1      	itttt	gt
 80002ac:	18d2      	addgt	r2, r2, r3
 80002ae:	4041      	eorgt	r1, r0
 80002b0:	4048      	eorgt	r0, r1
 80002b2:	4041      	eorgt	r1, r0
 80002b4:	bfb8      	it	lt
 80002b6:	425b      	neglt	r3, r3
 80002b8:	2b19      	cmp	r3, #25
 80002ba:	bf88      	it	hi
 80002bc:	4770      	bxhi	lr
 80002be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002ca:	bf18      	it	ne
 80002cc:	4240      	negne	r0, r0
 80002ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002da:	bf18      	it	ne
 80002dc:	4249      	negne	r1, r1
 80002de:	ea92 0f03 	teq	r2, r3
 80002e2:	d03f      	beq.n	8000364 <__addsf3+0xd8>
 80002e4:	f1a2 0201 	sub.w	r2, r2, #1
 80002e8:	fa41 fc03 	asr.w	ip, r1, r3
 80002ec:	eb10 000c 	adds.w	r0, r0, ip
 80002f0:	f1c3 0320 	rsb	r3, r3, #32
 80002f4:	fa01 f103 	lsl.w	r1, r1, r3
 80002f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__addsf3+0x78>
 80002fe:	4249      	negs	r1, r1
 8000300:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000304:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000308:	d313      	bcc.n	8000332 <__addsf3+0xa6>
 800030a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800030e:	d306      	bcc.n	800031e <__addsf3+0x92>
 8000310:	0840      	lsrs	r0, r0, #1
 8000312:	ea4f 0131 	mov.w	r1, r1, rrx
 8000316:	f102 0201 	add.w	r2, r2, #1
 800031a:	2afe      	cmp	r2, #254	; 0xfe
 800031c:	d251      	bcs.n	80003c2 <__addsf3+0x136>
 800031e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000322:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000326:	bf08      	it	eq
 8000328:	f020 0001 	biceq.w	r0, r0, #1
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	4770      	bx	lr
 8000332:	0049      	lsls	r1, r1, #1
 8000334:	eb40 0000 	adc.w	r0, r0, r0
 8000338:	3a01      	subs	r2, #1
 800033a:	bf28      	it	cs
 800033c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000340:	d2ed      	bcs.n	800031e <__addsf3+0x92>
 8000342:	fab0 fc80 	clz	ip, r0
 8000346:	f1ac 0c08 	sub.w	ip, ip, #8
 800034a:	ebb2 020c 	subs.w	r2, r2, ip
 800034e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000352:	bfaa      	itet	ge
 8000354:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000358:	4252      	neglt	r2, r2
 800035a:	4318      	orrge	r0, r3
 800035c:	bfbc      	itt	lt
 800035e:	40d0      	lsrlt	r0, r2
 8000360:	4318      	orrlt	r0, r3
 8000362:	4770      	bx	lr
 8000364:	f092 0f00 	teq	r2, #0
 8000368:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800036c:	bf06      	itte	eq
 800036e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000372:	3201      	addeq	r2, #1
 8000374:	3b01      	subne	r3, #1
 8000376:	e7b5      	b.n	80002e4 <__addsf3+0x58>
 8000378:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800037c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000380:	bf18      	it	ne
 8000382:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000386:	d021      	beq.n	80003cc <__addsf3+0x140>
 8000388:	ea92 0f03 	teq	r2, r3
 800038c:	d004      	beq.n	8000398 <__addsf3+0x10c>
 800038e:	f092 0f00 	teq	r2, #0
 8000392:	bf08      	it	eq
 8000394:	4608      	moveq	r0, r1
 8000396:	4770      	bx	lr
 8000398:	ea90 0f01 	teq	r0, r1
 800039c:	bf1c      	itt	ne
 800039e:	2000      	movne	r0, #0
 80003a0:	4770      	bxne	lr
 80003a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003a6:	d104      	bne.n	80003b2 <__addsf3+0x126>
 80003a8:	0040      	lsls	r0, r0, #1
 80003aa:	bf28      	it	cs
 80003ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003b0:	4770      	bx	lr
 80003b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003b6:	bf3c      	itt	cc
 80003b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003bc:	4770      	bxcc	lr
 80003be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003ca:	4770      	bx	lr
 80003cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003d0:	bf16      	itet	ne
 80003d2:	4608      	movne	r0, r1
 80003d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003d8:	4601      	movne	r1, r0
 80003da:	0242      	lsls	r2, r0, #9
 80003dc:	bf06      	itte	eq
 80003de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003e2:	ea90 0f01 	teqeq	r0, r1
 80003e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003ea:	4770      	bx	lr

080003ec <__aeabi_ui2f>:
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	e004      	b.n	80003fc <__aeabi_i2f+0x8>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2f>:
 80003f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003f8:	bf48      	it	mi
 80003fa:	4240      	negmi	r0, r0
 80003fc:	ea5f 0c00 	movs.w	ip, r0
 8000400:	bf08      	it	eq
 8000402:	4770      	bxeq	lr
 8000404:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000408:	4601      	mov	r1, r0
 800040a:	f04f 0000 	mov.w	r0, #0
 800040e:	e01c      	b.n	800044a <__aeabi_l2f+0x2a>

08000410 <__aeabi_ul2f>:
 8000410:	ea50 0201 	orrs.w	r2, r0, r1
 8000414:	bf08      	it	eq
 8000416:	4770      	bxeq	lr
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	e00a      	b.n	8000434 <__aeabi_l2f+0x14>
 800041e:	bf00      	nop

08000420 <__aeabi_l2f>:
 8000420:	ea50 0201 	orrs.w	r2, r0, r1
 8000424:	bf08      	it	eq
 8000426:	4770      	bxeq	lr
 8000428:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800042c:	d502      	bpl.n	8000434 <__aeabi_l2f+0x14>
 800042e:	4240      	negs	r0, r0
 8000430:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000434:	ea5f 0c01 	movs.w	ip, r1
 8000438:	bf02      	ittt	eq
 800043a:	4684      	moveq	ip, r0
 800043c:	4601      	moveq	r1, r0
 800043e:	2000      	moveq	r0, #0
 8000440:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000444:	bf08      	it	eq
 8000446:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800044a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800044e:	fabc f28c 	clz	r2, ip
 8000452:	3a08      	subs	r2, #8
 8000454:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000458:	db10      	blt.n	800047c <__aeabi_l2f+0x5c>
 800045a:	fa01 fc02 	lsl.w	ip, r1, r2
 800045e:	4463      	add	r3, ip
 8000460:	fa00 fc02 	lsl.w	ip, r0, r2
 8000464:	f1c2 0220 	rsb	r2, r2, #32
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	eb43 0002 	adc.w	r0, r3, r2
 8000474:	bf08      	it	eq
 8000476:	f020 0001 	biceq.w	r0, r0, #1
 800047a:	4770      	bx	lr
 800047c:	f102 0220 	add.w	r2, r2, #32
 8000480:	fa01 fc02 	lsl.w	ip, r1, r2
 8000484:	f1c2 0220 	rsb	r2, r2, #32
 8000488:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800048c:	fa21 f202 	lsr.w	r2, r1, r2
 8000490:	eb43 0002 	adc.w	r0, r3, r2
 8000494:	bf08      	it	eq
 8000496:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800049a:	4770      	bx	lr

0800049c <__aeabi_uldivmod>:
 800049c:	b953      	cbnz	r3, 80004b4 <__aeabi_uldivmod+0x18>
 800049e:	b94a      	cbnz	r2, 80004b4 <__aeabi_uldivmod+0x18>
 80004a0:	2900      	cmp	r1, #0
 80004a2:	bf08      	it	eq
 80004a4:	2800      	cmpeq	r0, #0
 80004a6:	bf1c      	itt	ne
 80004a8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80004ac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80004b0:	f000 b974 	b.w	800079c <__aeabi_idiv0>
 80004b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80004b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004bc:	f000 f806 	bl	80004cc <__udivmoddi4>
 80004c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004c8:	b004      	add	sp, #16
 80004ca:	4770      	bx	lr

080004cc <__udivmoddi4>:
 80004cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004d0:	9d08      	ldr	r5, [sp, #32]
 80004d2:	4604      	mov	r4, r0
 80004d4:	468e      	mov	lr, r1
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d14d      	bne.n	8000576 <__udivmoddi4+0xaa>
 80004da:	428a      	cmp	r2, r1
 80004dc:	4694      	mov	ip, r2
 80004de:	d969      	bls.n	80005b4 <__udivmoddi4+0xe8>
 80004e0:	fab2 f282 	clz	r2, r2
 80004e4:	b152      	cbz	r2, 80004fc <__udivmoddi4+0x30>
 80004e6:	fa01 f302 	lsl.w	r3, r1, r2
 80004ea:	f1c2 0120 	rsb	r1, r2, #32
 80004ee:	fa20 f101 	lsr.w	r1, r0, r1
 80004f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f6:	ea41 0e03 	orr.w	lr, r1, r3
 80004fa:	4094      	lsls	r4, r2
 80004fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000500:	0c21      	lsrs	r1, r4, #16
 8000502:	fbbe f6f8 	udiv	r6, lr, r8
 8000506:	fa1f f78c 	uxth.w	r7, ip
 800050a:	fb08 e316 	mls	r3, r8, r6, lr
 800050e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000512:	fb06 f107 	mul.w	r1, r6, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d90a      	bls.n	8000530 <__udivmoddi4+0x64>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000522:	f080 811f 	bcs.w	8000764 <__udivmoddi4+0x298>
 8000526:	4299      	cmp	r1, r3
 8000528:	f240 811c 	bls.w	8000764 <__udivmoddi4+0x298>
 800052c:	3e02      	subs	r6, #2
 800052e:	4463      	add	r3, ip
 8000530:	1a5b      	subs	r3, r3, r1
 8000532:	b2a4      	uxth	r4, r4
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3310 	mls	r3, r8, r0, r3
 800053c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000540:	fb00 f707 	mul.w	r7, r0, r7
 8000544:	42a7      	cmp	r7, r4
 8000546:	d90a      	bls.n	800055e <__udivmoddi4+0x92>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000550:	f080 810a 	bcs.w	8000768 <__udivmoddi4+0x29c>
 8000554:	42a7      	cmp	r7, r4
 8000556:	f240 8107 	bls.w	8000768 <__udivmoddi4+0x29c>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000562:	1be4      	subs	r4, r4, r7
 8000564:	2600      	movs	r6, #0
 8000566:	b11d      	cbz	r5, 8000570 <__udivmoddi4+0xa4>
 8000568:	40d4      	lsrs	r4, r2
 800056a:	2300      	movs	r3, #0
 800056c:	e9c5 4300 	strd	r4, r3, [r5]
 8000570:	4631      	mov	r1, r6
 8000572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000576:	428b      	cmp	r3, r1
 8000578:	d909      	bls.n	800058e <__udivmoddi4+0xc2>
 800057a:	2d00      	cmp	r5, #0
 800057c:	f000 80ef 	beq.w	800075e <__udivmoddi4+0x292>
 8000580:	2600      	movs	r6, #0
 8000582:	e9c5 0100 	strd	r0, r1, [r5]
 8000586:	4630      	mov	r0, r6
 8000588:	4631      	mov	r1, r6
 800058a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058e:	fab3 f683 	clz	r6, r3
 8000592:	2e00      	cmp	r6, #0
 8000594:	d14a      	bne.n	800062c <__udivmoddi4+0x160>
 8000596:	428b      	cmp	r3, r1
 8000598:	d302      	bcc.n	80005a0 <__udivmoddi4+0xd4>
 800059a:	4282      	cmp	r2, r0
 800059c:	f200 80f9 	bhi.w	8000792 <__udivmoddi4+0x2c6>
 80005a0:	1a84      	subs	r4, r0, r2
 80005a2:	eb61 0303 	sbc.w	r3, r1, r3
 80005a6:	2001      	movs	r0, #1
 80005a8:	469e      	mov	lr, r3
 80005aa:	2d00      	cmp	r5, #0
 80005ac:	d0e0      	beq.n	8000570 <__udivmoddi4+0xa4>
 80005ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80005b2:	e7dd      	b.n	8000570 <__udivmoddi4+0xa4>
 80005b4:	b902      	cbnz	r2, 80005b8 <__udivmoddi4+0xec>
 80005b6:	deff      	udf	#255	; 0xff
 80005b8:	fab2 f282 	clz	r2, r2
 80005bc:	2a00      	cmp	r2, #0
 80005be:	f040 8092 	bne.w	80006e6 <__udivmoddi4+0x21a>
 80005c2:	eba1 010c 	sub.w	r1, r1, ip
 80005c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005ca:	fa1f fe8c 	uxth.w	lr, ip
 80005ce:	2601      	movs	r6, #1
 80005d0:	0c20      	lsrs	r0, r4, #16
 80005d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80005d6:	fb07 1113 	mls	r1, r7, r3, r1
 80005da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005de:	fb0e f003 	mul.w	r0, lr, r3
 80005e2:	4288      	cmp	r0, r1
 80005e4:	d908      	bls.n	80005f8 <__udivmoddi4+0x12c>
 80005e6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ea:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80005ee:	d202      	bcs.n	80005f6 <__udivmoddi4+0x12a>
 80005f0:	4288      	cmp	r0, r1
 80005f2:	f200 80cb 	bhi.w	800078c <__udivmoddi4+0x2c0>
 80005f6:	4643      	mov	r3, r8
 80005f8:	1a09      	subs	r1, r1, r0
 80005fa:	b2a4      	uxth	r4, r4
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1110 	mls	r1, r7, r0, r1
 8000604:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000608:	fb0e fe00 	mul.w	lr, lr, r0
 800060c:	45a6      	cmp	lr, r4
 800060e:	d908      	bls.n	8000622 <__udivmoddi4+0x156>
 8000610:	eb1c 0404 	adds.w	r4, ip, r4
 8000614:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000618:	d202      	bcs.n	8000620 <__udivmoddi4+0x154>
 800061a:	45a6      	cmp	lr, r4
 800061c:	f200 80bb 	bhi.w	8000796 <__udivmoddi4+0x2ca>
 8000620:	4608      	mov	r0, r1
 8000622:	eba4 040e 	sub.w	r4, r4, lr
 8000626:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800062a:	e79c      	b.n	8000566 <__udivmoddi4+0x9a>
 800062c:	f1c6 0720 	rsb	r7, r6, #32
 8000630:	40b3      	lsls	r3, r6
 8000632:	fa22 fc07 	lsr.w	ip, r2, r7
 8000636:	ea4c 0c03 	orr.w	ip, ip, r3
 800063a:	fa20 f407 	lsr.w	r4, r0, r7
 800063e:	fa01 f306 	lsl.w	r3, r1, r6
 8000642:	431c      	orrs	r4, r3
 8000644:	40f9      	lsrs	r1, r7
 8000646:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800064a:	fa00 f306 	lsl.w	r3, r0, r6
 800064e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000652:	0c20      	lsrs	r0, r4, #16
 8000654:	fa1f fe8c 	uxth.w	lr, ip
 8000658:	fb09 1118 	mls	r1, r9, r8, r1
 800065c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000660:	fb08 f00e 	mul.w	r0, r8, lr
 8000664:	4288      	cmp	r0, r1
 8000666:	fa02 f206 	lsl.w	r2, r2, r6
 800066a:	d90b      	bls.n	8000684 <__udivmoddi4+0x1b8>
 800066c:	eb1c 0101 	adds.w	r1, ip, r1
 8000670:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000674:	f080 8088 	bcs.w	8000788 <__udivmoddi4+0x2bc>
 8000678:	4288      	cmp	r0, r1
 800067a:	f240 8085 	bls.w	8000788 <__udivmoddi4+0x2bc>
 800067e:	f1a8 0802 	sub.w	r8, r8, #2
 8000682:	4461      	add	r1, ip
 8000684:	1a09      	subs	r1, r1, r0
 8000686:	b2a4      	uxth	r4, r4
 8000688:	fbb1 f0f9 	udiv	r0, r1, r9
 800068c:	fb09 1110 	mls	r1, r9, r0, r1
 8000690:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000694:	fb00 fe0e 	mul.w	lr, r0, lr
 8000698:	458e      	cmp	lr, r1
 800069a:	d908      	bls.n	80006ae <__udivmoddi4+0x1e2>
 800069c:	eb1c 0101 	adds.w	r1, ip, r1
 80006a0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80006a4:	d26c      	bcs.n	8000780 <__udivmoddi4+0x2b4>
 80006a6:	458e      	cmp	lr, r1
 80006a8:	d96a      	bls.n	8000780 <__udivmoddi4+0x2b4>
 80006aa:	3802      	subs	r0, #2
 80006ac:	4461      	add	r1, ip
 80006ae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006b2:	fba0 9402 	umull	r9, r4, r0, r2
 80006b6:	eba1 010e 	sub.w	r1, r1, lr
 80006ba:	42a1      	cmp	r1, r4
 80006bc:	46c8      	mov	r8, r9
 80006be:	46a6      	mov	lr, r4
 80006c0:	d356      	bcc.n	8000770 <__udivmoddi4+0x2a4>
 80006c2:	d053      	beq.n	800076c <__udivmoddi4+0x2a0>
 80006c4:	b15d      	cbz	r5, 80006de <__udivmoddi4+0x212>
 80006c6:	ebb3 0208 	subs.w	r2, r3, r8
 80006ca:	eb61 010e 	sbc.w	r1, r1, lr
 80006ce:	fa01 f707 	lsl.w	r7, r1, r7
 80006d2:	fa22 f306 	lsr.w	r3, r2, r6
 80006d6:	40f1      	lsrs	r1, r6
 80006d8:	431f      	orrs	r7, r3
 80006da:	e9c5 7100 	strd	r7, r1, [r5]
 80006de:	2600      	movs	r6, #0
 80006e0:	4631      	mov	r1, r6
 80006e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e6:	f1c2 0320 	rsb	r3, r2, #32
 80006ea:	40d8      	lsrs	r0, r3
 80006ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80006f0:	fa21 f303 	lsr.w	r3, r1, r3
 80006f4:	4091      	lsls	r1, r2
 80006f6:	4301      	orrs	r1, r0
 80006f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006fc:	fa1f fe8c 	uxth.w	lr, ip
 8000700:	fbb3 f0f7 	udiv	r0, r3, r7
 8000704:	fb07 3610 	mls	r6, r7, r0, r3
 8000708:	0c0b      	lsrs	r3, r1, #16
 800070a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800070e:	fb00 f60e 	mul.w	r6, r0, lr
 8000712:	429e      	cmp	r6, r3
 8000714:	fa04 f402 	lsl.w	r4, r4, r2
 8000718:	d908      	bls.n	800072c <__udivmoddi4+0x260>
 800071a:	eb1c 0303 	adds.w	r3, ip, r3
 800071e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000722:	d22f      	bcs.n	8000784 <__udivmoddi4+0x2b8>
 8000724:	429e      	cmp	r6, r3
 8000726:	d92d      	bls.n	8000784 <__udivmoddi4+0x2b8>
 8000728:	3802      	subs	r0, #2
 800072a:	4463      	add	r3, ip
 800072c:	1b9b      	subs	r3, r3, r6
 800072e:	b289      	uxth	r1, r1
 8000730:	fbb3 f6f7 	udiv	r6, r3, r7
 8000734:	fb07 3316 	mls	r3, r7, r6, r3
 8000738:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800073c:	fb06 f30e 	mul.w	r3, r6, lr
 8000740:	428b      	cmp	r3, r1
 8000742:	d908      	bls.n	8000756 <__udivmoddi4+0x28a>
 8000744:	eb1c 0101 	adds.w	r1, ip, r1
 8000748:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800074c:	d216      	bcs.n	800077c <__udivmoddi4+0x2b0>
 800074e:	428b      	cmp	r3, r1
 8000750:	d914      	bls.n	800077c <__udivmoddi4+0x2b0>
 8000752:	3e02      	subs	r6, #2
 8000754:	4461      	add	r1, ip
 8000756:	1ac9      	subs	r1, r1, r3
 8000758:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800075c:	e738      	b.n	80005d0 <__udivmoddi4+0x104>
 800075e:	462e      	mov	r6, r5
 8000760:	4628      	mov	r0, r5
 8000762:	e705      	b.n	8000570 <__udivmoddi4+0xa4>
 8000764:	4606      	mov	r6, r0
 8000766:	e6e3      	b.n	8000530 <__udivmoddi4+0x64>
 8000768:	4618      	mov	r0, r3
 800076a:	e6f8      	b.n	800055e <__udivmoddi4+0x92>
 800076c:	454b      	cmp	r3, r9
 800076e:	d2a9      	bcs.n	80006c4 <__udivmoddi4+0x1f8>
 8000770:	ebb9 0802 	subs.w	r8, r9, r2
 8000774:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000778:	3801      	subs	r0, #1
 800077a:	e7a3      	b.n	80006c4 <__udivmoddi4+0x1f8>
 800077c:	4646      	mov	r6, r8
 800077e:	e7ea      	b.n	8000756 <__udivmoddi4+0x28a>
 8000780:	4620      	mov	r0, r4
 8000782:	e794      	b.n	80006ae <__udivmoddi4+0x1e2>
 8000784:	4640      	mov	r0, r8
 8000786:	e7d1      	b.n	800072c <__udivmoddi4+0x260>
 8000788:	46d0      	mov	r8, sl
 800078a:	e77b      	b.n	8000684 <__udivmoddi4+0x1b8>
 800078c:	3b02      	subs	r3, #2
 800078e:	4461      	add	r1, ip
 8000790:	e732      	b.n	80005f8 <__udivmoddi4+0x12c>
 8000792:	4630      	mov	r0, r6
 8000794:	e709      	b.n	80005aa <__udivmoddi4+0xde>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	e742      	b.n	8000622 <__udivmoddi4+0x156>

0800079c <__aeabi_idiv0>:
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop

080007a0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007aa:	4804      	ldr	r0, [pc, #16]	; (80007bc <SELECT+0x1c>)
 80007ac:	f002 f968 	bl	8002a80 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f001 fe93 	bl	80024dc <HAL_Delay>
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40020000 	.word	0x40020000

080007c0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <DESELECT+0x1c>)
 80007cc:	f002 f958 	bl	8002a80 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f001 fe83 	bl	80024dc <HAL_Delay>
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40020000 	.word	0x40020000

080007e0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80007ea:	bf00      	nop
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <SPI_TxByte+0x30>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d1f8      	bne.n	80007ec <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80007fa:	1df9      	adds	r1, r7, #7
 80007fc:	2364      	movs	r3, #100	; 0x64
 80007fe:	2201      	movs	r2, #1
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <SPI_TxByte+0x30>)
 8000802:	f002 fe78 	bl	80034f6 <HAL_SPI_Transmit>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000a8 	.word	0x200000a8

08000814 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000820:	bf00      	nop
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <SPI_TxBuffer+0x30>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	f003 0302 	and.w	r3, r3, #2
 800082c:	2b02      	cmp	r3, #2
 800082e:	d1f8      	bne.n	8000822 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000830:	887a      	ldrh	r2, [r7, #2]
 8000832:	2364      	movs	r3, #100	; 0x64
 8000834:	6879      	ldr	r1, [r7, #4]
 8000836:	4803      	ldr	r0, [pc, #12]	; (8000844 <SPI_TxBuffer+0x30>)
 8000838:	f002 fe5d 	bl	80034f6 <HAL_SPI_Transmit>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000a8 	.word	0x200000a8

08000848 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800084e:	23ff      	movs	r3, #255	; 0xff
 8000850:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000852:	bf00      	nop
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <SPI_RxByte+0x34>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	2b02      	cmp	r3, #2
 8000860:	d1f8      	bne.n	8000854 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000862:	1dba      	adds	r2, r7, #6
 8000864:	1df9      	adds	r1, r7, #7
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2301      	movs	r3, #1
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <SPI_RxByte+0x34>)
 800086e:	f002 ff7e 	bl	800376e <HAL_SPI_TransmitReceive>

	return data;
 8000872:	79bb      	ldrb	r3, [r7, #6]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200000a8 	.word	0x200000a8

08000880 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000888:	f7ff ffde 	bl	8000848 <SPI_RxByte>
 800088c:	4603      	mov	r3, r0
 800088e:	461a      	mov	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	701a      	strb	r2, [r3, #0]
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <SD_ReadyWait+0x30>)
 80008a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008a8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80008aa:	f7ff ffcd 	bl	8000848 <SPI_RxByte>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2bff      	cmp	r3, #255	; 0xff
 80008b6:	d004      	beq.n	80008c2 <SD_ReadyWait+0x26>
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <SD_ReadyWait+0x30>)
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	b29b      	uxth	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f3      	bne.n	80008aa <SD_ReadyWait+0xe>

	return res;
 80008c2:	79fb      	ldrb	r3, [r7, #7]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200011c6 	.word	0x200011c6

080008d0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80008d6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80008da:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80008dc:	f7ff ff70 	bl	80007c0 <DESELECT>
	for(int i = 0; i < 10; i++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	e005      	b.n	80008f2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80008e6:	20ff      	movs	r0, #255	; 0xff
 80008e8:	f7ff ff7a 	bl	80007e0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	3301      	adds	r3, #1
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	2b09      	cmp	r3, #9
 80008f6:	ddf6      	ble.n	80008e6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80008f8:	f7ff ff52 	bl	80007a0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80008fc:	2340      	movs	r3, #64	; 0x40
 80008fe:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000910:	2395      	movs	r3, #149	; 0x95
 8000912:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000914:	463b      	mov	r3, r7
 8000916:	2106      	movs	r1, #6
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff7b 	bl	8000814 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800091e:	e002      	b.n	8000926 <SD_PowerOn+0x56>
	{
		cnt--;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	3b01      	subs	r3, #1
 8000924:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000926:	f7ff ff8f 	bl	8000848 <SPI_RxByte>
 800092a:	4603      	mov	r3, r0
 800092c:	2b01      	cmp	r3, #1
 800092e:	d002      	beq.n	8000936 <SD_PowerOn+0x66>
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1f4      	bne.n	8000920 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000936:	f7ff ff43 	bl	80007c0 <DESELECT>
	SPI_TxByte(0XFF);
 800093a:	20ff      	movs	r0, #255	; 0xff
 800093c:	f7ff ff50 	bl	80007e0 <SPI_TxByte>

	PowerFlag = 1;
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <SD_PowerOn+0x80>)
 8000942:	2201      	movs	r2, #1
 8000944:	701a      	strb	r2, [r3, #0]
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000a5 	.word	0x200000a5

08000954 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <SD_PowerOff+0x14>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	200000a5 	.word	0x200000a5

0800096c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <SD_CheckPower+0x14>)
 8000972:	781b      	ldrb	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	200000a5 	.word	0x200000a5

08000984 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <SD_RxDataBlock+0x5c>)
 8000990:	22c8      	movs	r2, #200	; 0xc8
 8000992:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000994:	f7ff ff58 	bl	8000848 <SPI_RxByte>
 8000998:	4603      	mov	r3, r0
 800099a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	2bff      	cmp	r3, #255	; 0xff
 80009a0:	d104      	bne.n	80009ac <SD_RxDataBlock+0x28>
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <SD_RxDataBlock+0x5c>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1f3      	bne.n	8000994 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	2bfe      	cmp	r3, #254	; 0xfe
 80009b0:	d001      	beq.n	80009b6 <SD_RxDataBlock+0x32>
 80009b2:	2300      	movs	r3, #0
 80009b4:	e00f      	b.n	80009d6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff5f 	bl	8000880 <SPI_RxBytePtr>
	} while(len--);
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	603a      	str	r2, [r7, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1f4      	bne.n	80009b6 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80009cc:	f7ff ff3c 	bl	8000848 <SPI_RxByte>
	SPI_RxByte();
 80009d0:	f7ff ff3a 	bl	8000848 <SPI_RxByte>

	return TRUE;
 80009d4:	2301      	movs	r3, #1
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200011c5 	.word	0x200011c5

080009e4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80009f4:	f7ff ff52 	bl	800089c <SD_ReadyWait>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2bff      	cmp	r3, #255	; 0xff
 80009fc:	d001      	beq.n	8000a02 <SD_TxDataBlock+0x1e>
 80009fe:	2300      	movs	r3, #0
 8000a00:	e02f      	b.n	8000a62 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000a02:	78fb      	ldrb	r3, [r7, #3]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff feeb 	bl	80007e0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000a0a:	78fb      	ldrb	r3, [r7, #3]
 8000a0c:	2bfd      	cmp	r3, #253	; 0xfd
 8000a0e:	d020      	beq.n	8000a52 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000a10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff fefd 	bl	8000814 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000a1a:	f7ff ff15 	bl	8000848 <SPI_RxByte>
		SPI_RxByte();
 8000a1e:	f7ff ff13 	bl	8000848 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000a22:	e00b      	b.n	8000a3c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000a24:	f7ff ff10 	bl	8000848 <SPI_RxByte>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	f003 031f 	and.w	r3, r3, #31
 8000a32:	2b05      	cmp	r3, #5
 8000a34:	d006      	beq.n	8000a44 <SD_TxDataBlock+0x60>
			i++;
 8000a36:	7bbb      	ldrb	r3, [r7, #14]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000a3c:	7bbb      	ldrb	r3, [r7, #14]
 8000a3e:	2b40      	cmp	r3, #64	; 0x40
 8000a40:	d9f0      	bls.n	8000a24 <SD_TxDataBlock+0x40>
 8000a42:	e000      	b.n	8000a46 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000a44:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000a46:	bf00      	nop
 8000a48:	f7ff fefe 	bl	8000848 <SPI_RxByte>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0fa      	beq.n	8000a48 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	f003 031f 	and.w	r3, r3, #31
 8000a58:	2b05      	cmp	r3, #5
 8000a5a:	d101      	bne.n	8000a60 <SD_TxDataBlock+0x7c>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e000      	b.n	8000a62 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b084      	sub	sp, #16
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	6039      	str	r1, [r7, #0]
 8000a74:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000a76:	f7ff ff11 	bl	800089c <SD_ReadyWait>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2bff      	cmp	r3, #255	; 0xff
 8000a7e:	d001      	beq.n	8000a84 <SD_SendCmd+0x1a>
 8000a80:	23ff      	movs	r3, #255	; 0xff
 8000a82:	e042      	b.n	8000b0a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff feaa 	bl	80007e0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	0e1b      	lsrs	r3, r3, #24
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fea4 	bl	80007e0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	0c1b      	lsrs	r3, r3, #16
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fe9e 	bl	80007e0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	0a1b      	lsrs	r3, r3, #8
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fe98 	bl	80007e0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fe93 	bl	80007e0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b40      	cmp	r3, #64	; 0x40
 8000abe:	d102      	bne.n	8000ac6 <SD_SendCmd+0x5c>
 8000ac0:	2395      	movs	r3, #149	; 0x95
 8000ac2:	73fb      	strb	r3, [r7, #15]
 8000ac4:	e007      	b.n	8000ad6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b48      	cmp	r3, #72	; 0x48
 8000aca:	d102      	bne.n	8000ad2 <SD_SendCmd+0x68>
 8000acc:	2387      	movs	r3, #135	; 0x87
 8000ace:	73fb      	strb	r3, [r7, #15]
 8000ad0:	e001      	b.n	8000ad6 <SD_SendCmd+0x6c>
	else crc = 1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fe81 	bl	80007e0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b4c      	cmp	r3, #76	; 0x4c
 8000ae2:	d101      	bne.n	8000ae8 <SD_SendCmd+0x7e>
 8000ae4:	f7ff feb0 	bl	8000848 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000ae8:	230a      	movs	r3, #10
 8000aea:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000aec:	f7ff feac 	bl	8000848 <SPI_RxByte>
 8000af0:	4603      	mov	r3, r0
 8000af2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000af4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	da05      	bge.n	8000b08 <SD_SendCmd+0x9e>
 8000afc:	7bbb      	ldrb	r3, [r7, #14]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	73bb      	strb	r3, [r7, #14]
 8000b02:	7bbb      	ldrb	r3, [r7, #14]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1f1      	bne.n	8000aec <SD_SendCmd+0x82>

	return res;
 8000b08:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SD_disk_initialize+0x14>
 8000b24:	2301      	movs	r3, #1
 8000b26:	e0d6      	b.n	8000cd6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000b28:	4b6d      	ldr	r3, [pc, #436]	; (8000ce0 <SD_disk_initialize+0x1cc>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <SD_disk_initialize+0x2a>
 8000b36:	4b6a      	ldr	r3, [pc, #424]	; (8000ce0 <SD_disk_initialize+0x1cc>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	e0cb      	b.n	8000cd6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000b3e:	f7ff fec7 	bl	80008d0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000b42:	f7ff fe2d 	bl	80007a0 <SELECT>

	/* check disk type */
	type = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2040      	movs	r0, #64	; 0x40
 8000b4e:	f7ff ff8c 	bl	8000a6a <SD_SendCmd>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	f040 80a6 	bne.w	8000ca6 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000b5a:	4b62      	ldr	r3, [pc, #392]	; (8000ce4 <SD_disk_initialize+0x1d0>)
 8000b5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b60:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000b62:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000b66:	2048      	movs	r0, #72	; 0x48
 8000b68:	f7ff ff7f 	bl	8000a6a <SD_SendCmd>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d158      	bne.n	8000c24 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	73fb      	strb	r3, [r7, #15]
 8000b76:	e00c      	b.n	8000b92 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000b78:	7bfc      	ldrb	r4, [r7, #15]
 8000b7a:	f7ff fe65 	bl	8000848 <SPI_RxByte>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	461a      	mov	r2, r3
 8000b82:	f104 0310 	add.w	r3, r4, #16
 8000b86:	443b      	add	r3, r7
 8000b88:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	73fb      	strb	r3, [r7, #15]
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	2b03      	cmp	r3, #3
 8000b96:	d9ef      	bls.n	8000b78 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000b98:	7abb      	ldrb	r3, [r7, #10]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	f040 8083 	bne.w	8000ca6 <SD_disk_initialize+0x192>
 8000ba0:	7afb      	ldrb	r3, [r7, #11]
 8000ba2:	2baa      	cmp	r3, #170	; 0xaa
 8000ba4:	d17f      	bne.n	8000ca6 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2077      	movs	r0, #119	; 0x77
 8000baa:	f7ff ff5e 	bl	8000a6a <SD_SendCmd>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d807      	bhi.n	8000bc4 <SD_disk_initialize+0xb0>
 8000bb4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000bb8:	2069      	movs	r0, #105	; 0x69
 8000bba:	f7ff ff56 	bl	8000a6a <SD_SendCmd>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d005      	beq.n	8000bd0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000bc4:	4b47      	ldr	r3, [pc, #284]	; (8000ce4 <SD_disk_initialize+0x1d0>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1eb      	bne.n	8000ba6 <SD_disk_initialize+0x92>
 8000bce:	e000      	b.n	8000bd2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000bd0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000bd2:	4b44      	ldr	r3, [pc, #272]	; (8000ce4 <SD_disk_initialize+0x1d0>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d064      	beq.n	8000ca6 <SD_disk_initialize+0x192>
 8000bdc:	2100      	movs	r1, #0
 8000bde:	207a      	movs	r0, #122	; 0x7a
 8000be0:	f7ff ff43 	bl	8000a6a <SD_SendCmd>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d15d      	bne.n	8000ca6 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	e00c      	b.n	8000c0a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000bf0:	7bfc      	ldrb	r4, [r7, #15]
 8000bf2:	f7ff fe29 	bl	8000848 <SPI_RxByte>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	f104 0310 	add.w	r3, r4, #16
 8000bfe:	443b      	add	r3, r7
 8000c00:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	3301      	adds	r3, #1
 8000c08:	73fb      	strb	r3, [r7, #15]
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d9ef      	bls.n	8000bf0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000c10:	7a3b      	ldrb	r3, [r7, #8]
 8000c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SD_disk_initialize+0x10a>
 8000c1a:	230c      	movs	r3, #12
 8000c1c:	e000      	b.n	8000c20 <SD_disk_initialize+0x10c>
 8000c1e:	2304      	movs	r3, #4
 8000c20:	73bb      	strb	r3, [r7, #14]
 8000c22:	e040      	b.n	8000ca6 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000c24:	2100      	movs	r1, #0
 8000c26:	2077      	movs	r0, #119	; 0x77
 8000c28:	f7ff ff1f 	bl	8000a6a <SD_SendCmd>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d808      	bhi.n	8000c44 <SD_disk_initialize+0x130>
 8000c32:	2100      	movs	r1, #0
 8000c34:	2069      	movs	r0, #105	; 0x69
 8000c36:	f7ff ff18 	bl	8000a6a <SD_SendCmd>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d801      	bhi.n	8000c44 <SD_disk_initialize+0x130>
 8000c40:	2302      	movs	r3, #2
 8000c42:	e000      	b.n	8000c46 <SD_disk_initialize+0x132>
 8000c44:	2301      	movs	r3, #1
 8000c46:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000c48:	7bbb      	ldrb	r3, [r7, #14]
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d10e      	bne.n	8000c6c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2077      	movs	r0, #119	; 0x77
 8000c52:	f7ff ff0a 	bl	8000a6a <SD_SendCmd>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d80e      	bhi.n	8000c7a <SD_disk_initialize+0x166>
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2069      	movs	r0, #105	; 0x69
 8000c60:	f7ff ff03 	bl	8000a6a <SD_SendCmd>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d107      	bne.n	8000c7a <SD_disk_initialize+0x166>
 8000c6a:	e00d      	b.n	8000c88 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2041      	movs	r0, #65	; 0x41
 8000c70:	f7ff fefb 	bl	8000a6a <SD_SendCmd>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d005      	beq.n	8000c86 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <SD_disk_initialize+0x1d0>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1e1      	bne.n	8000c48 <SD_disk_initialize+0x134>
 8000c84:	e000      	b.n	8000c88 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000c86:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <SD_disk_initialize+0x1d0>)
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d007      	beq.n	8000ca2 <SD_disk_initialize+0x18e>
 8000c92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c96:	2050      	movs	r0, #80	; 0x50
 8000c98:	f7ff fee7 	bl	8000a6a <SD_SendCmd>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SD_disk_initialize+0x192>
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <SD_disk_initialize+0x1d4>)
 8000ca8:	7bbb      	ldrb	r3, [r7, #14]
 8000caa:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000cac:	f7ff fd88 	bl	80007c0 <DESELECT>
	SPI_RxByte();
 8000cb0:	f7ff fdca 	bl	8000848 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000cb4:	7bbb      	ldrb	r3, [r7, #14]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d008      	beq.n	8000ccc <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <SD_disk_initialize+0x1cc>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	f023 0301 	bic.w	r3, r3, #1
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <SD_disk_initialize+0x1cc>)
 8000cc8:	701a      	strb	r2, [r3, #0]
 8000cca:	e001      	b.n	8000cd0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000ccc:	f7ff fe42 	bl	8000954 <SD_PowerOff>
	}

	return Stat;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <SD_disk_initialize+0x1cc>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2db      	uxtb	r3, r3
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd90      	pop	{r4, r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	200011c5 	.word	0x200011c5
 8000ce8:	200000a4 	.word	0x200000a4

08000cec <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SD_disk_status+0x14>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e002      	b.n	8000d06 <SD_disk_status+0x1a>
	return Stat;
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SD_disk_status+0x28>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b2db      	uxtb	r3, r3
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000000 	.word	0x20000000

08000d18 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	4603      	mov	r3, r0
 8000d26:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <SD_disk_read+0x1c>
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d101      	bne.n	8000d38 <SD_disk_read+0x20>
 8000d34:	2304      	movs	r3, #4
 8000d36:	e051      	b.n	8000ddc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d38:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <SD_disk_read+0xcc>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SD_disk_read+0x32>
 8000d46:	2303      	movs	r3, #3
 8000d48:	e048      	b.n	8000ddc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000d4a:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <SD_disk_read+0xd0>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d102      	bne.n	8000d5c <SD_disk_read+0x44>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	025b      	lsls	r3, r3, #9
 8000d5a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000d5c:	f7ff fd20 	bl	80007a0 <SELECT>

	if (count == 1)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d111      	bne.n	8000d8a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	2051      	movs	r0, #81	; 0x51
 8000d6a:	f7ff fe7e 	bl	8000a6a <SD_SendCmd>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d129      	bne.n	8000dc8 <SD_disk_read+0xb0>
 8000d74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d78:	68b8      	ldr	r0, [r7, #8]
 8000d7a:	f7ff fe03 	bl	8000984 <SD_RxDataBlock>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d021      	beq.n	8000dc8 <SD_disk_read+0xb0>
 8000d84:	2300      	movs	r3, #0
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	e01e      	b.n	8000dc8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	2052      	movs	r0, #82	; 0x52
 8000d8e:	f7ff fe6c 	bl	8000a6a <SD_SendCmd>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d117      	bne.n	8000dc8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9c:	68b8      	ldr	r0, [r7, #8]
 8000d9e:	f7ff fdf1 	bl	8000984 <SD_RxDataBlock>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d00a      	beq.n	8000dbe <SD_disk_read+0xa6>
				buff += 512;
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000dae:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1ed      	bne.n	8000d98 <SD_disk_read+0x80>
 8000dbc:	e000      	b.n	8000dc0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000dbe:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	204c      	movs	r0, #76	; 0x4c
 8000dc4:	f7ff fe51 	bl	8000a6a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000dc8:	f7ff fcfa 	bl	80007c0 <DESELECT>
	SPI_RxByte();
 8000dcc:	f7ff fd3c 	bl	8000848 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	bf14      	ite	ne
 8000dd6:	2301      	movne	r3, #1
 8000dd8:	2300      	moveq	r3, #0
 8000dda:	b2db      	uxtb	r3, r3
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000000 	.word	0x20000000
 8000de8:	200000a4 	.word	0x200000a4

08000dec <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	4603      	mov	r3, r0
 8000dfa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d102      	bne.n	8000e08 <SD_disk_write+0x1c>
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d101      	bne.n	8000e0c <SD_disk_write+0x20>
 8000e08:	2304      	movs	r3, #4
 8000e0a:	e06b      	b.n	8000ee4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e0c:	4b37      	ldr	r3, [pc, #220]	; (8000eec <SD_disk_write+0x100>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SD_disk_write+0x32>
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e062      	b.n	8000ee4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000e1e:	4b33      	ldr	r3, [pc, #204]	; (8000eec <SD_disk_write+0x100>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SD_disk_write+0x44>
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	e059      	b.n	8000ee4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000e30:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <SD_disk_write+0x104>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <SD_disk_write+0x56>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	025b      	lsls	r3, r3, #9
 8000e40:	607b      	str	r3, [r7, #4]

	SELECT();
 8000e42:	f7ff fcad 	bl	80007a0 <SELECT>

	if (count == 1)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d110      	bne.n	8000e6e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	2058      	movs	r0, #88	; 0x58
 8000e50:	f7ff fe0b 	bl	8000a6a <SD_SendCmd>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d13a      	bne.n	8000ed0 <SD_disk_write+0xe4>
 8000e5a:	21fe      	movs	r1, #254	; 0xfe
 8000e5c:	68b8      	ldr	r0, [r7, #8]
 8000e5e:	f7ff fdc1 	bl	80009e4 <SD_TxDataBlock>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d033      	beq.n	8000ed0 <SD_disk_write+0xe4>
			count = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	e030      	b.n	8000ed0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000e6e:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <SD_disk_write+0x104>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d007      	beq.n	8000e8a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2077      	movs	r0, #119	; 0x77
 8000e7e:	f7ff fdf4 	bl	8000a6a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000e82:	6839      	ldr	r1, [r7, #0]
 8000e84:	2057      	movs	r0, #87	; 0x57
 8000e86:	f7ff fdf0 	bl	8000a6a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	2059      	movs	r0, #89	; 0x59
 8000e8e:	f7ff fdec 	bl	8000a6a <SD_SendCmd>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d11b      	bne.n	8000ed0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000e98:	21fc      	movs	r1, #252	; 0xfc
 8000e9a:	68b8      	ldr	r0, [r7, #8]
 8000e9c:	f7ff fda2 	bl	80009e4 <SD_TxDataBlock>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d00a      	beq.n	8000ebc <SD_disk_write+0xd0>
				buff += 512;
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000eac:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1ee      	bne.n	8000e98 <SD_disk_write+0xac>
 8000eba:	e000      	b.n	8000ebe <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ebc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000ebe:	21fd      	movs	r1, #253	; 0xfd
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff fd8f 	bl	80009e4 <SD_TxDataBlock>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d101      	bne.n	8000ed0 <SD_disk_write+0xe4>
			{
				count = 1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000ed0:	f7ff fc76 	bl	80007c0 <DESELECT>
	SPI_RxByte();
 8000ed4:	f7ff fcb8 	bl	8000848 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	bf14      	ite	ne
 8000ede:	2301      	movne	r3, #1
 8000ee0:	2300      	moveq	r3, #0
 8000ee2:	b2db      	uxtb	r3, r3
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	200000a4 	.word	0x200000a4

08000ef4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b08b      	sub	sp, #44	; 0x2c
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	603a      	str	r2, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	460b      	mov	r3, r1
 8000f02:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SD_disk_ioctl+0x1e>
 8000f0e:	2304      	movs	r3, #4
 8000f10:	e115      	b.n	800113e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	2b05      	cmp	r3, #5
 8000f1c:	d124      	bne.n	8000f68 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000f1e:	6a3b      	ldr	r3, [r7, #32]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d012      	beq.n	8000f4c <SD_disk_ioctl+0x58>
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	dc1a      	bgt.n	8000f60 <SD_disk_ioctl+0x6c>
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d002      	beq.n	8000f34 <SD_disk_ioctl+0x40>
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d006      	beq.n	8000f40 <SD_disk_ioctl+0x4c>
 8000f32:	e015      	b.n	8000f60 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000f34:	f7ff fd0e 	bl	8000954 <SD_PowerOff>
			res = RES_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f3e:	e0fc      	b.n	800113a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000f40:	f7ff fcc6 	bl	80008d0 <SD_PowerOn>
			res = RES_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f4a:	e0f6      	b.n	800113a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000f4c:	6a3b      	ldr	r3, [r7, #32]
 8000f4e:	1c5c      	adds	r4, r3, #1
 8000f50:	f7ff fd0c 	bl	800096c <SD_CheckPower>
 8000f54:	4603      	mov	r3, r0
 8000f56:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f5e:	e0ec      	b.n	800113a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000f60:	2304      	movs	r3, #4
 8000f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f66:	e0e8      	b.n	800113a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f68:	4b77      	ldr	r3, [pc, #476]	; (8001148 <SD_disk_ioctl+0x254>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SD_disk_ioctl+0x86>
 8000f76:	2303      	movs	r3, #3
 8000f78:	e0e1      	b.n	800113e <SD_disk_ioctl+0x24a>

		SELECT();
 8000f7a:	f7ff fc11 	bl	80007a0 <SELECT>

		switch (ctrl)
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	2b0d      	cmp	r3, #13
 8000f82:	f200 80cb 	bhi.w	800111c <SD_disk_ioctl+0x228>
 8000f86:	a201      	add	r2, pc, #4	; (adr r2, 8000f8c <SD_disk_ioctl+0x98>)
 8000f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8c:	08001087 	.word	0x08001087
 8000f90:	08000fc5 	.word	0x08000fc5
 8000f94:	08001077 	.word	0x08001077
 8000f98:	0800111d 	.word	0x0800111d
 8000f9c:	0800111d 	.word	0x0800111d
 8000fa0:	0800111d 	.word	0x0800111d
 8000fa4:	0800111d 	.word	0x0800111d
 8000fa8:	0800111d 	.word	0x0800111d
 8000fac:	0800111d 	.word	0x0800111d
 8000fb0:	0800111d 	.word	0x0800111d
 8000fb4:	0800111d 	.word	0x0800111d
 8000fb8:	08001099 	.word	0x08001099
 8000fbc:	080010bd 	.word	0x080010bd
 8000fc0:	080010e1 	.word	0x080010e1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2049      	movs	r0, #73	; 0x49
 8000fc8:	f7ff fd4f 	bl	8000a6a <SD_SendCmd>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f040 80a8 	bne.w	8001124 <SD_disk_ioctl+0x230>
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2110      	movs	r1, #16
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fcd2 	bl	8000984 <SD_RxDataBlock>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 809e 	beq.w	8001124 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000fe8:	7b3b      	ldrb	r3, [r7, #12]
 8000fea:	099b      	lsrs	r3, r3, #6
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d10e      	bne.n	8001010 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000ff2:	7d7b      	ldrb	r3, [r7, #21]
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	7d3b      	ldrb	r3, [r7, #20]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	4413      	add	r3, r2
 8001000:	b29b      	uxth	r3, r3
 8001002:	3301      	adds	r3, #1
 8001004:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001006:	8bfb      	ldrh	r3, [r7, #30]
 8001008:	029a      	lsls	r2, r3, #10
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	e02e      	b.n	800106e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001010:	7c7b      	ldrb	r3, [r7, #17]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	b2da      	uxtb	r2, r3
 8001018:	7dbb      	ldrb	r3, [r7, #22]
 800101a:	09db      	lsrs	r3, r3, #7
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4413      	add	r3, r2
 8001020:	b2da      	uxtb	r2, r3
 8001022:	7d7b      	ldrb	r3, [r7, #21]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	b2db      	uxtb	r3, r3
 8001028:	f003 0306 	and.w	r3, r3, #6
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4413      	add	r3, r2
 8001030:	b2db      	uxtb	r3, r3
 8001032:	3302      	adds	r3, #2
 8001034:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001038:	7d3b      	ldrb	r3, [r7, #20]
 800103a:	099b      	lsrs	r3, r3, #6
 800103c:	b2db      	uxtb	r3, r3
 800103e:	b29a      	uxth	r2, r3
 8001040:	7cfb      	ldrb	r3, [r7, #19]
 8001042:	b29b      	uxth	r3, r3
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	b29b      	uxth	r3, r3
 8001048:	4413      	add	r3, r2
 800104a:	b29a      	uxth	r2, r3
 800104c:	7cbb      	ldrb	r3, [r7, #18]
 800104e:	029b      	lsls	r3, r3, #10
 8001050:	b29b      	uxth	r3, r3
 8001052:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001056:	b29b      	uxth	r3, r3
 8001058:	4413      	add	r3, r2
 800105a:	b29b      	uxth	r3, r3
 800105c:	3301      	adds	r3, #1
 800105e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001060:	8bfa      	ldrh	r2, [r7, #30]
 8001062:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001066:	3b09      	subs	r3, #9
 8001068:	409a      	lsls	r2, r3
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001074:	e056      	b.n	8001124 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001084:	e055      	b.n	8001132 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001086:	f7ff fc09 	bl	800089c <SD_ReadyWait>
 800108a:	4603      	mov	r3, r0
 800108c:	2bff      	cmp	r3, #255	; 0xff
 800108e:	d14b      	bne.n	8001128 <SD_disk_ioctl+0x234>
 8001090:	2300      	movs	r3, #0
 8001092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001096:	e047      	b.n	8001128 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001098:	2100      	movs	r1, #0
 800109a:	2049      	movs	r0, #73	; 0x49
 800109c:	f7ff fce5 	bl	8000a6a <SD_SendCmd>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d142      	bne.n	800112c <SD_disk_ioctl+0x238>
 80010a6:	2110      	movs	r1, #16
 80010a8:	6a38      	ldr	r0, [r7, #32]
 80010aa:	f7ff fc6b 	bl	8000984 <SD_RxDataBlock>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d03b      	beq.n	800112c <SD_disk_ioctl+0x238>
 80010b4:	2300      	movs	r3, #0
 80010b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80010ba:	e037      	b.n	800112c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80010bc:	2100      	movs	r1, #0
 80010be:	204a      	movs	r0, #74	; 0x4a
 80010c0:	f7ff fcd3 	bl	8000a6a <SD_SendCmd>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d132      	bne.n	8001130 <SD_disk_ioctl+0x23c>
 80010ca:	2110      	movs	r1, #16
 80010cc:	6a38      	ldr	r0, [r7, #32]
 80010ce:	f7ff fc59 	bl	8000984 <SD_RxDataBlock>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d02b      	beq.n	8001130 <SD_disk_ioctl+0x23c>
 80010d8:	2300      	movs	r3, #0
 80010da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80010de:	e027      	b.n	8001130 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80010e0:	2100      	movs	r1, #0
 80010e2:	207a      	movs	r0, #122	; 0x7a
 80010e4:	f7ff fcc1 	bl	8000a6a <SD_SendCmd>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d116      	bne.n	800111c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80010f4:	e00b      	b.n	800110e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80010f6:	6a3c      	ldr	r4, [r7, #32]
 80010f8:	1c63      	adds	r3, r4, #1
 80010fa:	623b      	str	r3, [r7, #32]
 80010fc:	f7ff fba4 	bl	8000848 <SPI_RxByte>
 8001100:	4603      	mov	r3, r0
 8001102:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001104:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001108:	3301      	adds	r3, #1
 800110a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800110e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001112:	2b03      	cmp	r3, #3
 8001114:	d9ef      	bls.n	80010f6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800111c:	2304      	movs	r3, #4
 800111e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001122:	e006      	b.n	8001132 <SD_disk_ioctl+0x23e>
			break;
 8001124:	bf00      	nop
 8001126:	e004      	b.n	8001132 <SD_disk_ioctl+0x23e>
			break;
 8001128:	bf00      	nop
 800112a:	e002      	b.n	8001132 <SD_disk_ioctl+0x23e>
			break;
 800112c:	bf00      	nop
 800112e:	e000      	b.n	8001132 <SD_disk_ioctl+0x23e>
			break;
 8001130:	bf00      	nop
		}

		DESELECT();
 8001132:	f7ff fb45 	bl	80007c0 <DESELECT>
		SPI_RxByte();
 8001136:	f7ff fb87 	bl	8000848 <SPI_RxByte>
	}

	return res;
 800113a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800113e:	4618      	mov	r0, r3
 8001140:	372c      	adds	r7, #44	; 0x2c
 8001142:	46bd      	mov	sp, r7
 8001144:	bd90      	pop	{r4, r7, pc}
 8001146:	bf00      	nop
 8001148:	20000000 	.word	0x20000000

0800114c <shift_reg_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void shift_reg_init(){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, 1);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <shift_reg_init+0x20>)
 8001158:	f001 fc92 	bl	8002a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001162:	4803      	ldr	r0, [pc, #12]	; (8001170 <shift_reg_init+0x24>)
 8001164:	f001 fc8c 	bl	8002a80 <HAL_GPIO_WritePin>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40020800 	.word	0x40020800
 8001170:	40020c00 	.word	0x40020c00

08001174 <put_val_to_shift_reg>:

void put_val_to_shift_reg(uint16_t val){
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	80fb      	strh	r3, [r7, #6]
	int c = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
	while(c < 16){
 8001182:	e01a      	b.n	80011ba <put_val_to_shift_reg+0x46>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, val & 1);
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	461a      	mov	r2, r3
 8001190:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001194:	4811      	ldr	r0, [pc, #68]	; (80011dc <put_val_to_shift_reg+0x68>)
 8001196:	f001 fc73 	bl	8002a80 <HAL_GPIO_WritePin>
		val >>= 1;
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	085b      	lsrs	r3, r3, #1
 800119e:	80fb      	strh	r3, [r7, #6]
		HAL_GPIO_WritePin(CLK1_GPIO_Port, CLK1_Pin, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2180      	movs	r1, #128	; 0x80
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <put_val_to_shift_reg+0x68>)
 80011a6:	f001 fc6b 	bl	8002a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLK1_GPIO_Port, CLK1_Pin, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	480b      	ldr	r0, [pc, #44]	; (80011dc <put_val_to_shift_reg+0x68>)
 80011b0:	f001 fc66 	bl	8002a80 <HAL_GPIO_WritePin>
		c++;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	3301      	adds	r3, #1
 80011b8:	60fb      	str	r3, [r7, #12]
	while(c < 16){
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	dde1      	ble.n	8001184 <put_val_to_shift_reg+0x10>
	}
	HAL_GPIO_WritePin(CLK2_GPIO_Port, CLK2_Pin, 1);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2140      	movs	r1, #64	; 0x40
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <put_val_to_shift_reg+0x68>)
 80011c6:	f001 fc5b 	bl	8002a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLK2_GPIO_Port, CLK2_Pin, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2140      	movs	r1, #64	; 0x40
 80011ce:	4803      	ldr	r0, [pc, #12]	; (80011dc <put_val_to_shift_reg+0x68>)
 80011d0:	f001 fc56 	bl	8002a80 <HAL_GPIO_WritePin>
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40020800 	.word	0x40020800

080011e0 <clear_shift_reg>:

void clear_shift_reg(){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ea:	480a      	ldr	r0, [pc, #40]	; (8001214 <clear_shift_reg+0x34>)
 80011ec:	f001 fc48 	bl	8002a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, 1);
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f6:	4807      	ldr	r0, [pc, #28]	; (8001214 <clear_shift_reg+0x34>)
 80011f8:	f001 fc42 	bl	8002a80 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CLK2_GPIO_Port, CLK2_Pin, 1);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2140      	movs	r1, #64	; 0x40
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <clear_shift_reg+0x34>)
 8001202:	f001 fc3d 	bl	8002a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLK2_GPIO_Port, CLK2_Pin, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2140      	movs	r1, #64	; 0x40
 800120a:	4802      	ldr	r0, [pc, #8]	; (8001214 <clear_shift_reg+0x34>)
 800120c:	f001 fc38 	bl	8002a80 <HAL_GPIO_WritePin>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40020800 	.word	0x40020800

08001218 <send_uart>:
DWORD fre_clust;
uint32_t total, free_space;

/* to send the data to the uart */

void send_uart (char *string){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7fe ffd5 	bl	80001d0 <strlen>
 8001226:	4603      	mov	r3, r0
 8001228:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart4, (uint8_t *) string , len, -1); // transmit in blocking mode
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	b29a      	uxth	r2, r3
 800122e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <send_uart+0x2c>)
 8001236:	f003 f96e 	bl	8004516 <HAL_UART_Transmit>
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000148 	.word	0x20000148

08001248 <get_sd_dirs>:
		buffer[i] = '\0';
	}
}


void get_sd_dirs(char *path){
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	b0fd      	sub	sp, #500	; 0x1f4
 800124c:	af06      	add	r7, sp, #24
 800124e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001252:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001256:	6018      	str	r0, [r3, #0]
	send_uart("READING MEMORY xD \n\r");
 8001258:	4850      	ldr	r0, [pc, #320]	; (800139c <get_sd_dirs+0x154>)
 800125a:	f7ff ffdd 	bl	8001218 <send_uart>
	DIR dir;
	char string[128];

	FRESULT res = f_opendir(&dir, path);
 800125e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001262:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001266:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800126a:	6819      	ldr	r1, [r3, #0]
 800126c:	4610      	mov	r0, r2
 800126e:	f006 fd16 	bl	8007c9e <f_opendir>
 8001272:	4603      	mov	r3, r0
 8001274:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7

	if (res != FR_OK){
 8001278:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00c      	beq.n	800129a <get_sd_dirs+0x52>
		sprintf(string, "res = %d f_opendir\n\r", res);
 8001280:	f897 21d7 	ldrb.w	r2, [r7, #471]	; 0x1d7
 8001284:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001288:	4945      	ldr	r1, [pc, #276]	; (80013a0 <get_sd_dirs+0x158>)
 800128a:	4618      	mov	r0, r3
 800128c:	f007 f80c 	bl	80082a8 <siprintf>
		send_uart(string);
 8001290:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ffbf 	bl	8001218 <send_uart>
	}

	if (res == FR_OK)
 800129a:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d176      	bne.n	8001390 <get_sd_dirs+0x148>
	{
	  while(1)
	  {
		FILINFO fno;

		res = f_readdir(&dir, &fno);
 80012a2:	f107 0208 	add.w	r2, r7, #8
 80012a6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f006 fd69 	bl	8007d84 <f_readdir>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7

		if (res != FR_OK){
 80012b8:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00c      	beq.n	80012da <get_sd_dirs+0x92>
			sprintf(string, "res = %d f_readdir\n\r", res);
 80012c0:	f897 21d7 	ldrb.w	r2, [r7, #471]	; 0x1d7
 80012c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80012c8:	4936      	ldr	r1, [pc, #216]	; (80013a4 <get_sd_dirs+0x15c>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f006 ffec 	bl	80082a8 <siprintf>
			send_uart(string);
 80012d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff9f 	bl	8001218 <send_uart>
		}

		if ((res != FR_OK) || (fno.fname[0] == 0))
 80012da:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d156      	bne.n	8001390 <get_sd_dirs+0x148>
 80012e2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80012e6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80012ea:	7d9b      	ldrb	r3, [r3, #22]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d04f      	beq.n	8001390 <get_sd_dirs+0x148>
		  break;

		sprintf(string, "%c%c%c%c %10d %s/%s\n\r",
		  ((fno.fattrib & AM_DIR) ? 'D' : '-'),
 80012f0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80012f4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80012f8:	7a1b      	ldrb	r3, [r3, #8]
 80012fa:	f003 0310 	and.w	r3, r3, #16
		sprintf(string, "%c%c%c%c %10d %s/%s\n\r",
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <get_sd_dirs+0xbe>
 8001302:	2444      	movs	r4, #68	; 0x44
 8001304:	e000      	b.n	8001308 <get_sd_dirs+0xc0>
 8001306:	242d      	movs	r4, #45	; 0x2d
		  ((fno.fattrib & AM_RDO) ? 'R' : '-'),
 8001308:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800130c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001310:	7a1b      	ldrb	r3, [r3, #8]
 8001312:	f003 0301 	and.w	r3, r3, #1
		sprintf(string, "%c%c%c%c %10d %s/%s\n\r",
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <get_sd_dirs+0xd6>
 800131a:	2552      	movs	r5, #82	; 0x52
 800131c:	e000      	b.n	8001320 <get_sd_dirs+0xd8>
 800131e:	252d      	movs	r5, #45	; 0x2d
		  ((fno.fattrib & AM_SYS) ? 'S' : '-'),
 8001320:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001324:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001328:	7a1b      	ldrb	r3, [r3, #8]
 800132a:	f003 0304 	and.w	r3, r3, #4
		sprintf(string, "%c%c%c%c %10d %s/%s\n\r",
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <get_sd_dirs+0xee>
 8001332:	2353      	movs	r3, #83	; 0x53
 8001334:	e000      	b.n	8001338 <get_sd_dirs+0xf0>
 8001336:	232d      	movs	r3, #45	; 0x2d
		  ((fno.fattrib & AM_HID) ? 'H' : '-'),
 8001338:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 800133c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001340:	7a12      	ldrb	r2, [r2, #8]
 8001342:	f002 0202 	and.w	r2, r2, #2
		sprintf(string, "%c%c%c%c %10d %s/%s\n\r",
 8001346:	2a00      	cmp	r2, #0
 8001348:	d001      	beq.n	800134e <get_sd_dirs+0x106>
 800134a:	2248      	movs	r2, #72	; 0x48
 800134c:	e000      	b.n	8001350 <get_sd_dirs+0x108>
 800134e:	222d      	movs	r2, #45	; 0x2d
		  (int)fno.fsize, path, fno.fname);
 8001350:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 8001354:	f5a1 71e8 	sub.w	r1, r1, #464	; 0x1d0
 8001358:	6809      	ldr	r1, [r1, #0]
		sprintf(string, "%c%c%c%c %10d %s/%s\n\r",
 800135a:	460e      	mov	r6, r1
 800135c:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8001360:	f107 0108 	add.w	r1, r7, #8
 8001364:	3116      	adds	r1, #22
 8001366:	9104      	str	r1, [sp, #16]
 8001368:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 800136c:	f5a1 71ea 	sub.w	r1, r1, #468	; 0x1d4
 8001370:	6809      	ldr	r1, [r1, #0]
 8001372:	9103      	str	r1, [sp, #12]
 8001374:	9602      	str	r6, [sp, #8]
 8001376:	9201      	str	r2, [sp, #4]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	462b      	mov	r3, r5
 800137c:	4622      	mov	r2, r4
 800137e:	490a      	ldr	r1, [pc, #40]	; (80013a8 <get_sd_dirs+0x160>)
 8001380:	f006 ff92 	bl	80082a8 <siprintf>

		send_uart(string);
 8001384:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff45 	bl	8001218 <send_uart>
	  {
 800138e:	e788      	b.n	80012a2 <get_sd_dirs+0x5a>
	  }
	}
}
 8001390:	bf00      	nop
 8001392:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 8001396:	46bd      	mov	sp, r7
 8001398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139a:	bf00      	nop
 800139c:	0800899c 	.word	0x0800899c
 80013a0:	080089b4 	.word	0x080089b4
 80013a4:	080089cc 	.word	0x080089cc
 80013a8:	080089e4 	.word	0x080089e4

080013ac <test_midi_play>:


void test_midi_play(){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	f5ad 5dcc 	sub.w	sp, sp, #6528	; 0x1980
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
//    MidiEvent midiEvents[60];

    uint32_t currentTime = 0; // Текущее время в тиках
 80013b6:	2300      	movs	r3, #0
 80013b8:	f507 52cc 	add.w	r2, r7, #6528	; 0x1980
 80013bc:	f102 0204 	add.w	r2, r2, #4
 80013c0:	6013      	str	r3, [r2, #0]
//	uint8_t *buffer;
//	long filelen;
	MidiEvent midiEvents[100];


	res = f_open(&file, "random.mid", FA_READ);
 80013c2:	f607 1348 	addw	r3, r7, #2376	; 0x948
 80013c6:	3b04      	subs	r3, #4
 80013c8:	2201      	movs	r2, #1
 80013ca:	49c8      	ldr	r1, [pc, #800]	; (80016ec <test_midi_play+0x340>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f006 f893 	bl	80074f8 <f_open>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f507 52cb 	add.w	r2, r7, #6496	; 0x1960
 80013d8:	f102 0217 	add.w	r2, r2, #23
 80013dc:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK) {
 80013de:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 80013e2:	f103 0317 	add.w	r3, r3, #23
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d012      	beq.n	8001412 <test_midi_play+0x66>
		sprintf(consoleOutput, "Ошибка открытия файла: %d\n\r", res);
 80013ec:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 80013f0:	f103 0317 	add.w	r3, r3, #23
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80013fa:	3b08      	subs	r3, #8
 80013fc:	49bc      	ldr	r1, [pc, #752]	; (80016f0 <test_midi_play+0x344>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f006 ff52 	bl	80082a8 <siprintf>
		send_uart(consoleOutput);
 8001404:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8001408:	3b08      	subs	r3, #8
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff04 	bl	8001218 <send_uart>
 8001410:	e1a5      	b.n	800175e <test_midi_play+0x3b2>
		return;
	}

	int c = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	f507 52cc 	add.w	r2, r7, #6528	; 0x1980
 8001418:	6013      	str	r3, [r2, #0]

	put_val_to_shift_reg(16);
 800141a:	2010      	movs	r0, #16
 800141c:	f7ff feaa 	bl	8001174 <put_val_to_shift_reg>

	while (1) {
		res = f_read(&file, fileBuffer, sizeof(fileBuffer), &bytesRead);
 8001420:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8001424:	3b08      	subs	r3, #8
 8001426:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 800142a:	3908      	subs	r1, #8
 800142c:	f607 1048 	addw	r0, r7, #2376	; 0x948
 8001430:	3804      	subs	r0, #4
 8001432:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001436:	f006 fa2b 	bl	8007890 <f_read>
 800143a:	4603      	mov	r3, r0
 800143c:	f507 52cb 	add.w	r2, r7, #6496	; 0x1960
 8001440:	f102 0217 	add.w	r2, r2, #23
 8001444:	7013      	strb	r3, [r2, #0]

		// Проверяем ошибки и конец файла
		if (res != FR_OK || bytesRead == 0 || c == 1024) {
 8001446:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 800144a:	f103 0317 	add.w	r3, r3, #23
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d116      	bne.n	8001482 <test_midi_play+0xd6>
 8001454:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8001458:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d010      	beq.n	8001482 <test_midi_play+0xd6>
 8001460:	f507 53cc 	add.w	r3, r7, #6528	; 0x1980
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800146a:	d00a      	beq.n	8001482 <test_midi_play+0xd6>
			break;
		}
		c++;
 800146c:	f507 53cc 	add.w	r3, r7, #6528	; 0x1980
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3301      	adds	r3, #1
 8001474:	f507 52cc 	add.w	r2, r7, #6528	; 0x1980
 8001478:	6013      	str	r3, [r2, #0]
		// Обрабатываем прочитанные данные
//		send_uart("Прочитано %d байт:\n", bytesRead);
//		for (UINT i = 0; i < bytesRead; i++) {
//			send_uart("%02X ", fileBuffer[i]);
//		}
		send_uart("\n\r");
 800147a:	489e      	ldr	r0, [pc, #632]	; (80016f4 <test_midi_play+0x348>)
 800147c:	f7ff fecc 	bl	8001218 <send_uart>
		res = f_read(&file, fileBuffer, sizeof(fileBuffer), &bytesRead);
 8001480:	e7ce      	b.n	8001420 <test_midi_play+0x74>
	}

	// Закрываем файл
	f_close(&file);
 8001482:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8001486:	3b04      	subs	r3, #4
 8001488:	4618      	mov	r0, r3
 800148a:	f006 fbde 	bl	8007c4a <f_close>
//	filelen = ftell(fileptr);             // Get the current byte offset in the file
//	rewind(fileptr);                      // Jump back to the beginning of the file

//	buffer = (char *)malloc(filelen * sizeof(char)); // Enough memory for the file
//	fread(buffer, 1, filelen, fileptr); // Read in the entire file
    parse_midi(fileBuffer, 1024, midiEvents, 1024);
 800148e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001492:	3a18      	subs	r2, #24
 8001494:	f507 6099 	add.w	r0, r7, #1224	; 0x4c8
 8001498:	3808      	subs	r0, #8
 800149a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a2:	f000 fb60 	bl	8001b66 <parse_midi>
    uint16_t output = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f507 52cb 	add.w	r2, r7, #6496	; 0x1960
 80014ac:	f102 021e 	add.w	r2, r2, #30
 80014b0:	8013      	strh	r3, [r2, #0]
    clear_shift_reg();
 80014b2:	f7ff fe95 	bl	80011e0 <clear_shift_reg>


    for(int i = 0; i < sizeof(midiEvents); i++){
 80014b6:	2300      	movs	r3, #0
 80014b8:	f507 52cb 	add.w	r2, r7, #6496	; 0x1960
 80014bc:	f102 0218 	add.w	r2, r2, #24
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e141      	b.n	8001748 <test_midi_play+0x39c>
    	currentTime += midiEvents[i].delta_time;
 80014c4:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80014c8:	f6a3 1178 	subw	r1, r3, #2424	; 0x978
 80014cc:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 80014d0:	f103 0318 	add.w	r3, r3, #24
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4613      	mov	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	3304      	adds	r3, #4
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f507 52cc 	add.w	r2, r7, #6528	; 0x1980
 80014e8:	f102 0204 	add.w	r2, r2, #4
 80014ec:	6812      	ldr	r2, [r2, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	f507 52cc 	add.w	r2, r7, #6528	; 0x1980
 80014f4:	f102 0204 	add.w	r2, r2, #4
 80014f8:	6013      	str	r3, [r2, #0]

		while (HAL_GetTick() < currentTime) {}
 80014fa:	bf00      	nop
 80014fc:	f000 ffe2 	bl	80024c4 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	f507 53cc 	add.w	r3, r7, #6528	; 0x1980
 8001506:	f103 0304 	add.w	r3, r3, #4
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4293      	cmp	r3, r2
 800150e:	d8f5      	bhi.n	80014fc <test_midi_play+0x150>

		MidiEvent curEvent = midiEvents[i];
 8001510:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8001514:	f6a3 1084 	subw	r0, r3, #2436	; 0x984
 8001518:	f607 1388 	addw	r3, r7, #2440	; 0x988
 800151c:	f6a3 1178 	subw	r1, r3, #2424	; 0x978
 8001520:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 8001524:	f103 0318 	add.w	r3, r3, #24
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	18ca      	adds	r2, r1, r3
 8001534:	4603      	mov	r3, r0
 8001536:	ca07      	ldmia	r2, {r0, r1, r2}
 8001538:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if (curEvent.type == MIDI_NOTE_ON){
 800153c:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8001540:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	2b90      	cmp	r3, #144	; 0x90
 8001548:	d151      	bne.n	80015ee <test_midi_play+0x242>
			output = output | (1 << (curEvent.data.note.note % 48));
 800154a:	f607 1388 	addw	r3, r7, #2440	; 0x988
 800154e:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 8001552:	7a5a      	ldrb	r2, [r3, #9]
 8001554:	4b68      	ldr	r3, [pc, #416]	; (80016f8 <test_midi_play+0x34c>)
 8001556:	fba3 1302 	umull	r1, r3, r3, r2
 800155a:	0959      	lsrs	r1, r3, #5
 800155c:	460b      	mov	r3, r1
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	440b      	add	r3, r1
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	b2db      	uxtb	r3, r3
 8001568:	461a      	mov	r2, r3
 800156a:	2301      	movs	r3, #1
 800156c:	4093      	lsls	r3, r2
 800156e:	b21a      	sxth	r2, r3
 8001570:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 8001574:	f103 031e 	add.w	r3, r3, #30
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	4313      	orrs	r3, r2
 800157e:	b21b      	sxth	r3, r3
 8001580:	f507 52cb 	add.w	r2, r7, #6496	; 0x1960
 8001584:	f102 021e 	add.w	r2, r2, #30
 8001588:	8013      	strh	r3, [r2, #0]
			put_val_to_shift_reg(output);
 800158a:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 800158e:	f103 031e 	add.w	r3, r3, #30
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fded 	bl	8001174 <put_val_to_shift_reg>
			sprintf(consoleOutput, "MIDI NOTE ON = %d ON CHANNEL = %d\n\r", curEvent.data.note.note, curEvent.data.note.channel);
 800159a:	f607 1388 	addw	r3, r7, #2440	; 0x988
 800159e:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 80015a2:	7a5b      	ldrb	r3, [r3, #9]
 80015a4:	461a      	mov	r2, r3
 80015a6:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80015aa:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 80015ae:	7a1b      	ldrb	r3, [r3, #8]
 80015b0:	f607 00c8 	addw	r0, r7, #2248	; 0x8c8
 80015b4:	3808      	subs	r0, #8
 80015b6:	4951      	ldr	r1, [pc, #324]	; (80016fc <test_midi_play+0x350>)
 80015b8:	f006 fe76 	bl	80082a8 <siprintf>
			send_uart(consoleOutput);
 80015bc:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80015c0:	3b08      	subs	r3, #8
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fe28 	bl	8001218 <send_uart>
			sprintf(consoleOutput, "output = %d\n\r", output);
 80015c8:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 80015cc:	f103 031e 	add.w	r3, r3, #30
 80015d0:	881a      	ldrh	r2, [r3, #0]
 80015d2:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80015d6:	3b08      	subs	r3, #8
 80015d8:	4949      	ldr	r1, [pc, #292]	; (8001700 <test_midi_play+0x354>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f006 fe64 	bl	80082a8 <siprintf>
			send_uart(consoleOutput);
 80015e0:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80015e4:	3b08      	subs	r3, #8
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fe16 	bl	8001218 <send_uart>
 80015ec:	e0a1      	b.n	8001732 <test_midi_play+0x386>

		} else  if(curEvent.type == MIDI_NOTE_OFF){
 80015ee:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80015f2:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	2b80      	cmp	r3, #128	; 0x80
 80015fa:	d15a      	bne.n	80016b2 <test_midi_play+0x306>
			if (output > 0)
 80015fc:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 8001600:	f103 031e 	add.w	r3, r3, #30
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d021      	beq.n	800164e <test_midi_play+0x2a2>
				output = output & (~(1 << curEvent.data.note.note % 48));
 800160a:	f607 1388 	addw	r3, r7, #2440	; 0x988
 800160e:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 8001612:	7a5a      	ldrb	r2, [r3, #9]
 8001614:	4b38      	ldr	r3, [pc, #224]	; (80016f8 <test_midi_play+0x34c>)
 8001616:	fba3 1302 	umull	r1, r3, r3, r2
 800161a:	0959      	lsrs	r1, r3, #5
 800161c:	460b      	mov	r3, r1
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	440b      	add	r3, r1
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	b2db      	uxtb	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	2301      	movs	r3, #1
 800162c:	4093      	lsls	r3, r2
 800162e:	b21b      	sxth	r3, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	b21a      	sxth	r2, r3
 8001634:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 8001638:	f103 031e 	add.w	r3, r3, #30
 800163c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001640:	4013      	ands	r3, r2
 8001642:	b21b      	sxth	r3, r3
 8001644:	f507 52cb 	add.w	r2, r7, #6496	; 0x1960
 8001648:	f102 021e 	add.w	r2, r2, #30
 800164c:	8013      	strh	r3, [r2, #0]
			sprintf(consoleOutput, "MIDI NOTE OFF = %d ON CHANNEL = %d\n\r", curEvent.data.note.note, curEvent.data.note.channel);
 800164e:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8001652:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 8001656:	7a5b      	ldrb	r3, [r3, #9]
 8001658:	461a      	mov	r2, r3
 800165a:	f607 1388 	addw	r3, r7, #2440	; 0x988
 800165e:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 8001662:	7a1b      	ldrb	r3, [r3, #8]
 8001664:	f607 00c8 	addw	r0, r7, #2248	; 0x8c8
 8001668:	3808      	subs	r0, #8
 800166a:	4926      	ldr	r1, [pc, #152]	; (8001704 <test_midi_play+0x358>)
 800166c:	f006 fe1c 	bl	80082a8 <siprintf>
			send_uart(consoleOutput);
 8001670:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8001674:	3b08      	subs	r3, #8
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fdce 	bl	8001218 <send_uart>
			put_val_to_shift_reg(output);
 800167c:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 8001680:	f103 031e 	add.w	r3, r3, #30
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fd74 	bl	8001174 <put_val_to_shift_reg>
			sprintf(consoleOutput, "output = %d\n\r", output);
 800168c:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 8001690:	f103 031e 	add.w	r3, r3, #30
 8001694:	881a      	ldrh	r2, [r3, #0]
 8001696:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800169a:	3b08      	subs	r3, #8
 800169c:	4918      	ldr	r1, [pc, #96]	; (8001700 <test_midi_play+0x354>)
 800169e:	4618      	mov	r0, r3
 80016a0:	f006 fe02 	bl	80082a8 <siprintf>
			send_uart(consoleOutput);
 80016a4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80016a8:	3b08      	subs	r3, #8
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fdb4 	bl	8001218 <send_uart>
 80016b0:	e03f      	b.n	8001732 <test_midi_play+0x386>
//			clear_shift_reg();
		}
		else if (curEvent.type == MIDI_SET_TEMPO){
 80016b2:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80016b6:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	f64f 7251 	movw	r2, #65361	; 0xff51
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d123      	bne.n	800170c <test_midi_play+0x360>
			sprintf(consoleOutput, "MIDI SET TEMPO = %d\n\r", curEvent.data.tempo.tempo);
 80016c4:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80016c8:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80016d2:	3b08      	subs	r3, #8
 80016d4:	490c      	ldr	r1, [pc, #48]	; (8001708 <test_midi_play+0x35c>)
 80016d6:	4618      	mov	r0, r3
 80016d8:	f006 fde6 	bl	80082a8 <siprintf>
			send_uart(consoleOutput);
 80016dc:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80016e0:	3b08      	subs	r3, #8
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fd98 	bl	8001218 <send_uart>
 80016e8:	e023      	b.n	8001732 <test_midi_play+0x386>
 80016ea:	bf00      	nop
 80016ec:	080089fc 	.word	0x080089fc
 80016f0:	08008a08 	.word	0x08008a08
 80016f4:	08008a38 	.word	0x08008a38
 80016f8:	aaaaaaab 	.word	0xaaaaaaab
 80016fc:	08008a3c 	.word	0x08008a3c
 8001700:	08008a60 	.word	0x08008a60
 8001704:	08008a70 	.word	0x08008a70
 8001708:	08008a98 	.word	0x08008a98
		}
		else{
			sprintf(consoleOutput, "%d\n\r", curEvent.type);
 800170c:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8001710:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800171c:	3b08      	subs	r3, #8
 800171e:	4912      	ldr	r1, [pc, #72]	; (8001768 <test_midi_play+0x3bc>)
 8001720:	4618      	mov	r0, r3
 8001722:	f006 fdc1 	bl	80082a8 <siprintf>
			send_uart(consoleOutput);
 8001726:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800172a:	3b08      	subs	r3, #8
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fd73 	bl	8001218 <send_uart>
    for(int i = 0; i < sizeof(midiEvents); i++){
 8001732:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 8001736:	f103 0318 	add.w	r3, r3, #24
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3301      	adds	r3, #1
 800173e:	f507 52cb 	add.w	r2, r7, #6496	; 0x1960
 8001742:	f102 0218 	add.w	r2, r2, #24
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 800174c:	f103 0318 	add.w	r3, r3, #24
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001756:	f4ff aeb5 	bcc.w	80014c4 <test_midi_play+0x118>
		}
//		HAL_Delay(1000);
    }
    clear_shift_reg();
 800175a:	f7ff fd41 	bl	80011e0 <clear_shift_reg>
}
 800175e:	f507 57cc 	add.w	r7, r7, #6528	; 0x1980
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	08008ab0 	.word	0x08008ab0

0800176c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001770:	f000 fe42 	bl	80023f8 <HAL_Init>

  /* USER CODE BEGIN Init */
  shift_reg_init();
 8001774:	f7ff fcea 	bl	800114c <shift_reg_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001778:	f000 f84a 	bl	8001810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800177c:	f000 f960 	bl	8001a40 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001780:	f000 f8e6 	bl	8001950 <MX_TIM2_Init>
  MX_FATFS_Init();
 8001784:	f003 fa3c 	bl	8004c00 <MX_FATFS_Init>
  MX_SPI3_Init();
 8001788:	f000 f8ac 	bl	80018e4 <MX_SPI3_Init>
  MX_UART4_Init();
 800178c:	f000 f92e 	bl	80019ec <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  send_uart ("Lift off\n");
 8001790:	4817      	ldr	r0, [pc, #92]	; (80017f0 <main+0x84>)
 8001792:	f7ff fd41 	bl	8001218 <send_uart>
  /* Mount SD Card*/
  fresult = f_mount(&fs, "", 0);
 8001796:	2200      	movs	r2, #0
 8001798:	4916      	ldr	r1, [pc, #88]	; (80017f4 <main+0x88>)
 800179a:	4817      	ldr	r0, [pc, #92]	; (80017f8 <main+0x8c>)
 800179c:	f005 fe66 	bl	800746c <f_mount>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <main+0x90>)
 80017a6:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK) send_uart ("error in mounting SD CARD ... \n");
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <main+0x90>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <main+0x4c>
 80017b0:	4813      	ldr	r0, [pc, #76]	; (8001800 <main+0x94>)
 80017b2:	f7ff fd31 	bl	8001218 <send_uart>
 80017b6:	e002      	b.n	80017be <main+0x52>
  else send_uart("SD CARD mounted successfully...\n");
 80017b8:	4812      	ldr	r0, [pc, #72]	; (8001804 <main+0x98>)
 80017ba:	f7ff fd2d 	bl	8001218 <send_uart>

  /* Read dirs from sd card*/
  get_sd_dirs("");
 80017be:	480d      	ldr	r0, [pc, #52]	; (80017f4 <main+0x88>)
 80017c0:	f7ff fd42 	bl	8001248 <get_sd_dirs>
  test_midi_play();
 80017c4:	f7ff fdf2 	bl	80013ac <test_midi_play>

  /* Unmount SDCARD */
  fresult = f_mount(NULL, "/", 1);
 80017c8:	2201      	movs	r2, #1
 80017ca:	490f      	ldr	r1, [pc, #60]	; (8001808 <main+0x9c>)
 80017cc:	2000      	movs	r0, #0
 80017ce:	f005 fe4d 	bl	800746c <f_mount>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <main+0x90>)
 80017d8:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_OK) send_uart ("SD CARD UNMOUNTED successfully...\n");
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <main+0x90>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <main+0x7c>
 80017e2:	480a      	ldr	r0, [pc, #40]	; (800180c <main+0xa0>)
 80017e4:	f7ff fd18 	bl	8001218 <send_uart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1);
 80017e8:	2001      	movs	r0, #1
 80017ea:	f000 fe77 	bl	80024dc <HAL_Delay>
 80017ee:	e7fb      	b.n	80017e8 <main+0x7c>
 80017f0:	08008ab8 	.word	0x08008ab8
 80017f4:	08008ac4 	.word	0x08008ac4
 80017f8:	2000018c 	.word	0x2000018c
 80017fc:	200011c4 	.word	0x200011c4
 8001800:	08008ac8 	.word	0x08008ac8
 8001804:	08008ae8 	.word	0x08008ae8
 8001808:	08008b0c 	.word	0x08008b0c
 800180c:	08008b10 	.word	0x08008b10

08001810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b094      	sub	sp, #80	; 0x50
 8001814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001816:	f107 0320 	add.w	r3, r7, #32
 800181a:	2230      	movs	r2, #48	; 0x30
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f006 fc4a 	bl	80080b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	4b28      	ldr	r3, [pc, #160]	; (80018dc <SystemClock_Config+0xcc>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	4a27      	ldr	r2, [pc, #156]	; (80018dc <SystemClock_Config+0xcc>)
 800183e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001842:	6413      	str	r3, [r2, #64]	; 0x40
 8001844:	4b25      	ldr	r3, [pc, #148]	; (80018dc <SystemClock_Config+0xcc>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001850:	2300      	movs	r3, #0
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <SystemClock_Config+0xd0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a21      	ldr	r2, [pc, #132]	; (80018e0 <SystemClock_Config+0xd0>)
 800185a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <SystemClock_Config+0xd0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800186c:	2301      	movs	r3, #1
 800186e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001870:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001876:	2302      	movs	r3, #2
 8001878:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800187a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800187e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001880:	2304      	movs	r3, #4
 8001882:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001884:	23a8      	movs	r3, #168	; 0xa8
 8001886:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001888:	2302      	movs	r3, #2
 800188a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800188c:	2304      	movs	r3, #4
 800188e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001890:	f107 0320 	add.w	r3, r7, #32
 8001894:	4618      	mov	r0, r3
 8001896:	f001 f90d 	bl	8002ab4 <HAL_RCC_OscConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018a0:	f000 f95c 	bl	8001b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a4:	230f      	movs	r3, #15
 80018a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a8:	2302      	movs	r3, #2
 80018aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2105      	movs	r1, #5
 80018c2:	4618      	mov	r0, r3
 80018c4:	f001 fb6e 	bl	8002fa4 <HAL_RCC_ClockConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018ce:	f000 f945 	bl	8001b5c <Error_Handler>
  }
}
 80018d2:	bf00      	nop
 80018d4:	3750      	adds	r7, #80	; 0x50
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40007000 	.word	0x40007000

080018e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <MX_SPI3_Init+0x64>)
 80018ea:	4a18      	ldr	r2, [pc, #96]	; (800194c <MX_SPI3_Init+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <MX_SPI3_Init+0x64>)
 80018f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <MX_SPI3_Init+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_SPI3_Init+0x64>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_SPI3_Init+0x64>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_SPI3_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_SPI3_Init+0x64>)
 8001910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001914:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_SPI3_Init+0x64>)
 8001918:	2200      	movs	r2, #0
 800191a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <MX_SPI3_Init+0x64>)
 800191e:	2200      	movs	r2, #0
 8001920:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_SPI3_Init+0x64>)
 8001924:	2200      	movs	r2, #0
 8001926:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <MX_SPI3_Init+0x64>)
 800192a:	2200      	movs	r2, #0
 800192c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_SPI3_Init+0x64>)
 8001930:	220a      	movs	r2, #10
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_SPI3_Init+0x64>)
 8001936:	f001 fd55 	bl	80033e4 <HAL_SPI_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001940:	f000 f90c 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200000a8 	.word	0x200000a8
 800194c:	40003c00 	.word	0x40003c00

08001950 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001964:	463b      	mov	r3, r7
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800196c:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <MX_TIM2_Init+0x98>)
 800196e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001972:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <MX_TIM2_Init+0x98>)
 8001976:	f240 32e7 	movw	r2, #999	; 0x3e7
 800197a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <MX_TIM2_Init+0x98>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <MX_TIM2_Init+0x98>)
 8001984:	f242 720f 	movw	r2, #9999	; 0x270f
 8001988:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198a:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <MX_TIM2_Init+0x98>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <MX_TIM2_Init+0x98>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001996:	4814      	ldr	r0, [pc, #80]	; (80019e8 <MX_TIM2_Init+0x98>)
 8001998:	f002 f956 	bl	8003c48 <HAL_TIM_Base_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019a2:	f000 f8db 	bl	8001b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	4619      	mov	r1, r3
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <MX_TIM2_Init+0x98>)
 80019b4:	f002 fa9f 	bl	8003ef6 <HAL_TIM_ConfigClockSource>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019be:	f000 f8cd 	bl	8001b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ca:	463b      	mov	r3, r7
 80019cc:	4619      	mov	r1, r3
 80019ce:	4806      	ldr	r0, [pc, #24]	; (80019e8 <MX_TIM2_Init+0x98>)
 80019d0:	f002 fcc4 	bl	800435c <HAL_TIMEx_MasterConfigSynchronization>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80019da:	f000 f8bf 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000100 	.word	0x20000100

080019ec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <MX_UART4_Init+0x4c>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <MX_UART4_Init+0x50>)
 80019f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <MX_UART4_Init+0x4c>)
 80019f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <MX_UART4_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <MX_UART4_Init+0x4c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <MX_UART4_Init+0x4c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <MX_UART4_Init+0x4c>)
 8001a12:	220c      	movs	r2, #12
 8001a14:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <MX_UART4_Init+0x4c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_UART4_Init+0x4c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a22:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_UART4_Init+0x4c>)
 8001a24:	f002 fd2a 	bl	800447c <HAL_UART_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001a2e:	f000 f895 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000148 	.word	0x20000148
 8001a3c:	40004c00 	.word	0x40004c00

08001a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	4b3c      	ldr	r3, [pc, #240]	; (8001b4c <MX_GPIO_Init+0x10c>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a3b      	ldr	r2, [pc, #236]	; (8001b4c <MX_GPIO_Init+0x10c>)
 8001a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b39      	ldr	r3, [pc, #228]	; (8001b4c <MX_GPIO_Init+0x10c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <MX_GPIO_Init+0x10c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a34      	ldr	r2, [pc, #208]	; (8001b4c <MX_GPIO_Init+0x10c>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b32      	ldr	r3, [pc, #200]	; (8001b4c <MX_GPIO_Init+0x10c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <MX_GPIO_Init+0x10c>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a2d      	ldr	r2, [pc, #180]	; (8001b4c <MX_GPIO_Init+0x10c>)
 8001a98:	f043 0308 	orr.w	r3, r3, #8
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <MX_GPIO_Init+0x10c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	4b27      	ldr	r3, [pc, #156]	; (8001b4c <MX_GPIO_Init+0x10c>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a26      	ldr	r2, [pc, #152]	; (8001b4c <MX_GPIO_Init+0x10c>)
 8001ab4:	f043 0304 	orr.w	r3, r3, #4
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <MX_GPIO_Init+0x10c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001acc:	4820      	ldr	r0, [pc, #128]	; (8001b50 <MX_GPIO_Init+0x110>)
 8001ace:	f000 ffd7 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CLK2_Pin|CLK1_Pin|MR_Pin|DS_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001ad8:	481e      	ldr	r0, [pc, #120]	; (8001b54 <MX_GPIO_Init+0x114>)
 8001ada:	f000 ffd1 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ae4:	481c      	ldr	r0, [pc, #112]	; (8001b58 <MX_GPIO_Init+0x118>)
 8001ae6:	f000 ffcb 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8001aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4619      	mov	r1, r3
 8001b02:	4813      	ldr	r0, [pc, #76]	; (8001b50 <MX_GPIO_Init+0x110>)
 8001b04:	f000 fe20 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK2_Pin CLK1_Pin MR_Pin DS_Pin */
  GPIO_InitStruct.Pin = CLK2_Pin|CLK1_Pin|MR_Pin|DS_Pin;
 8001b08:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <MX_GPIO_Init+0x114>)
 8001b22:	f000 fe11 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4806      	ldr	r0, [pc, #24]	; (8001b58 <MX_GPIO_Init+0x118>)
 8001b40:	f000 fe02 	bl	8002748 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b44:	bf00      	nop
 8001b46:	3728      	adds	r7, #40	; 0x28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020c00 	.word	0x40020c00
 8001b54:	40020800 	.word	0x40020800
 8001b58:	40020000 	.word	0x40020000

08001b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b60:	b672      	cpsid	i
}
 8001b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <Error_Handler+0x8>

08001b66 <parse_midi>:
    }
    printf("%d\n", numberOfTracks);
}

// Парсит MIDI-данные и заполняет массив событий
int parse_midi(uint8_t* midi_data, uint32_t data_size, MidiEvent* events, uint32_t max_events) {
 8001b66:	b590      	push	{r4, r7, lr}
 8001b68:	b08f      	sub	sp, #60	; 0x3c
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	603b      	str	r3, [r7, #0]
    uint32_t pos = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t event_count = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t delta_time = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (pos < data_size && event_count < max_events) {
 8001b80:	e0b5      	b.n	8001cee <parse_midi+0x188>
        // Читаем Delta-Time (переменная длина)
        uint32_t time = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t byte;
        do {
            byte = midi_data[pos++];
 8001b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	637a      	str	r2, [r7, #52]	; 0x34
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            time = (time << 7) | (byte & 0x7F);
 8001b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b98:	01da      	lsls	r2, r3, #7
 8001b9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
        } while (byte & 0x80);
 8001ba6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	dbeb      	blt.n	8001b86 <parse_midi+0x20>

        delta_time += time;
 8001bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb2:	4413      	add	r3, r2
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c

        // Читаем статус-байт
        uint8_t status = midi_data[pos++];
 8001bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	637a      	str	r2, [r7, #52]	; 0x34
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        // Note On/Off события
        if ((status & 0xF0) == MIDI_NOTE_ON || (status & 0xF0) == MIDI_NOTE_OFF) {
 8001bc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bce:	2b90      	cmp	r3, #144	; 0x90
 8001bd0:	d005      	beq.n	8001bde <parse_midi+0x78>
 8001bd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bda:	2b80      	cmp	r3, #128	; 0x80
 8001bdc:	d145      	bne.n	8001c6a <parse_midi+0x104>
            uint8_t note = midi_data[pos++];
 8001bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	637a      	str	r2, [r7, #52]	; 0x34
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            uint8_t velocity = midi_data[pos++];
 8001bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	637a      	str	r2, [r7, #52]	; 0x34
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

            MidiEvent event;
            if(velocity == 0)
 8001bfe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <parse_midi+0xa6>
            	event.type = MIDI_NOTE_OFF;
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	82bb      	strh	r3, [r7, #20]
 8001c0a:	e00a      	b.n	8001c22 <parse_midi+0xbc>
            else if ((status & 0xF0) == MIDI_NOTE_ON) {
 8001c0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c14:	2b90      	cmp	r3, #144	; 0x90
 8001c16:	d102      	bne.n	8001c1e <parse_midi+0xb8>
                event.type = MIDI_NOTE_ON;
 8001c18:	2390      	movs	r3, #144	; 0x90
 8001c1a:	82bb      	strh	r3, [r7, #20]
 8001c1c:	e001      	b.n	8001c22 <parse_midi+0xbc>
            } else {
                event.type = MIDI_NOTE_OFF;
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	82bb      	strh	r3, [r7, #20]
            }

            event.data.note.channel = status & 0x0F;
 8001c22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	773b      	strb	r3, [r7, #28]
            event.data.note.note = note - '0';
 8001c2e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001c32:	3b30      	subs	r3, #48	; 0x30
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	777b      	strb	r3, [r7, #29]
            event.data.note.velocity = velocity;
 8001c38:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001c3c:	77bb      	strb	r3, [r7, #30]

            event.delta_time = delta_time;
 8001c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c40:	61bb      	str	r3, [r7, #24]

            events[event_count++] = event;
 8001c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c44:	1c53      	adds	r3, r2, #1
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
 8001c48:	4613      	mov	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	461a      	mov	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	461c      	mov	r4, r3
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            delta_time = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
        if ((status & 0xF0) == MIDI_NOTE_ON || (status & 0xF0) == MIDI_NOTE_OFF) {
 8001c68:	e041      	b.n	8001cee <parse_midi+0x188>
        }
        // Мета-событие: Tempo (0xFF 0x51 0x03 <темп 3 байта>)
        else if (status == 0xFF && midi_data[pos] == 0x51) {
 8001c6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c6e:	2bff      	cmp	r3, #255	; 0xff
 8001c70:	d11a      	bne.n	8001ca8 <parse_midi+0x142>
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c76:	4413      	add	r3, r2
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b51      	cmp	r3, #81	; 0x51
 8001c7c:	d114      	bne.n	8001ca8 <parse_midi+0x142>
            pos++; // Пропускаем 0x51
 8001c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c80:	3301      	adds	r3, #1
 8001c82:	637b      	str	r3, [r7, #52]	; 0x34
            uint8_t meta_len = midi_data[pos++];
 8001c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	637a      	str	r2, [r7, #52]	; 0x34
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            if (meta_len == 3) {
 8001c94:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d128      	bne.n	8001cee <parse_midi+0x188>
                pos += 3;
 8001c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9e:	3303      	adds	r3, #3
 8001ca0:	637b      	str	r3, [r7, #52]	; 0x34
                delta_time = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        else if (status == 0xFF && midi_data[pos] == 0x51) {
 8001ca6:	e022      	b.n	8001cee <parse_midi+0x188>
            }
        }
        // Пропускаем другие события (не поддерживаются)
        else {
            // Пропускаем SysEx и другие мета-события
            if (status == 0xFF) {
 8001ca8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cac:	2bff      	cmp	r3, #255	; 0xff
 8001cae:	d115      	bne.n	8001cdc <parse_midi+0x176>
                uint8_t meta_type = midi_data[pos++];
 8001cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	637a      	str	r2, [r7, #52]	; 0x34
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4413      	add	r3, r2
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                uint8_t meta_len = midi_data[pos++];
 8001cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	637a      	str	r2, [r7, #52]	; 0x34
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4413      	add	r3, r2
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                pos += meta_len;
 8001cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cd6:	4413      	add	r3, r2
 8001cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cda:	e008      	b.n	8001cee <parse_midi+0x188>
            }
            // Пропускаем Control Change, Pitch Bend и т.д.
            else if ((status & 0xF0) >= 0xB0) {
 8001cdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ce4:	2baf      	cmp	r3, #175	; 0xaf
 8001ce6:	dd02      	ble.n	8001cee <parse_midi+0x188>
                pos += 2;
 8001ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cea:	3302      	adds	r3, #2
 8001cec:	637b      	str	r3, [r7, #52]	; 0x34
    while (pos < data_size && event_count < max_events) {
 8001cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d204      	bcs.n	8001d00 <parse_midi+0x19a>
 8001cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	f4ff af41 	bcc.w	8001b82 <parse_midi+0x1c>
            }
        }
    }

    events_post_proccessing(events, event_count);
 8001d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d02:	4619      	mov	r1, r3
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f805 	bl	8001d14 <events_post_proccessing>

    return event_count;
 8001d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	373c      	adds	r7, #60	; 0x3c
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd90      	pop	{r4, r7, pc}

08001d14 <events_post_proccessing>:

void events_post_proccessing(MidiEvent* events, int events_size){
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
    uint32_t current_time = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
//    uint32_t artificial_delay = get_note_ticks_delay(event.data.note.note);
    for (int i = 0; i < events_size; i++) {
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
 8001d26:	e018      	b.n	8001d5a <events_post_proccessing+0x46>
            current_time += events[i].delta_time;
 8001d28:	6a3a      	ldr	r2, [r7, #32]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	461a      	mov	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d3c:	4413      	add	r3, r2
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
            events[i].delta_time = current_time;  // Теперь храним абсолютное время
 8001d40:	6a3a      	ldr	r2, [r7, #32]
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4413      	add	r3, r2
 8001d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d52:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < events_size; i++) {
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	3301      	adds	r3, #1
 8001d58:	623b      	str	r3, [r7, #32]
 8001d5a:	6a3a      	ldr	r2, [r7, #32]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	dbe2      	blt.n	8001d28 <events_post_proccessing+0x14>
	}

    // 2. Применяем задержки к нотам
	for (int i = 0; i < events_size; i++) {
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e061      	b.n	8001e2c <events_post_proccessing+0x118>
		if (events[i].type == MIDI_NOTE_ON || events[i].type == MIDI_NOTE_OFF) {
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	461a      	mov	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	2b90      	cmp	r3, #144	; 0x90
 8001d7c:	d00a      	beq.n	8001d94 <events_post_proccessing+0x80>
 8001d7e:	69fa      	ldr	r2, [r7, #28]
 8001d80:	4613      	mov	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	2b80      	cmp	r3, #128	; 0x80
 8001d92:	d148      	bne.n	8001e26 <events_post_proccessing+0x112>
			int delay = get_note_ticks_delay(events[i].data.note.note);
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	461a      	mov	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	7a5b      	ldrb	r3, [r3, #9]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f916 	bl	8001fd8 <get_note_ticks_delay>
 8001dac:	60b8      	str	r0, [r7, #8]
			if(events[i].delta_time < delay){
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	461a      	mov	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d21b      	bcs.n	8001dfe <events_post_proccessing+0xea>
				AddDelayForAllExcept(delay - events[i].delta_time, i, events, events_size);
 8001dc6:	68b9      	ldr	r1, [r7, #8]
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	1acb      	subs	r3, r1, r3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	69f9      	ldr	r1, [r7, #28]
 8001de4:	f000 f88b 	bl	8001efe <AddDelayForAllExcept>
				events[i].delta_time = 0;
 8001de8:	69fa      	ldr	r2, [r7, #28]
 8001dea:	4613      	mov	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	461a      	mov	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4413      	add	r3, r2
 8001df8:	2200      	movs	r2, #0
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	e013      	b.n	8001e26 <events_post_proccessing+0x112>
			}
			else
				events[i].delta_time -= delay;  // Сдвигаем ноту
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	4613      	mov	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	461a      	mov	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	6858      	ldr	r0, [r3, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	1a42      	subs	r2, r0, r1
 8001e24:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < events_size; i++) {
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	61fb      	str	r3, [r7, #28]
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	db99      	blt.n	8001d68 <events_post_proccessing+0x54>
		}
	}

	// 3. Сортируем события по новому времени (пузырьковая сортировка для простоты)
	for (int i = 0; i < events_size - 1; i++) {
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	e02b      	b.n	8001e92 <events_post_proccessing+0x17e>
		for (int j = 0; j < events_size - i - 1; j++) {
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	e01e      	b.n	8001e7e <events_post_proccessing+0x16a>
			if (events[j].delta_time > events[j + 1].delta_time) {
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4413      	add	r3, r2
 8001e50:	6859      	ldr	r1, [r3, #4]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	461a      	mov	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4299      	cmp	r1, r3
 8001e68:	d906      	bls.n	8001e78 <events_post_proccessing+0x164>
				MidiSwap(events, j, j + 1);
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	461a      	mov	r2, r3
 8001e70:	6979      	ldr	r1, [r7, #20]
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f875 	bl	8001f62 <MidiSwap>
		for (int j = 0; j < events_size - i - 1; j++) {
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	3b01      	subs	r3, #1
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dbd9      	blt.n	8001e40 <events_post_proccessing+0x12c>
	for (int i = 0; i < events_size - 1; i++) {
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	dbce      	blt.n	8001e3a <events_post_proccessing+0x126>
			}
		}
	}

	// 4. Возвращаем delta_time к относительному формату
	current_time = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < events_size; i++) {
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	e022      	b.n	8001eec <events_post_proccessing+0x1d8>
		uint32_t new_delta = events[i].delta_time - current_time;
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	60fb      	str	r3, [r7, #12]
		current_time = events[i].delta_time;
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	461a      	mov	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
		events[i].delta_time = new_delta;
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	461a      	mov	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < events_size; i++) {
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbd8      	blt.n	8001ea6 <events_post_proccessing+0x192>
//						break;
//				}
//			}
//		}
//	}
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3728      	adds	r7, #40	; 0x28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <AddDelayForAllExcept>:
//	events[j].delta_time -= diff;
//	events[i] = events[j];
//	events[j] = temp;
//}

void AddDelayForAllExcept(int delay, int except, MidiEvent* events, int events_size){
 8001efe:	b480      	push	{r7}
 8001f00:	b087      	sub	sp, #28
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < events_size; i++){
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	e01c      	b.n	8001f4c <AddDelayForAllExcept+0x4e>
		if (i == except)
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d014      	beq.n	8001f44 <AddDelayForAllExcept+0x46>
			continue;
		events[i].delta_time += delay;
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	461a      	mov	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	6858      	ldr	r0, [r3, #4]
 8001f2c:	68f9      	ldr	r1, [r7, #12]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	1842      	adds	r2, r0, r1
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	e000      	b.n	8001f46 <AddDelayForAllExcept+0x48>
			continue;
 8001f44:	bf00      	nop
	for(int i = 0; i < events_size; i++){
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	dbde      	blt.n	8001f12 <AddDelayForAllExcept+0x14>
	}
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	371c      	adds	r7, #28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <MidiSwap>:

void MidiSwap(MidiEvent* events, int i, int j) {
 8001f62:	b490      	push	{r4, r7}
 8001f64:	b088      	sub	sp, #32
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
    MidiEvent temp = events[i];
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	441a      	add	r2, r3
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    events[i] = events[j];
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	461a      	mov	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1899      	adds	r1, r3, r2
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	460a      	mov	r2, r1
 8001faa:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    events[j] = temp;
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	461c      	mov	r4, r3
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001fce:	bf00      	nop
 8001fd0:	3720      	adds	r7, #32
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc90      	pop	{r4, r7}
 8001fd6:	4770      	bx	lr

08001fd8 <get_note_ticks_delay>:
int adjust_delta_time(MidiEvent note){
	int delta = get_note_delay(note.data.note.note);
	note.delta_time -= delta; // MIGHT BE ОТРИЦАТЕЛЬНЫМ(!)  чтобы фиксить - postprocessing
}

int get_note_ticks_delay(uint8_t note){
 8001fd8:	b5b0      	push	{r4, r5, r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
	NoteDelay delays[] = {
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <get_note_ticks_delay+0x54>)
 8001fe4:	f107 0408 	add.w	r4, r7, #8
 8001fe8:	461d      	mov	r5, r3
 8001fea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fee:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ff2:	e884 0003 	stmia.w	r4, {r0, r1}
		{0, 300},
		{1, 500},
		{2, 800}
	};
	if(note > 2  || note < 0)
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <get_note_ticks_delay+0x28>
		return 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e011      	b.n	8002024 <get_note_ticks_delay+0x4c>
	uint32_t delayVal = delays[note].delta_time;
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	3328      	adds	r3, #40	; 0x28
 8002006:	443b      	add	r3, r7
 8002008:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
	int result = count_ticks_of_delay(delays[note].delta_time);
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	3328      	adds	r3, #40	; 0x28
 8002014:	443b      	add	r3, r7
 8002016:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800201a:	4618      	mov	r0, r3
 800201c:	f000 f808 	bl	8002030 <count_ticks_of_delay>
 8002020:	6238      	str	r0, [r7, #32]
	return result;
 8002022:	6a3b      	ldr	r3, [r7, #32]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3728      	adds	r7, #40	; 0x28
 8002028:	46bd      	mov	sp, r7
 800202a:	bdb0      	pop	{r4, r5, r7, pc}
 800202c:	08008ba8 	.word	0x08008ba8

08002030 <count_ticks_of_delay>:

int count_ticks_of_delay(uint32_t target_delay){
 8002030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
    uint32_t ticks = ((uint64_t)target_delay * 1000 * PPQN) / TEMPO_MKS;
 800203a:	68f9      	ldr	r1, [r7, #12]
 800203c:	2000      	movs	r0, #0
 800203e:	6039      	str	r1, [r7, #0]
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002046:	b289      	uxth	r1, r1
 8002048:	2000      	movs	r0, #0
 800204a:	468a      	mov	sl, r1
 800204c:	4683      	mov	fp, r0
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	fb0a f001 	mul.w	r0, sl, r1
 8002054:	6839      	ldr	r1, [r7, #0]
 8002056:	fb01 f10b 	mul.w	r1, r1, fp
 800205a:	4401      	add	r1, r0
 800205c:	6838      	ldr	r0, [r7, #0]
 800205e:	fba0 230a 	umull	r2, r3, r0, sl
 8002062:	4419      	add	r1, r3
 8002064:	460b      	mov	r3, r1
 8002066:	4610      	mov	r0, r2
 8002068:	4619      	mov	r1, r3
 800206a:	f04f 0a00 	mov.w	sl, #0
 800206e:	f04f 0b00 	mov.w	fp, #0
 8002072:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002076:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800207a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800207e:	4650      	mov	r0, sl
 8002080:	4659      	mov	r1, fp
 8002082:	1a84      	subs	r4, r0, r2
 8002084:	eb61 0503 	sbc.w	r5, r1, r3
 8002088:	f04f 0000 	mov.w	r0, #0
 800208c:	f04f 0100 	mov.w	r1, #0
 8002090:	00a9      	lsls	r1, r5, #2
 8002092:	ea41 7194 	orr.w	r1, r1, r4, lsr #30
 8002096:	00a0      	lsls	r0, r4, #2
 8002098:	4604      	mov	r4, r0
 800209a:	460d      	mov	r5, r1
 800209c:	eb14 0802 	adds.w	r8, r4, r2
 80020a0:	eb45 0903 	adc.w	r9, r5, r3
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020b8:	4690      	mov	r8, r2
 80020ba:	4699      	mov	r9, r3
 80020bc:	4642      	mov	r2, r8
 80020be:	464b      	mov	r3, r9
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f7fe f9a4 	bl	8000410 <__aeabi_ul2f>
 80020c8:	ee06 0a90 	vmov	s13, r0
 80020cc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80020ec <count_ticks_of_delay+0xbc>
 80020d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020d8:	ee17 3a90 	vmov	r3, s15
 80020dc:	617b      	str	r3, [r7, #20]
	return ticks; //(ms -> s)
 80020de:	697b      	ldr	r3, [r7, #20]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020ea:	bf00      	nop
 80020ec:	48f42400 	.word	0x48f42400

080020f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <HAL_MspInit+0x4c>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	4a0f      	ldr	r2, [pc, #60]	; (800213c <HAL_MspInit+0x4c>)
 8002100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002104:	6453      	str	r3, [r2, #68]	; 0x44
 8002106:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_MspInit+0x4c>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_MspInit+0x4c>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a08      	ldr	r2, [pc, #32]	; (800213c <HAL_MspInit+0x4c>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_MspInit+0x4c>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800

08002140 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08a      	sub	sp, #40	; 0x28
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <HAL_SPI_MspInit+0x84>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d12c      	bne.n	80021bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	4b18      	ldr	r3, [pc, #96]	; (80021c8 <HAL_SPI_MspInit+0x88>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a17      	ldr	r2, [pc, #92]	; (80021c8 <HAL_SPI_MspInit+0x88>)
 800216c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <HAL_SPI_MspInit+0x88>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_SPI_MspInit+0x88>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <HAL_SPI_MspInit+0x88>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_SPI_MspInit+0x88>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800219a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800219e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a8:	2303      	movs	r3, #3
 80021aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021ac:	2306      	movs	r3, #6
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	4619      	mov	r1, r3
 80021b6:	4805      	ldr	r0, [pc, #20]	; (80021cc <HAL_SPI_MspInit+0x8c>)
 80021b8:	f000 fac6 	bl	8002748 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80021bc:	bf00      	nop
 80021be:	3728      	adds	r7, #40	; 0x28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40003c00 	.word	0x40003c00
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40020800 	.word	0x40020800

080021d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e0:	d115      	bne.n	800220e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <HAL_TIM_Base_MspInit+0x48>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <HAL_TIM_Base_MspInit+0x48>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_TIM_Base_MspInit+0x48>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	201c      	movs	r0, #28
 8002204:	f000 fa69 	bl	80026da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002208:	201c      	movs	r0, #28
 800220a:	f000 fa82 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800

0800221c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a19      	ldr	r2, [pc, #100]	; (80022a0 <HAL_UART_MspInit+0x84>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d12b      	bne.n	8002296 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <HAL_UART_MspInit+0x88>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	4a17      	ldr	r2, [pc, #92]	; (80022a4 <HAL_UART_MspInit+0x88>)
 8002248:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800224c:	6413      	str	r3, [r2, #64]	; 0x40
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <HAL_UART_MspInit+0x88>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_UART_MspInit+0x88>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a10      	ldr	r2, [pc, #64]	; (80022a4 <HAL_UART_MspInit+0x88>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <HAL_UART_MspInit+0x88>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002276:	2303      	movs	r3, #3
 8002278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002282:	2303      	movs	r3, #3
 8002284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002286:	2308      	movs	r3, #8
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	4619      	mov	r1, r3
 8002290:	4805      	ldr	r0, [pc, #20]	; (80022a8 <HAL_UART_MspInit+0x8c>)
 8002292:	f000 fa59 	bl	8002748 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002296:	bf00      	nop
 8002298:	3728      	adds	r7, #40	; 0x28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40004c00 	.word	0x40004c00
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020000 	.word	0x40020000

080022ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <NMI_Handler+0x4>

080022b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <HardFault_Handler+0x4>

080022b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <MemManage_Handler+0x4>

080022be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c2:	e7fe      	b.n	80022c2 <BusFault_Handler+0x4>

080022c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <UsageFault_Handler+0x4>

080022ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f8:	f000 f8d0 	bl	800249c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}

08002300 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <TIM2_IRQHandler+0x10>)
 8002306:	f001 fcee 	bl	8003ce6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000100 	.word	0x20000100

08002314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800231c:	4a14      	ldr	r2, [pc, #80]	; (8002370 <_sbrk+0x5c>)
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <_sbrk+0x60>)
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002328:	4b13      	ldr	r3, [pc, #76]	; (8002378 <_sbrk+0x64>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <_sbrk+0x64>)
 8002332:	4a12      	ldr	r2, [pc, #72]	; (800237c <_sbrk+0x68>)
 8002334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <_sbrk+0x64>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	429a      	cmp	r2, r3
 8002342:	d207      	bcs.n	8002354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002344:	f005 fe7e 	bl	8008044 <__errno>
 8002348:	4603      	mov	r3, r0
 800234a:	220c      	movs	r2, #12
 800234c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002352:	e009      	b.n	8002368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <_sbrk+0x64>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <_sbrk+0x64>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	4a05      	ldr	r2, [pc, #20]	; (8002378 <_sbrk+0x64>)
 8002364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002366:	68fb      	ldr	r3, [r7, #12]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20020000 	.word	0x20020000
 8002374:	00000400 	.word	0x00000400
 8002378:	200011c8 	.word	0x200011c8
 800237c:	20001420 	.word	0x20001420

08002380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <SystemInit+0x20>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <SystemInit+0x20>)
 800238c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023a8:	480d      	ldr	r0, [pc, #52]	; (80023e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023aa:	490e      	ldr	r1, [pc, #56]	; (80023e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023ac:	4a0e      	ldr	r2, [pc, #56]	; (80023e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023b0:	e002      	b.n	80023b8 <LoopCopyDataInit>

080023b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023b6:	3304      	adds	r3, #4

080023b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023bc:	d3f9      	bcc.n	80023b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023be:	4a0b      	ldr	r2, [pc, #44]	; (80023ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023c0:	4c0b      	ldr	r4, [pc, #44]	; (80023f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c4:	e001      	b.n	80023ca <LoopFillZerobss>

080023c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c8:	3204      	adds	r2, #4

080023ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023cc:	d3fb      	bcc.n	80023c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023ce:	f7ff ffd7 	bl	8002380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023d2:	f005 fe3d 	bl	8008050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023d6:	f7ff f9c9 	bl	800176c <main>
  bx  lr    
 80023da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023e4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80023e8:	08009104 	.word	0x08009104
  ldr r2, =_sbss
 80023ec:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80023f0:	2000141c 	.word	0x2000141c

080023f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023f4:	e7fe      	b.n	80023f4 <ADC_IRQHandler>
	...

080023f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <HAL_Init+0x40>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <HAL_Init+0x40>)
 8002402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002406:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_Init+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <HAL_Init+0x40>)
 800240e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002412:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_Init+0x40>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a07      	ldr	r2, [pc, #28]	; (8002438 <HAL_Init+0x40>)
 800241a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002420:	2003      	movs	r0, #3
 8002422:	f000 f94f 	bl	80026c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002426:	200f      	movs	r0, #15
 8002428:	f000 f808 	bl	800243c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800242c:	f7ff fe60 	bl	80020f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40023c00 	.word	0x40023c00

0800243c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_InitTick+0x54>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_InitTick+0x58>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	4619      	mov	r1, r3
 800244e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002452:	fbb3 f3f1 	udiv	r3, r3, r1
 8002456:	fbb2 f3f3 	udiv	r3, r2, r3
 800245a:	4618      	mov	r0, r3
 800245c:	f000 f967 	bl	800272e <HAL_SYSTICK_Config>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e00e      	b.n	8002488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b0f      	cmp	r3, #15
 800246e:	d80a      	bhi.n	8002486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002470:	2200      	movs	r2, #0
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002478:	f000 f92f 	bl	80026da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800247c:	4a06      	ldr	r2, [pc, #24]	; (8002498 <HAL_InitTick+0x5c>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e000      	b.n	8002488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000004 	.word	0x20000004
 8002494:	2000000c 	.word	0x2000000c
 8002498:	20000008 	.word	0x20000008

0800249c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_IncTick+0x20>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_IncTick+0x24>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <HAL_IncTick+0x24>)
 80024ae:	6013      	str	r3, [r2, #0]
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	2000000c 	.word	0x2000000c
 80024c0:	200011cc 	.word	0x200011cc

080024c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return uwTick;
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <HAL_GetTick+0x14>)
 80024ca:	681b      	ldr	r3, [r3, #0]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	200011cc 	.word	0x200011cc

080024dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e4:	f7ff ffee 	bl	80024c4 <HAL_GetTick>
 80024e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024f4:	d005      	beq.n	8002502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <HAL_Delay+0x44>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4413      	add	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002502:	bf00      	nop
 8002504:	f7ff ffde 	bl	80024c4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	429a      	cmp	r2, r3
 8002512:	d8f7      	bhi.n	8002504 <HAL_Delay+0x28>
  {
  }
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	2000000c 	.word	0x2000000c

08002524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002540:	4013      	ands	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800254c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002556:	4a04      	ldr	r2, [pc, #16]	; (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	60d3      	str	r3, [r2, #12]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <__NVIC_GetPriorityGrouping+0x18>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	f003 0307 	and.w	r3, r3, #7
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	2b00      	cmp	r3, #0
 8002598:	db0b      	blt.n	80025b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	f003 021f 	and.w	r2, r3, #31
 80025a0:	4907      	ldr	r1, [pc, #28]	; (80025c0 <__NVIC_EnableIRQ+0x38>)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	2001      	movs	r0, #1
 80025aa:	fa00 f202 	lsl.w	r2, r0, r2
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000e100 	.word	0xe000e100

080025c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	6039      	str	r1, [r7, #0]
 80025ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	db0a      	blt.n	80025ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	490c      	ldr	r1, [pc, #48]	; (8002610 <__NVIC_SetPriority+0x4c>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	0112      	lsls	r2, r2, #4
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	440b      	add	r3, r1
 80025e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025ec:	e00a      	b.n	8002604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4908      	ldr	r1, [pc, #32]	; (8002614 <__NVIC_SetPriority+0x50>)
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	3b04      	subs	r3, #4
 80025fc:	0112      	lsls	r2, r2, #4
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	440b      	add	r3, r1
 8002602:	761a      	strb	r2, [r3, #24]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000e100 	.word	0xe000e100
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f1c3 0307 	rsb	r3, r3, #7
 8002632:	2b04      	cmp	r3, #4
 8002634:	bf28      	it	cs
 8002636:	2304      	movcs	r3, #4
 8002638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3304      	adds	r3, #4
 800263e:	2b06      	cmp	r3, #6
 8002640:	d902      	bls.n	8002648 <NVIC_EncodePriority+0x30>
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3b03      	subs	r3, #3
 8002646:	e000      	b.n	800264a <NVIC_EncodePriority+0x32>
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43da      	mvns	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	401a      	ands	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002660:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	43d9      	mvns	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	4313      	orrs	r3, r2
         );
}
 8002672:	4618      	mov	r0, r3
 8002674:	3724      	adds	r7, #36	; 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002690:	d301      	bcc.n	8002696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002692:	2301      	movs	r3, #1
 8002694:	e00f      	b.n	80026b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002696:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <SysTick_Config+0x40>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269e:	210f      	movs	r1, #15
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026a4:	f7ff ff8e 	bl	80025c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <SysTick_Config+0x40>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ae:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <SysTick_Config+0x40>)
 80026b0:	2207      	movs	r2, #7
 80026b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	e000e010 	.word	0xe000e010

080026c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff29 	bl	8002524 <__NVIC_SetPriorityGrouping>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ec:	f7ff ff3e 	bl	800256c <__NVIC_GetPriorityGrouping>
 80026f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	6978      	ldr	r0, [r7, #20]
 80026f8:	f7ff ff8e 	bl	8002618 <NVIC_EncodePriority>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff5d 	bl	80025c4 <__NVIC_SetPriority>
}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800271c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff31 	bl	8002588 <__NVIC_EnableIRQ>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ffa2 	bl	8002680 <SysTick_Config>
 800273c:	4603      	mov	r3, r0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	e16b      	b.n	8002a3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002764:	2201      	movs	r2, #1
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	f040 815a 	bne.w	8002a36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b01      	cmp	r3, #1
 800278c:	d005      	beq.n	800279a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002796:	2b02      	cmp	r3, #2
 8002798:	d130      	bne.n	80027fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	2203      	movs	r2, #3
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d0:	2201      	movs	r2, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 0201 	and.w	r2, r3, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b03      	cmp	r3, #3
 8002806:	d017      	beq.n	8002838 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	2203      	movs	r2, #3
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d123      	bne.n	800288c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	08da      	lsrs	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3208      	adds	r2, #8
 800284c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	220f      	movs	r2, #15
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	08da      	lsrs	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3208      	adds	r2, #8
 8002886:	69b9      	ldr	r1, [r7, #24]
 8002888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0203 	and.w	r2, r3, #3
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80b4 	beq.w	8002a36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	4b60      	ldr	r3, [pc, #384]	; (8002a54 <HAL_GPIO_Init+0x30c>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	4a5f      	ldr	r2, [pc, #380]	; (8002a54 <HAL_GPIO_Init+0x30c>)
 80028d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028dc:	6453      	str	r3, [r2, #68]	; 0x44
 80028de:	4b5d      	ldr	r3, [pc, #372]	; (8002a54 <HAL_GPIO_Init+0x30c>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ea:	4a5b      	ldr	r2, [pc, #364]	; (8002a58 <HAL_GPIO_Init+0x310>)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	089b      	lsrs	r3, r3, #2
 80028f0:	3302      	adds	r3, #2
 80028f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	220f      	movs	r2, #15
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a52      	ldr	r2, [pc, #328]	; (8002a5c <HAL_GPIO_Init+0x314>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d02b      	beq.n	800296e <HAL_GPIO_Init+0x226>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a51      	ldr	r2, [pc, #324]	; (8002a60 <HAL_GPIO_Init+0x318>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d025      	beq.n	800296a <HAL_GPIO_Init+0x222>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a50      	ldr	r2, [pc, #320]	; (8002a64 <HAL_GPIO_Init+0x31c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01f      	beq.n	8002966 <HAL_GPIO_Init+0x21e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4f      	ldr	r2, [pc, #316]	; (8002a68 <HAL_GPIO_Init+0x320>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d019      	beq.n	8002962 <HAL_GPIO_Init+0x21a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4e      	ldr	r2, [pc, #312]	; (8002a6c <HAL_GPIO_Init+0x324>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_GPIO_Init+0x216>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4d      	ldr	r2, [pc, #308]	; (8002a70 <HAL_GPIO_Init+0x328>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00d      	beq.n	800295a <HAL_GPIO_Init+0x212>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4c      	ldr	r2, [pc, #304]	; (8002a74 <HAL_GPIO_Init+0x32c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <HAL_GPIO_Init+0x20e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4b      	ldr	r2, [pc, #300]	; (8002a78 <HAL_GPIO_Init+0x330>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_GPIO_Init+0x20a>
 800294e:	2307      	movs	r3, #7
 8002950:	e00e      	b.n	8002970 <HAL_GPIO_Init+0x228>
 8002952:	2308      	movs	r3, #8
 8002954:	e00c      	b.n	8002970 <HAL_GPIO_Init+0x228>
 8002956:	2306      	movs	r3, #6
 8002958:	e00a      	b.n	8002970 <HAL_GPIO_Init+0x228>
 800295a:	2305      	movs	r3, #5
 800295c:	e008      	b.n	8002970 <HAL_GPIO_Init+0x228>
 800295e:	2304      	movs	r3, #4
 8002960:	e006      	b.n	8002970 <HAL_GPIO_Init+0x228>
 8002962:	2303      	movs	r3, #3
 8002964:	e004      	b.n	8002970 <HAL_GPIO_Init+0x228>
 8002966:	2302      	movs	r3, #2
 8002968:	e002      	b.n	8002970 <HAL_GPIO_Init+0x228>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_GPIO_Init+0x228>
 800296e:	2300      	movs	r3, #0
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	f002 0203 	and.w	r2, r2, #3
 8002976:	0092      	lsls	r2, r2, #2
 8002978:	4093      	lsls	r3, r2
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002980:	4935      	ldr	r1, [pc, #212]	; (8002a58 <HAL_GPIO_Init+0x310>)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	3302      	adds	r3, #2
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_GPIO_Init+0x334>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029b2:	4a32      	ldr	r2, [pc, #200]	; (8002a7c <HAL_GPIO_Init+0x334>)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b8:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <HAL_GPIO_Init+0x334>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029dc:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <HAL_GPIO_Init+0x334>)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029e2:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <HAL_GPIO_Init+0x334>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a06:	4a1d      	ldr	r2, [pc, #116]	; (8002a7c <HAL_GPIO_Init+0x334>)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_GPIO_Init+0x334>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a30:	4a12      	ldr	r2, [pc, #72]	; (8002a7c <HAL_GPIO_Init+0x334>)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	61fb      	str	r3, [r7, #28]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	2b0f      	cmp	r3, #15
 8002a40:	f67f ae90 	bls.w	8002764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	3724      	adds	r7, #36	; 0x24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40013800 	.word	0x40013800
 8002a5c:	40020000 	.word	0x40020000
 8002a60:	40020400 	.word	0x40020400
 8002a64:	40020800 	.word	0x40020800
 8002a68:	40020c00 	.word	0x40020c00
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40021400 	.word	0x40021400
 8002a74:	40021800 	.word	0x40021800
 8002a78:	40021c00 	.word	0x40021c00
 8002a7c:	40013c00 	.word	0x40013c00

08002a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a90:	787b      	ldrb	r3, [r7, #1]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a96:	887a      	ldrh	r2, [r7, #2]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a9c:	e003      	b.n	8002aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a9e:	887b      	ldrh	r3, [r7, #2]
 8002aa0:	041a      	lsls	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	619a      	str	r2, [r3, #24]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e267      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d075      	beq.n	8002bbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ad2:	4b88      	ldr	r3, [pc, #544]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d00c      	beq.n	8002af8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ade:	4b85      	ldr	r3, [pc, #532]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d112      	bne.n	8002b10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aea:	4b82      	ldr	r3, [pc, #520]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002af6:	d10b      	bne.n	8002b10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	4b7e      	ldr	r3, [pc, #504]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d05b      	beq.n	8002bbc <HAL_RCC_OscConfig+0x108>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d157      	bne.n	8002bbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e242      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b18:	d106      	bne.n	8002b28 <HAL_RCC_OscConfig+0x74>
 8002b1a:	4b76      	ldr	r3, [pc, #472]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a75      	ldr	r2, [pc, #468]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e01d      	b.n	8002b64 <HAL_RCC_OscConfig+0xb0>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x98>
 8002b32:	4b70      	ldr	r3, [pc, #448]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a6f      	ldr	r2, [pc, #444]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	4b6d      	ldr	r3, [pc, #436]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a6c      	ldr	r2, [pc, #432]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e00b      	b.n	8002b64 <HAL_RCC_OscConfig+0xb0>
 8002b4c:	4b69      	ldr	r3, [pc, #420]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a68      	ldr	r2, [pc, #416]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	4b66      	ldr	r3, [pc, #408]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a65      	ldr	r2, [pc, #404]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d013      	beq.n	8002b94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7ff fcaa 	bl	80024c4 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b74:	f7ff fca6 	bl	80024c4 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e207      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b5b      	ldr	r3, [pc, #364]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0xc0>
 8002b92:	e014      	b.n	8002bbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7ff fc96 	bl	80024c4 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7ff fc92 	bl	80024c4 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e1f3      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bae:	4b51      	ldr	r3, [pc, #324]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0xe8>
 8002bba:	e000      	b.n	8002bbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d063      	beq.n	8002c92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bca:	4b4a      	ldr	r3, [pc, #296]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00b      	beq.n	8002bee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bd6:	4b47      	ldr	r3, [pc, #284]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d11c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002be2:	4b44      	ldr	r3, [pc, #272]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d116      	bne.n	8002c1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bee:	4b41      	ldr	r3, [pc, #260]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d005      	beq.n	8002c06 <HAL_RCC_OscConfig+0x152>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d001      	beq.n	8002c06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e1c7      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c06:	4b3b      	ldr	r3, [pc, #236]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4937      	ldr	r1, [pc, #220]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1a:	e03a      	b.n	8002c92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d020      	beq.n	8002c66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c24:	4b34      	ldr	r3, [pc, #208]	; (8002cf8 <HAL_RCC_OscConfig+0x244>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7ff fc4b 	bl	80024c4 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c32:	f7ff fc47 	bl	80024c4 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e1a8      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c44:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0f0      	beq.n	8002c32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c50:	4b28      	ldr	r3, [pc, #160]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4925      	ldr	r1, [pc, #148]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	600b      	str	r3, [r1, #0]
 8002c64:	e015      	b.n	8002c92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c66:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_RCC_OscConfig+0x244>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7ff fc2a 	bl	80024c4 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c74:	f7ff fc26 	bl	80024c4 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e187      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c86:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d036      	beq.n	8002d0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d016      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <HAL_RCC_OscConfig+0x248>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cac:	f7ff fc0a 	bl	80024c4 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb4:	f7ff fc06 	bl	80024c4 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e167      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x200>
 8002cd2:	e01b      	b.n	8002d0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_RCC_OscConfig+0x248>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cda:	f7ff fbf3 	bl	80024c4 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce0:	e00e      	b.n	8002d00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce2:	f7ff fbef 	bl	80024c4 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d907      	bls.n	8002d00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e150      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	42470000 	.word	0x42470000
 8002cfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d00:	4b88      	ldr	r3, [pc, #544]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1ea      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 8097 	beq.w	8002e48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1e:	4b81      	ldr	r3, [pc, #516]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10f      	bne.n	8002d4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	4b7d      	ldr	r3, [pc, #500]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	4a7c      	ldr	r2, [pc, #496]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d38:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3a:	4b7a      	ldr	r3, [pc, #488]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d46:	2301      	movs	r3, #1
 8002d48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4a:	4b77      	ldr	r3, [pc, #476]	; (8002f28 <HAL_RCC_OscConfig+0x474>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d118      	bne.n	8002d88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d56:	4b74      	ldr	r3, [pc, #464]	; (8002f28 <HAL_RCC_OscConfig+0x474>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a73      	ldr	r2, [pc, #460]	; (8002f28 <HAL_RCC_OscConfig+0x474>)
 8002d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d62:	f7ff fbaf 	bl	80024c4 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6a:	f7ff fbab 	bl	80024c4 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e10c      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7c:	4b6a      	ldr	r3, [pc, #424]	; (8002f28 <HAL_RCC_OscConfig+0x474>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_OscConfig+0x2ea>
 8002d90:	4b64      	ldr	r3, [pc, #400]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	4a63      	ldr	r2, [pc, #396]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9c:	e01c      	b.n	8002dd8 <HAL_RCC_OscConfig+0x324>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b05      	cmp	r3, #5
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x30c>
 8002da6:	4b5f      	ldr	r3, [pc, #380]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002daa:	4a5e      	ldr	r2, [pc, #376]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002dac:	f043 0304 	orr.w	r3, r3, #4
 8002db0:	6713      	str	r3, [r2, #112]	; 0x70
 8002db2:	4b5c      	ldr	r3, [pc, #368]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	4a5b      	ldr	r2, [pc, #364]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dbe:	e00b      	b.n	8002dd8 <HAL_RCC_OscConfig+0x324>
 8002dc0:	4b58      	ldr	r3, [pc, #352]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc4:	4a57      	ldr	r2, [pc, #348]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002dc6:	f023 0301 	bic.w	r3, r3, #1
 8002dca:	6713      	str	r3, [r2, #112]	; 0x70
 8002dcc:	4b55      	ldr	r3, [pc, #340]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd0:	4a54      	ldr	r2, [pc, #336]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	f023 0304 	bic.w	r3, r3, #4
 8002dd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d015      	beq.n	8002e0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7ff fb70 	bl	80024c4 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de8:	f7ff fb6c 	bl	80024c4 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e0cb      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfe:	4b49      	ldr	r3, [pc, #292]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0ee      	beq.n	8002de8 <HAL_RCC_OscConfig+0x334>
 8002e0a:	e014      	b.n	8002e36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0c:	f7ff fb5a 	bl	80024c4 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e14:	f7ff fb56 	bl	80024c4 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e0b5      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2a:	4b3e      	ldr	r3, [pc, #248]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1ee      	bne.n	8002e14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d105      	bne.n	8002e48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e3c:	4b39      	ldr	r3, [pc, #228]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	4a38      	ldr	r2, [pc, #224]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 80a1 	beq.w	8002f94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e52:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d05c      	beq.n	8002f18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d141      	bne.n	8002eea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e66:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <HAL_RCC_OscConfig+0x478>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7ff fb2a 	bl	80024c4 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e74:	f7ff fb26 	bl	80024c4 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e087      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e86:	4b27      	ldr	r3, [pc, #156]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69da      	ldr	r2, [r3, #28]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	019b      	lsls	r3, r3, #6
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	085b      	lsrs	r3, r3, #1
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	041b      	lsls	r3, r3, #16
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	061b      	lsls	r3, r3, #24
 8002eb6:	491b      	ldr	r1, [pc, #108]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <HAL_RCC_OscConfig+0x478>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec2:	f7ff faff 	bl	80024c4 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eca:	f7ff fafb 	bl	80024c4 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e05c      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x416>
 8002ee8:	e054      	b.n	8002f94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eea:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <HAL_RCC_OscConfig+0x478>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7ff fae8 	bl	80024c4 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7ff fae4 	bl	80024c4 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e045      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x444>
 8002f16:	e03d      	b.n	8002f94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d107      	bne.n	8002f30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e038      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40007000 	.word	0x40007000
 8002f2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f30:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <HAL_RCC_OscConfig+0x4ec>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d028      	beq.n	8002f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d121      	bne.n	8002f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d11a      	bne.n	8002f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f60:	4013      	ands	r3, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d111      	bne.n	8002f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	085b      	lsrs	r3, r3, #1
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800

08002fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0cc      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b68      	ldr	r3, [pc, #416]	; (800315c <HAL_RCC_ClockConfig+0x1b8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d90c      	bls.n	8002fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b65      	ldr	r3, [pc, #404]	; (800315c <HAL_RCC_ClockConfig+0x1b8>)
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fce:	4b63      	ldr	r3, [pc, #396]	; (800315c <HAL_RCC_ClockConfig+0x1b8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0b8      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d020      	beq.n	800302e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff8:	4b59      	ldr	r3, [pc, #356]	; (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4a58      	ldr	r2, [pc, #352]	; (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003002:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003010:	4b53      	ldr	r3, [pc, #332]	; (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4a52      	ldr	r2, [pc, #328]	; (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800301a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800301c:	4b50      	ldr	r3, [pc, #320]	; (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	494d      	ldr	r1, [pc, #308]	; (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	4313      	orrs	r3, r2
 800302c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d044      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d107      	bne.n	8003052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	4b47      	ldr	r3, [pc, #284]	; (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d119      	bne.n	8003082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e07f      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d003      	beq.n	8003062 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800305e:	2b03      	cmp	r3, #3
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003062:	4b3f      	ldr	r3, [pc, #252]	; (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d109      	bne.n	8003082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e06f      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003072:	4b3b      	ldr	r3, [pc, #236]	; (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e067      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003082:	4b37      	ldr	r3, [pc, #220]	; (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f023 0203 	bic.w	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	4934      	ldr	r1, [pc, #208]	; (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	4313      	orrs	r3, r2
 8003092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003094:	f7ff fa16 	bl	80024c4 <HAL_GetTick>
 8003098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309a:	e00a      	b.n	80030b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800309c:	f7ff fa12 	bl	80024c4 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e04f      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b2:	4b2b      	ldr	r3, [pc, #172]	; (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 020c 	and.w	r2, r3, #12
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d1eb      	bne.n	800309c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030c4:	4b25      	ldr	r3, [pc, #148]	; (800315c <HAL_RCC_ClockConfig+0x1b8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d20c      	bcs.n	80030ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d2:	4b22      	ldr	r3, [pc, #136]	; (800315c <HAL_RCC_ClockConfig+0x1b8>)
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030da:	4b20      	ldr	r3, [pc, #128]	; (800315c <HAL_RCC_ClockConfig+0x1b8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e032      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f8:	4b19      	ldr	r3, [pc, #100]	; (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4916      	ldr	r1, [pc, #88]	; (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d009      	beq.n	800312a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003116:	4b12      	ldr	r3, [pc, #72]	; (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	490e      	ldr	r1, [pc, #56]	; (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800312a:	f000 f821 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 800312e:	4602      	mov	r2, r0
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	490a      	ldr	r1, [pc, #40]	; (8003164 <HAL_RCC_ClockConfig+0x1c0>)
 800313c:	5ccb      	ldrb	r3, [r1, r3]
 800313e:	fa22 f303 	lsr.w	r3, r2, r3
 8003142:	4a09      	ldr	r2, [pc, #36]	; (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003146:	4b09      	ldr	r3, [pc, #36]	; (800316c <HAL_RCC_ClockConfig+0x1c8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff f976 	bl	800243c <HAL_InitTick>

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40023c00 	.word	0x40023c00
 8003160:	40023800 	.word	0x40023800
 8003164:	08008c08 	.word	0x08008c08
 8003168:	20000004 	.word	0x20000004
 800316c:	20000008 	.word	0x20000008

08003170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003174:	b094      	sub	sp, #80	; 0x50
 8003176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	647b      	str	r3, [r7, #68]	; 0x44
 800317c:	2300      	movs	r3, #0
 800317e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003180:	2300      	movs	r3, #0
 8003182:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003188:	4b79      	ldr	r3, [pc, #484]	; (8003370 <HAL_RCC_GetSysClockFreq+0x200>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 030c 	and.w	r3, r3, #12
 8003190:	2b08      	cmp	r3, #8
 8003192:	d00d      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003194:	2b08      	cmp	r3, #8
 8003196:	f200 80e1 	bhi.w	800335c <HAL_RCC_GetSysClockFreq+0x1ec>
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_RCC_GetSysClockFreq+0x34>
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d003      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x3a>
 80031a2:	e0db      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031a4:	4b73      	ldr	r3, [pc, #460]	; (8003374 <HAL_RCC_GetSysClockFreq+0x204>)
 80031a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031a8:	e0db      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031aa:	4b73      	ldr	r3, [pc, #460]	; (8003378 <HAL_RCC_GetSysClockFreq+0x208>)
 80031ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031ae:	e0d8      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031b0:	4b6f      	ldr	r3, [pc, #444]	; (8003370 <HAL_RCC_GetSysClockFreq+0x200>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ba:	4b6d      	ldr	r3, [pc, #436]	; (8003370 <HAL_RCC_GetSysClockFreq+0x200>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d063      	beq.n	800328e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c6:	4b6a      	ldr	r3, [pc, #424]	; (8003370 <HAL_RCC_GetSysClockFreq+0x200>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	099b      	lsrs	r3, r3, #6
 80031cc:	2200      	movs	r2, #0
 80031ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80031d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d8:	633b      	str	r3, [r7, #48]	; 0x30
 80031da:	2300      	movs	r3, #0
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
 80031de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031e2:	4622      	mov	r2, r4
 80031e4:	462b      	mov	r3, r5
 80031e6:	f04f 0000 	mov.w	r0, #0
 80031ea:	f04f 0100 	mov.w	r1, #0
 80031ee:	0159      	lsls	r1, r3, #5
 80031f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f4:	0150      	lsls	r0, r2, #5
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4621      	mov	r1, r4
 80031fc:	1a51      	subs	r1, r2, r1
 80031fe:	6139      	str	r1, [r7, #16]
 8003200:	4629      	mov	r1, r5
 8003202:	eb63 0301 	sbc.w	r3, r3, r1
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003214:	4659      	mov	r1, fp
 8003216:	018b      	lsls	r3, r1, #6
 8003218:	4651      	mov	r1, sl
 800321a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800321e:	4651      	mov	r1, sl
 8003220:	018a      	lsls	r2, r1, #6
 8003222:	4651      	mov	r1, sl
 8003224:	ebb2 0801 	subs.w	r8, r2, r1
 8003228:	4659      	mov	r1, fp
 800322a:	eb63 0901 	sbc.w	r9, r3, r1
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800323a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800323e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003242:	4690      	mov	r8, r2
 8003244:	4699      	mov	r9, r3
 8003246:	4623      	mov	r3, r4
 8003248:	eb18 0303 	adds.w	r3, r8, r3
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	462b      	mov	r3, r5
 8003250:	eb49 0303 	adc.w	r3, r9, r3
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003262:	4629      	mov	r1, r5
 8003264:	024b      	lsls	r3, r1, #9
 8003266:	4621      	mov	r1, r4
 8003268:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800326c:	4621      	mov	r1, r4
 800326e:	024a      	lsls	r2, r1, #9
 8003270:	4610      	mov	r0, r2
 8003272:	4619      	mov	r1, r3
 8003274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003276:	2200      	movs	r2, #0
 8003278:	62bb      	str	r3, [r7, #40]	; 0x28
 800327a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800327c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003280:	f7fd f90c 	bl	800049c <__aeabi_uldivmod>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4613      	mov	r3, r2
 800328a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800328c:	e058      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800328e:	4b38      	ldr	r3, [pc, #224]	; (8003370 <HAL_RCC_GetSysClockFreq+0x200>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	099b      	lsrs	r3, r3, #6
 8003294:	2200      	movs	r2, #0
 8003296:	4618      	mov	r0, r3
 8003298:	4611      	mov	r1, r2
 800329a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800329e:	623b      	str	r3, [r7, #32]
 80032a0:	2300      	movs	r3, #0
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
 80032a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032a8:	4642      	mov	r2, r8
 80032aa:	464b      	mov	r3, r9
 80032ac:	f04f 0000 	mov.w	r0, #0
 80032b0:	f04f 0100 	mov.w	r1, #0
 80032b4:	0159      	lsls	r1, r3, #5
 80032b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032ba:	0150      	lsls	r0, r2, #5
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4641      	mov	r1, r8
 80032c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80032c6:	4649      	mov	r1, r9
 80032c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032e0:	ebb2 040a 	subs.w	r4, r2, sl
 80032e4:	eb63 050b 	sbc.w	r5, r3, fp
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	00eb      	lsls	r3, r5, #3
 80032f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032f6:	00e2      	lsls	r2, r4, #3
 80032f8:	4614      	mov	r4, r2
 80032fa:	461d      	mov	r5, r3
 80032fc:	4643      	mov	r3, r8
 80032fe:	18e3      	adds	r3, r4, r3
 8003300:	603b      	str	r3, [r7, #0]
 8003302:	464b      	mov	r3, r9
 8003304:	eb45 0303 	adc.w	r3, r5, r3
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003316:	4629      	mov	r1, r5
 8003318:	028b      	lsls	r3, r1, #10
 800331a:	4621      	mov	r1, r4
 800331c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003320:	4621      	mov	r1, r4
 8003322:	028a      	lsls	r2, r1, #10
 8003324:	4610      	mov	r0, r2
 8003326:	4619      	mov	r1, r3
 8003328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800332a:	2200      	movs	r2, #0
 800332c:	61bb      	str	r3, [r7, #24]
 800332e:	61fa      	str	r2, [r7, #28]
 8003330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003334:	f7fd f8b2 	bl	800049c <__aeabi_uldivmod>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4613      	mov	r3, r2
 800333e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_RCC_GetSysClockFreq+0x200>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	0c1b      	lsrs	r3, r3, #16
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	3301      	adds	r3, #1
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003350:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800335a:	e002      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_RCC_GetSysClockFreq+0x204>)
 800335e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003364:	4618      	mov	r0, r3
 8003366:	3750      	adds	r7, #80	; 0x50
 8003368:	46bd      	mov	sp, r7
 800336a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800
 8003374:	00f42400 	.word	0x00f42400
 8003378:	007a1200 	.word	0x007a1200

0800337c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003380:	4b03      	ldr	r3, [pc, #12]	; (8003390 <HAL_RCC_GetHCLKFreq+0x14>)
 8003382:	681b      	ldr	r3, [r3, #0]
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	20000004 	.word	0x20000004

08003394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003398:	f7ff fff0 	bl	800337c <HAL_RCC_GetHCLKFreq>
 800339c:	4602      	mov	r2, r0
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	0a9b      	lsrs	r3, r3, #10
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4903      	ldr	r1, [pc, #12]	; (80033b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033aa:	5ccb      	ldrb	r3, [r1, r3]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40023800 	.word	0x40023800
 80033b8:	08008c18 	.word	0x08008c18

080033bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033c0:	f7ff ffdc 	bl	800337c <HAL_RCC_GetHCLKFreq>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	0b5b      	lsrs	r3, r3, #13
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4903      	ldr	r1, [pc, #12]	; (80033e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d2:	5ccb      	ldrb	r3, [r1, r3]
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40023800 	.word	0x40023800
 80033e0:	08008c18 	.word	0x08008c18

080033e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e07b      	b.n	80034ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d108      	bne.n	8003410 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003406:	d009      	beq.n	800341c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	61da      	str	r2, [r3, #28]
 800340e:	e005      	b.n	800341c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fe fe82 	bl	8002140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003452:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a0:	ea42 0103 	orr.w	r1, r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	f003 0104 	and.w	r1, r3, #4
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	f003 0210 	and.w	r2, r3, #16
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69da      	ldr	r2, [r3, #28]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b088      	sub	sp, #32
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_SPI_Transmit+0x22>
 8003514:	2302      	movs	r3, #2
 8003516:	e126      	b.n	8003766 <HAL_SPI_Transmit+0x270>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003520:	f7fe ffd0 	bl	80024c4 <HAL_GetTick>
 8003524:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b01      	cmp	r3, #1
 8003534:	d002      	beq.n	800353c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003536:	2302      	movs	r3, #2
 8003538:	77fb      	strb	r3, [r7, #31]
    goto error;
 800353a:	e10b      	b.n	8003754 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_SPI_Transmit+0x52>
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d102      	bne.n	800354e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800354c:	e102      	b.n	8003754 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2203      	movs	r2, #3
 8003552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	88fa      	ldrh	r2, [r7, #6]
 8003566:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	88fa      	ldrh	r2, [r7, #6]
 800356c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003594:	d10f      	bne.n	80035b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b40      	cmp	r3, #64	; 0x40
 80035c2:	d007      	beq.n	80035d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035dc:	d14b      	bne.n	8003676 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_SPI_Transmit+0xf6>
 80035e6:	8afb      	ldrh	r3, [r7, #22]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d13e      	bne.n	800366a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	881a      	ldrh	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	1c9a      	adds	r2, r3, #2
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003610:	e02b      	b.n	800366a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b02      	cmp	r3, #2
 800361e:	d112      	bne.n	8003646 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	881a      	ldrh	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	1c9a      	adds	r2, r3, #2
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	86da      	strh	r2, [r3, #54]	; 0x36
 8003644:	e011      	b.n	800366a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003646:	f7fe ff3d 	bl	80024c4 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d803      	bhi.n	800365e <HAL_SPI_Transmit+0x168>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800365c:	d102      	bne.n	8003664 <HAL_SPI_Transmit+0x16e>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d102      	bne.n	800366a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003668:	e074      	b.n	8003754 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1ce      	bne.n	8003612 <HAL_SPI_Transmit+0x11c>
 8003674:	e04c      	b.n	8003710 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_SPI_Transmit+0x18e>
 800367e:	8afb      	ldrh	r3, [r7, #22]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d140      	bne.n	8003706 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	330c      	adds	r3, #12
 800368e:	7812      	ldrb	r2, [r2, #0]
 8003690:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036aa:	e02c      	b.n	8003706 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d113      	bne.n	80036e2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	330c      	adds	r3, #12
 80036c4:	7812      	ldrb	r2, [r2, #0]
 80036c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	86da      	strh	r2, [r3, #54]	; 0x36
 80036e0:	e011      	b.n	8003706 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036e2:	f7fe feef 	bl	80024c4 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d803      	bhi.n	80036fa <HAL_SPI_Transmit+0x204>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036f8:	d102      	bne.n	8003700 <HAL_SPI_Transmit+0x20a>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d102      	bne.n	8003706 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003704:	e026      	b.n	8003754 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1cd      	bne.n	80036ac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	6839      	ldr	r1, [r7, #0]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 fa55 	bl	8003bc4 <SPI_EndRxTxTransaction>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10a      	bne.n	8003744 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	77fb      	strb	r3, [r7, #31]
 8003750:	e000      	b.n	8003754 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003752:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003764:	7ffb      	ldrb	r3, [r7, #31]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3720      	adds	r7, #32
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b08c      	sub	sp, #48	; 0x30
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800377c:	2301      	movs	r3, #1
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_SPI_TransmitReceive+0x26>
 8003790:	2302      	movs	r3, #2
 8003792:	e18a      	b.n	8003aaa <HAL_SPI_TransmitReceive+0x33c>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800379c:	f7fe fe92 	bl	80024c4 <HAL_GetTick>
 80037a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80037b2:	887b      	ldrh	r3, [r7, #2]
 80037b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d00f      	beq.n	80037de <HAL_SPI_TransmitReceive+0x70>
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037c4:	d107      	bne.n	80037d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d103      	bne.n	80037d6 <HAL_SPI_TransmitReceive+0x68>
 80037ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d003      	beq.n	80037de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037d6:	2302      	movs	r3, #2
 80037d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037dc:	e15b      	b.n	8003a96 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_SPI_TransmitReceive+0x82>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_SPI_TransmitReceive+0x82>
 80037ea:	887b      	ldrh	r3, [r7, #2]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d103      	bne.n	80037f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037f6:	e14e      	b.n	8003a96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b04      	cmp	r3, #4
 8003802:	d003      	beq.n	800380c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2205      	movs	r2, #5
 8003808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	887a      	ldrh	r2, [r7, #2]
 800381c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	887a      	ldrh	r2, [r7, #2]
 8003822:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	887a      	ldrh	r2, [r7, #2]
 800382e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	887a      	ldrh	r2, [r7, #2]
 8003834:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	d007      	beq.n	8003860 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800385e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003868:	d178      	bne.n	800395c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <HAL_SPI_TransmitReceive+0x10a>
 8003872:	8b7b      	ldrh	r3, [r7, #26]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d166      	bne.n	8003946 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	881a      	ldrh	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	1c9a      	adds	r2, r3, #2
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800389c:	e053      	b.n	8003946 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d11b      	bne.n	80038e4 <HAL_SPI_TransmitReceive+0x176>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d016      	beq.n	80038e4 <HAL_SPI_TransmitReceive+0x176>
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d113      	bne.n	80038e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	881a      	ldrh	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	1c9a      	adds	r2, r3, #2
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d119      	bne.n	8003926 <HAL_SPI_TransmitReceive+0x1b8>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d014      	beq.n	8003926 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	b292      	uxth	r2, r2
 8003908:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	1c9a      	adds	r2, r3, #2
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003922:	2301      	movs	r3, #1
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003926:	f7fe fdcd 	bl	80024c4 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003932:	429a      	cmp	r2, r3
 8003934:	d807      	bhi.n	8003946 <HAL_SPI_TransmitReceive+0x1d8>
 8003936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800393c:	d003      	beq.n	8003946 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003944:	e0a7      	b.n	8003a96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1a6      	bne.n	800389e <HAL_SPI_TransmitReceive+0x130>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1a1      	bne.n	800389e <HAL_SPI_TransmitReceive+0x130>
 800395a:	e07c      	b.n	8003a56 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <HAL_SPI_TransmitReceive+0x1fc>
 8003964:	8b7b      	ldrh	r3, [r7, #26]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d16b      	bne.n	8003a42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	330c      	adds	r3, #12
 8003974:	7812      	ldrb	r2, [r2, #0]
 8003976:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003990:	e057      	b.n	8003a42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b02      	cmp	r3, #2
 800399e:	d11c      	bne.n	80039da <HAL_SPI_TransmitReceive+0x26c>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d017      	beq.n	80039da <HAL_SPI_TransmitReceive+0x26c>
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d114      	bne.n	80039da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	330c      	adds	r3, #12
 80039ba:	7812      	ldrb	r2, [r2, #0]
 80039bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d119      	bne.n	8003a1c <HAL_SPI_TransmitReceive+0x2ae>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d014      	beq.n	8003a1c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a1c:	f7fe fd52 	bl	80024c4 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d803      	bhi.n	8003a34 <HAL_SPI_TransmitReceive+0x2c6>
 8003a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a32:	d102      	bne.n	8003a3a <HAL_SPI_TransmitReceive+0x2cc>
 8003a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d103      	bne.n	8003a42 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a40:	e029      	b.n	8003a96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1a2      	bne.n	8003992 <HAL_SPI_TransmitReceive+0x224>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d19d      	bne.n	8003992 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f8b2 	bl	8003bc4 <SPI_EndRxTxTransaction>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d006      	beq.n	8003a74 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a72:	e010      	b.n	8003a96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10b      	bne.n	8003a94 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	e000      	b.n	8003a96 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003aa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3730      	adds	r7, #48	; 0x30
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ac4:	f7fe fcfe 	bl	80024c4 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ad4:	f7fe fcf6 	bl	80024c4 <HAL_GetTick>
 8003ad8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ada:	4b39      	ldr	r3, [pc, #228]	; (8003bc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	015b      	lsls	r3, r3, #5
 8003ae0:	0d1b      	lsrs	r3, r3, #20
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	fb02 f303 	mul.w	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aea:	e054      	b.n	8003b96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af2:	d050      	beq.n	8003b96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003af4:	f7fe fce6 	bl	80024c4 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d902      	bls.n	8003b0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d13d      	bne.n	8003b86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b22:	d111      	bne.n	8003b48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b2c:	d004      	beq.n	8003b38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b36:	d107      	bne.n	8003b48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b50:	d10f      	bne.n	8003b72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e017      	b.n	8003bb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	bf0c      	ite	eq
 8003ba6:	2301      	moveq	r3, #1
 8003ba8:	2300      	movne	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d19b      	bne.n	8003aec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3720      	adds	r7, #32
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000004 	.word	0x20000004

08003bc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af02      	add	r7, sp, #8
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bd0:	4b1b      	ldr	r3, [pc, #108]	; (8003c40 <SPI_EndRxTxTransaction+0x7c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a1b      	ldr	r2, [pc, #108]	; (8003c44 <SPI_EndRxTxTransaction+0x80>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	0d5b      	lsrs	r3, r3, #21
 8003bdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003be0:	fb02 f303 	mul.w	r3, r2, r3
 8003be4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bee:	d112      	bne.n	8003c16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f7ff ff5a 	bl	8003ab4 <SPI_WaitFlagStateUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d016      	beq.n	8003c34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	f043 0220 	orr.w	r2, r3, #32
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e00f      	b.n	8003c36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2c:	2b80      	cmp	r3, #128	; 0x80
 8003c2e:	d0f2      	beq.n	8003c16 <SPI_EndRxTxTransaction+0x52>
 8003c30:	e000      	b.n	8003c34 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c32:	bf00      	nop
  }

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000004 	.word	0x20000004
 8003c44:	165e9f81 	.word	0x165e9f81

08003c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e041      	b.n	8003cde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fe faae 	bl	80021d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f000 fa2e 	bl	80040e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d122      	bne.n	8003d42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d11b      	bne.n	8003d42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f06f 0202 	mvn.w	r2, #2
 8003d12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f9bf 	bl	80040ac <HAL_TIM_IC_CaptureCallback>
 8003d2e:	e005      	b.n	8003d3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f9b1 	bl	8004098 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f9c2 	bl	80040c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d122      	bne.n	8003d96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d11b      	bne.n	8003d96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f06f 0204 	mvn.w	r2, #4
 8003d66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f995 	bl	80040ac <HAL_TIM_IC_CaptureCallback>
 8003d82:	e005      	b.n	8003d90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f987 	bl	8004098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f998 	bl	80040c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d122      	bne.n	8003dea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d11b      	bne.n	8003dea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f06f 0208 	mvn.w	r2, #8
 8003dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f96b 	bl	80040ac <HAL_TIM_IC_CaptureCallback>
 8003dd6:	e005      	b.n	8003de4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f95d 	bl	8004098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f96e 	bl	80040c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b10      	cmp	r3, #16
 8003df6:	d122      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b10      	cmp	r3, #16
 8003e04:	d11b      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f06f 0210 	mvn.w	r2, #16
 8003e0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2208      	movs	r2, #8
 8003e14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f941 	bl	80040ac <HAL_TIM_IC_CaptureCallback>
 8003e2a:	e005      	b.n	8003e38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f933 	bl	8004098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f944 	bl	80040c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d10e      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d107      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f06f 0201 	mvn.w	r2, #1
 8003e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f90d 	bl	8004084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e74:	2b80      	cmp	r3, #128	; 0x80
 8003e76:	d10e      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b80      	cmp	r3, #128	; 0x80
 8003e84:	d107      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fae9 	bl	8004468 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea0:	2b40      	cmp	r3, #64	; 0x40
 8003ea2:	d10e      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eae:	2b40      	cmp	r3, #64	; 0x40
 8003eb0:	d107      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f909 	bl	80040d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d10e      	bne.n	8003eee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d107      	bne.n	8003eee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f06f 0220 	mvn.w	r2, #32
 8003ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fab3 	bl	8004454 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b084      	sub	sp, #16
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d101      	bne.n	8003f12 <HAL_TIM_ConfigClockSource+0x1c>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	e0b4      	b.n	800407c <HAL_TIM_ConfigClockSource+0x186>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f30:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f38:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f4a:	d03e      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0xd4>
 8003f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f50:	f200 8087 	bhi.w	8004062 <HAL_TIM_ConfigClockSource+0x16c>
 8003f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f58:	f000 8086 	beq.w	8004068 <HAL_TIM_ConfigClockSource+0x172>
 8003f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f60:	d87f      	bhi.n	8004062 <HAL_TIM_ConfigClockSource+0x16c>
 8003f62:	2b70      	cmp	r3, #112	; 0x70
 8003f64:	d01a      	beq.n	8003f9c <HAL_TIM_ConfigClockSource+0xa6>
 8003f66:	2b70      	cmp	r3, #112	; 0x70
 8003f68:	d87b      	bhi.n	8004062 <HAL_TIM_ConfigClockSource+0x16c>
 8003f6a:	2b60      	cmp	r3, #96	; 0x60
 8003f6c:	d050      	beq.n	8004010 <HAL_TIM_ConfigClockSource+0x11a>
 8003f6e:	2b60      	cmp	r3, #96	; 0x60
 8003f70:	d877      	bhi.n	8004062 <HAL_TIM_ConfigClockSource+0x16c>
 8003f72:	2b50      	cmp	r3, #80	; 0x50
 8003f74:	d03c      	beq.n	8003ff0 <HAL_TIM_ConfigClockSource+0xfa>
 8003f76:	2b50      	cmp	r3, #80	; 0x50
 8003f78:	d873      	bhi.n	8004062 <HAL_TIM_ConfigClockSource+0x16c>
 8003f7a:	2b40      	cmp	r3, #64	; 0x40
 8003f7c:	d058      	beq.n	8004030 <HAL_TIM_ConfigClockSource+0x13a>
 8003f7e:	2b40      	cmp	r3, #64	; 0x40
 8003f80:	d86f      	bhi.n	8004062 <HAL_TIM_ConfigClockSource+0x16c>
 8003f82:	2b30      	cmp	r3, #48	; 0x30
 8003f84:	d064      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0x15a>
 8003f86:	2b30      	cmp	r3, #48	; 0x30
 8003f88:	d86b      	bhi.n	8004062 <HAL_TIM_ConfigClockSource+0x16c>
 8003f8a:	2b20      	cmp	r3, #32
 8003f8c:	d060      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0x15a>
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d867      	bhi.n	8004062 <HAL_TIM_ConfigClockSource+0x16c>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d05c      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0x15a>
 8003f96:	2b10      	cmp	r3, #16
 8003f98:	d05a      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0x15a>
 8003f9a:	e062      	b.n	8004062 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	6899      	ldr	r1, [r3, #8]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f000 f9b6 	bl	800431c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fbe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	609a      	str	r2, [r3, #8]
      break;
 8003fc8:	e04f      	b.n	800406a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6899      	ldr	r1, [r3, #8]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f000 f99f 	bl	800431c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fec:	609a      	str	r2, [r3, #8]
      break;
 8003fee:	e03c      	b.n	800406a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f000 f913 	bl	8004228 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2150      	movs	r1, #80	; 0x50
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f96c 	bl	80042e6 <TIM_ITRx_SetConfig>
      break;
 800400e:	e02c      	b.n	800406a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	461a      	mov	r2, r3
 800401e:	f000 f932 	bl	8004286 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2160      	movs	r1, #96	; 0x60
 8004028:	4618      	mov	r0, r3
 800402a:	f000 f95c 	bl	80042e6 <TIM_ITRx_SetConfig>
      break;
 800402e:	e01c      	b.n	800406a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	461a      	mov	r2, r3
 800403e:	f000 f8f3 	bl	8004228 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2140      	movs	r1, #64	; 0x40
 8004048:	4618      	mov	r0, r3
 800404a:	f000 f94c 	bl	80042e6 <TIM_ITRx_SetConfig>
      break;
 800404e:	e00c      	b.n	800406a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4619      	mov	r1, r3
 800405a:	4610      	mov	r0, r2
 800405c:	f000 f943 	bl	80042e6 <TIM_ITRx_SetConfig>
      break;
 8004060:	e003      	b.n	800406a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
      break;
 8004066:	e000      	b.n	800406a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004068:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800407a:	7bfb      	ldrb	r3, [r7, #15]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a40      	ldr	r2, [pc, #256]	; (80041fc <TIM_Base_SetConfig+0x114>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d013      	beq.n	8004128 <TIM_Base_SetConfig+0x40>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004106:	d00f      	beq.n	8004128 <TIM_Base_SetConfig+0x40>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a3d      	ldr	r2, [pc, #244]	; (8004200 <TIM_Base_SetConfig+0x118>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00b      	beq.n	8004128 <TIM_Base_SetConfig+0x40>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a3c      	ldr	r2, [pc, #240]	; (8004204 <TIM_Base_SetConfig+0x11c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d007      	beq.n	8004128 <TIM_Base_SetConfig+0x40>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a3b      	ldr	r2, [pc, #236]	; (8004208 <TIM_Base_SetConfig+0x120>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d003      	beq.n	8004128 <TIM_Base_SetConfig+0x40>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a3a      	ldr	r2, [pc, #232]	; (800420c <TIM_Base_SetConfig+0x124>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d108      	bne.n	800413a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a2f      	ldr	r2, [pc, #188]	; (80041fc <TIM_Base_SetConfig+0x114>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d02b      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004148:	d027      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a2c      	ldr	r2, [pc, #176]	; (8004200 <TIM_Base_SetConfig+0x118>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d023      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a2b      	ldr	r2, [pc, #172]	; (8004204 <TIM_Base_SetConfig+0x11c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01f      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a2a      	ldr	r2, [pc, #168]	; (8004208 <TIM_Base_SetConfig+0x120>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d01b      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a29      	ldr	r2, [pc, #164]	; (800420c <TIM_Base_SetConfig+0x124>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d017      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a28      	ldr	r2, [pc, #160]	; (8004210 <TIM_Base_SetConfig+0x128>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d013      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a27      	ldr	r2, [pc, #156]	; (8004214 <TIM_Base_SetConfig+0x12c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00f      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a26      	ldr	r2, [pc, #152]	; (8004218 <TIM_Base_SetConfig+0x130>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00b      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a25      	ldr	r2, [pc, #148]	; (800421c <TIM_Base_SetConfig+0x134>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d007      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a24      	ldr	r2, [pc, #144]	; (8004220 <TIM_Base_SetConfig+0x138>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d003      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a23      	ldr	r2, [pc, #140]	; (8004224 <TIM_Base_SetConfig+0x13c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d108      	bne.n	80041ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <TIM_Base_SetConfig+0x114>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d003      	beq.n	80041e0 <TIM_Base_SetConfig+0xf8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a0c      	ldr	r2, [pc, #48]	; (800420c <TIM_Base_SetConfig+0x124>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d103      	bne.n	80041e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	615a      	str	r2, [r3, #20]
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40010000 	.word	0x40010000
 8004200:	40000400 	.word	0x40000400
 8004204:	40000800 	.word	0x40000800
 8004208:	40000c00 	.word	0x40000c00
 800420c:	40010400 	.word	0x40010400
 8004210:	40014000 	.word	0x40014000
 8004214:	40014400 	.word	0x40014400
 8004218:	40014800 	.word	0x40014800
 800421c:	40001800 	.word	0x40001800
 8004220:	40001c00 	.word	0x40001c00
 8004224:	40002000 	.word	0x40002000

08004228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f023 0201 	bic.w	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f023 030a 	bic.w	r3, r3, #10
 8004264:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4313      	orrs	r3, r2
 800426c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004286:	b480      	push	{r7}
 8004288:	b087      	sub	sp, #28
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	f023 0210 	bic.w	r2, r3, #16
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	031b      	lsls	r3, r3, #12
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	621a      	str	r2, [r3, #32]
}
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b085      	sub	sp, #20
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	f043 0307 	orr.w	r3, r3, #7
 8004308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	609a      	str	r2, [r3, #8]
}
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	021a      	lsls	r2, r3, #8
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	431a      	orrs	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4313      	orrs	r3, r2
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	609a      	str	r2, [r3, #8]
}
 8004350:	bf00      	nop
 8004352:	371c      	adds	r7, #28
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004370:	2302      	movs	r3, #2
 8004372:	e05a      	b.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a21      	ldr	r2, [pc, #132]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d022      	beq.n	80043fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c0:	d01d      	beq.n	80043fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a1d      	ldr	r2, [pc, #116]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d018      	beq.n	80043fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a1b      	ldr	r2, [pc, #108]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a1a      	ldr	r2, [pc, #104]	; (8004444 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d00e      	beq.n	80043fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a18      	ldr	r2, [pc, #96]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d009      	beq.n	80043fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a17      	ldr	r2, [pc, #92]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d004      	beq.n	80043fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a15      	ldr	r2, [pc, #84]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d10c      	bne.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004404:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	4313      	orrs	r3, r2
 800440e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40010000 	.word	0x40010000
 800443c:	40000400 	.word	0x40000400
 8004440:	40000800 	.word	0x40000800
 8004444:	40000c00 	.word	0x40000c00
 8004448:	40010400 	.word	0x40010400
 800444c:	40014000 	.word	0x40014000
 8004450:	40001800 	.word	0x40001800

08004454 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e03f      	b.n	800450e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fd feba 	bl	800221c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2224      	movs	r2, #36	; 0x24
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f929 	bl	8004718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695a      	ldr	r2, [r3, #20]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b08a      	sub	sp, #40	; 0x28
 800451a:	af02      	add	r7, sp, #8
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	603b      	str	r3, [r7, #0]
 8004522:	4613      	mov	r3, r2
 8004524:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b20      	cmp	r3, #32
 8004534:	d17c      	bne.n	8004630 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <HAL_UART_Transmit+0x2c>
 800453c:	88fb      	ldrh	r3, [r7, #6]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e075      	b.n	8004632 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_UART_Transmit+0x3e>
 8004550:	2302      	movs	r3, #2
 8004552:	e06e      	b.n	8004632 <HAL_UART_Transmit+0x11c>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2221      	movs	r2, #33	; 0x21
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800456a:	f7fd ffab 	bl	80024c4 <HAL_GetTick>
 800456e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	88fa      	ldrh	r2, [r7, #6]
 8004574:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	88fa      	ldrh	r2, [r7, #6]
 800457a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004584:	d108      	bne.n	8004598 <HAL_UART_Transmit+0x82>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d104      	bne.n	8004598 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800458e:	2300      	movs	r3, #0
 8004590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	e003      	b.n	80045a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800459c:	2300      	movs	r3, #0
 800459e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045a8:	e02a      	b.n	8004600 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2200      	movs	r2, #0
 80045b2:	2180      	movs	r1, #128	; 0x80
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f840 	bl	800463a <UART_WaitOnFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e036      	b.n	8004632 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10b      	bne.n	80045e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	3302      	adds	r3, #2
 80045de:	61bb      	str	r3, [r7, #24]
 80045e0:	e007      	b.n	80045f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	781a      	ldrb	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	3301      	adds	r3, #1
 80045f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1cf      	bne.n	80045aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2200      	movs	r2, #0
 8004612:	2140      	movs	r1, #64	; 0x40
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f810 	bl	800463a <UART_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e006      	b.n	8004632 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	e000      	b.n	8004632 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004630:	2302      	movs	r3, #2
  }
}
 8004632:	4618      	mov	r0, r3
 8004634:	3720      	adds	r7, #32
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b090      	sub	sp, #64	; 0x40
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	603b      	str	r3, [r7, #0]
 8004646:	4613      	mov	r3, r2
 8004648:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800464a:	e050      	b.n	80046ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800464e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004652:	d04c      	beq.n	80046ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <UART_WaitOnFlagUntilTimeout+0x30>
 800465a:	f7fd ff33 	bl	80024c4 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004666:	429a      	cmp	r2, r3
 8004668:	d241      	bcs.n	80046ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	330c      	adds	r3, #12
 8004670:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004674:	e853 3f00 	ldrex	r3, [r3]
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	330c      	adds	r3, #12
 8004688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800468a:	637a      	str	r2, [r7, #52]	; 0x34
 800468c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004692:	e841 2300 	strex	r3, r2, [r1]
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1e5      	bne.n	800466a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3314      	adds	r3, #20
 80046a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	e853 3f00 	ldrex	r3, [r3]
 80046ac:	613b      	str	r3, [r7, #16]
   return(result);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3314      	adds	r3, #20
 80046bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046be:	623a      	str	r2, [r7, #32]
 80046c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	69f9      	ldr	r1, [r7, #28]
 80046c4:	6a3a      	ldr	r2, [r7, #32]
 80046c6:	e841 2300 	strex	r3, r2, [r1]
 80046ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1e5      	bne.n	800469e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e00f      	b.n	800470e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4013      	ands	r3, r2
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	bf0c      	ite	eq
 80046fe:	2301      	moveq	r3, #1
 8004700:	2300      	movne	r3, #0
 8004702:	b2db      	uxtb	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	429a      	cmp	r2, r3
 800470a:	d09f      	beq.n	800464c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3740      	adds	r7, #64	; 0x40
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800471c:	b0c0      	sub	sp, #256	; 0x100
 800471e:	af00      	add	r7, sp, #0
 8004720:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	68d9      	ldr	r1, [r3, #12]
 8004736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	ea40 0301 	orr.w	r3, r0, r1
 8004740:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	431a      	orrs	r2, r3
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	431a      	orrs	r2, r3
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004770:	f021 010c 	bic.w	r1, r1, #12
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800477e:	430b      	orrs	r3, r1
 8004780:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004792:	6999      	ldr	r1, [r3, #24]
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	ea40 0301 	orr.w	r3, r0, r1
 800479e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	4b8f      	ldr	r3, [pc, #572]	; (80049e4 <UART_SetConfig+0x2cc>)
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d005      	beq.n	80047b8 <UART_SetConfig+0xa0>
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	4b8d      	ldr	r3, [pc, #564]	; (80049e8 <UART_SetConfig+0x2d0>)
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d104      	bne.n	80047c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047b8:	f7fe fe00 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 80047bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047c0:	e003      	b.n	80047ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047c2:	f7fe fde7 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 80047c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d4:	f040 810c 	bne.w	80049f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047dc:	2200      	movs	r2, #0
 80047de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047ea:	4622      	mov	r2, r4
 80047ec:	462b      	mov	r3, r5
 80047ee:	1891      	adds	r1, r2, r2
 80047f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80047f2:	415b      	adcs	r3, r3
 80047f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047fa:	4621      	mov	r1, r4
 80047fc:	eb12 0801 	adds.w	r8, r2, r1
 8004800:	4629      	mov	r1, r5
 8004802:	eb43 0901 	adc.w	r9, r3, r1
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800481a:	4690      	mov	r8, r2
 800481c:	4699      	mov	r9, r3
 800481e:	4623      	mov	r3, r4
 8004820:	eb18 0303 	adds.w	r3, r8, r3
 8004824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004828:	462b      	mov	r3, r5
 800482a:	eb49 0303 	adc.w	r3, r9, r3
 800482e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800483e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004842:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004846:	460b      	mov	r3, r1
 8004848:	18db      	adds	r3, r3, r3
 800484a:	653b      	str	r3, [r7, #80]	; 0x50
 800484c:	4613      	mov	r3, r2
 800484e:	eb42 0303 	adc.w	r3, r2, r3
 8004852:	657b      	str	r3, [r7, #84]	; 0x54
 8004854:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004858:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800485c:	f7fb fe1e 	bl	800049c <__aeabi_uldivmod>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4b61      	ldr	r3, [pc, #388]	; (80049ec <UART_SetConfig+0x2d4>)
 8004866:	fba3 2302 	umull	r2, r3, r3, r2
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	011c      	lsls	r4, r3, #4
 800486e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004872:	2200      	movs	r2, #0
 8004874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004878:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800487c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004880:	4642      	mov	r2, r8
 8004882:	464b      	mov	r3, r9
 8004884:	1891      	adds	r1, r2, r2
 8004886:	64b9      	str	r1, [r7, #72]	; 0x48
 8004888:	415b      	adcs	r3, r3
 800488a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800488c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004890:	4641      	mov	r1, r8
 8004892:	eb12 0a01 	adds.w	sl, r2, r1
 8004896:	4649      	mov	r1, r9
 8004898:	eb43 0b01 	adc.w	fp, r3, r1
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048b0:	4692      	mov	sl, r2
 80048b2:	469b      	mov	fp, r3
 80048b4:	4643      	mov	r3, r8
 80048b6:	eb1a 0303 	adds.w	r3, sl, r3
 80048ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048be:	464b      	mov	r3, r9
 80048c0:	eb4b 0303 	adc.w	r3, fp, r3
 80048c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048dc:	460b      	mov	r3, r1
 80048de:	18db      	adds	r3, r3, r3
 80048e0:	643b      	str	r3, [r7, #64]	; 0x40
 80048e2:	4613      	mov	r3, r2
 80048e4:	eb42 0303 	adc.w	r3, r2, r3
 80048e8:	647b      	str	r3, [r7, #68]	; 0x44
 80048ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048f2:	f7fb fdd3 	bl	800049c <__aeabi_uldivmod>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4611      	mov	r1, r2
 80048fc:	4b3b      	ldr	r3, [pc, #236]	; (80049ec <UART_SetConfig+0x2d4>)
 80048fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	2264      	movs	r2, #100	; 0x64
 8004906:	fb02 f303 	mul.w	r3, r2, r3
 800490a:	1acb      	subs	r3, r1, r3
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004912:	4b36      	ldr	r3, [pc, #216]	; (80049ec <UART_SetConfig+0x2d4>)
 8004914:	fba3 2302 	umull	r2, r3, r3, r2
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004920:	441c      	add	r4, r3
 8004922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004926:	2200      	movs	r2, #0
 8004928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800492c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004930:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004934:	4642      	mov	r2, r8
 8004936:	464b      	mov	r3, r9
 8004938:	1891      	adds	r1, r2, r2
 800493a:	63b9      	str	r1, [r7, #56]	; 0x38
 800493c:	415b      	adcs	r3, r3
 800493e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004940:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004944:	4641      	mov	r1, r8
 8004946:	1851      	adds	r1, r2, r1
 8004948:	6339      	str	r1, [r7, #48]	; 0x30
 800494a:	4649      	mov	r1, r9
 800494c:	414b      	adcs	r3, r1
 800494e:	637b      	str	r3, [r7, #52]	; 0x34
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800495c:	4659      	mov	r1, fp
 800495e:	00cb      	lsls	r3, r1, #3
 8004960:	4651      	mov	r1, sl
 8004962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004966:	4651      	mov	r1, sl
 8004968:	00ca      	lsls	r2, r1, #3
 800496a:	4610      	mov	r0, r2
 800496c:	4619      	mov	r1, r3
 800496e:	4603      	mov	r3, r0
 8004970:	4642      	mov	r2, r8
 8004972:	189b      	adds	r3, r3, r2
 8004974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004978:	464b      	mov	r3, r9
 800497a:	460a      	mov	r2, r1
 800497c:	eb42 0303 	adc.w	r3, r2, r3
 8004980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004990:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004994:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004998:	460b      	mov	r3, r1
 800499a:	18db      	adds	r3, r3, r3
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28
 800499e:	4613      	mov	r3, r2
 80049a0:	eb42 0303 	adc.w	r3, r2, r3
 80049a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049ae:	f7fb fd75 	bl	800049c <__aeabi_uldivmod>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <UART_SetConfig+0x2d4>)
 80049b8:	fba3 1302 	umull	r1, r3, r3, r2
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	2164      	movs	r1, #100	; 0x64
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	3332      	adds	r3, #50	; 0x32
 80049ca:	4a08      	ldr	r2, [pc, #32]	; (80049ec <UART_SetConfig+0x2d4>)
 80049cc:	fba2 2303 	umull	r2, r3, r2, r3
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	f003 0207 	and.w	r2, r3, #7
 80049d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4422      	add	r2, r4
 80049de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049e0:	e105      	b.n	8004bee <UART_SetConfig+0x4d6>
 80049e2:	bf00      	nop
 80049e4:	40011000 	.word	0x40011000
 80049e8:	40011400 	.word	0x40011400
 80049ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049f4:	2200      	movs	r2, #0
 80049f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a02:	4642      	mov	r2, r8
 8004a04:	464b      	mov	r3, r9
 8004a06:	1891      	adds	r1, r2, r2
 8004a08:	6239      	str	r1, [r7, #32]
 8004a0a:	415b      	adcs	r3, r3
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a12:	4641      	mov	r1, r8
 8004a14:	1854      	adds	r4, r2, r1
 8004a16:	4649      	mov	r1, r9
 8004a18:	eb43 0501 	adc.w	r5, r3, r1
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	00eb      	lsls	r3, r5, #3
 8004a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a2a:	00e2      	lsls	r2, r4, #3
 8004a2c:	4614      	mov	r4, r2
 8004a2e:	461d      	mov	r5, r3
 8004a30:	4643      	mov	r3, r8
 8004a32:	18e3      	adds	r3, r4, r3
 8004a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a38:	464b      	mov	r3, r9
 8004a3a:	eb45 0303 	adc.w	r3, r5, r3
 8004a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a5e:	4629      	mov	r1, r5
 8004a60:	008b      	lsls	r3, r1, #2
 8004a62:	4621      	mov	r1, r4
 8004a64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a68:	4621      	mov	r1, r4
 8004a6a:	008a      	lsls	r2, r1, #2
 8004a6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a70:	f7fb fd14 	bl	800049c <__aeabi_uldivmod>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4b60      	ldr	r3, [pc, #384]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	011c      	lsls	r4, r3, #4
 8004a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a94:	4642      	mov	r2, r8
 8004a96:	464b      	mov	r3, r9
 8004a98:	1891      	adds	r1, r2, r2
 8004a9a:	61b9      	str	r1, [r7, #24]
 8004a9c:	415b      	adcs	r3, r3
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004aa4:	4641      	mov	r1, r8
 8004aa6:	1851      	adds	r1, r2, r1
 8004aa8:	6139      	str	r1, [r7, #16]
 8004aaa:	4649      	mov	r1, r9
 8004aac:	414b      	adcs	r3, r1
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004abc:	4659      	mov	r1, fp
 8004abe:	00cb      	lsls	r3, r1, #3
 8004ac0:	4651      	mov	r1, sl
 8004ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	00ca      	lsls	r2, r1, #3
 8004aca:	4610      	mov	r0, r2
 8004acc:	4619      	mov	r1, r3
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	189b      	adds	r3, r3, r2
 8004ad4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ad8:	464b      	mov	r3, r9
 8004ada:	460a      	mov	r2, r1
 8004adc:	eb42 0303 	adc.w	r3, r2, r3
 8004ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004afc:	4649      	mov	r1, r9
 8004afe:	008b      	lsls	r3, r1, #2
 8004b00:	4641      	mov	r1, r8
 8004b02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b06:	4641      	mov	r1, r8
 8004b08:	008a      	lsls	r2, r1, #2
 8004b0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b0e:	f7fb fcc5 	bl	800049c <__aeabi_uldivmod>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4b39      	ldr	r3, [pc, #228]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004b18:	fba3 1302 	umull	r1, r3, r3, r2
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	2164      	movs	r1, #100	; 0x64
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	3332      	adds	r3, #50	; 0x32
 8004b2a:	4a34      	ldr	r2, [pc, #208]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b30:	095b      	lsrs	r3, r3, #5
 8004b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b36:	441c      	add	r4, r3
 8004b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	673b      	str	r3, [r7, #112]	; 0x70
 8004b40:	677a      	str	r2, [r7, #116]	; 0x74
 8004b42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b46:	4642      	mov	r2, r8
 8004b48:	464b      	mov	r3, r9
 8004b4a:	1891      	adds	r1, r2, r2
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	415b      	adcs	r3, r3
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b56:	4641      	mov	r1, r8
 8004b58:	1851      	adds	r1, r2, r1
 8004b5a:	6039      	str	r1, [r7, #0]
 8004b5c:	4649      	mov	r1, r9
 8004b5e:	414b      	adcs	r3, r1
 8004b60:	607b      	str	r3, [r7, #4]
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b6e:	4659      	mov	r1, fp
 8004b70:	00cb      	lsls	r3, r1, #3
 8004b72:	4651      	mov	r1, sl
 8004b74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b78:	4651      	mov	r1, sl
 8004b7a:	00ca      	lsls	r2, r1, #3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4603      	mov	r3, r0
 8004b82:	4642      	mov	r2, r8
 8004b84:	189b      	adds	r3, r3, r2
 8004b86:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b88:	464b      	mov	r3, r9
 8004b8a:	460a      	mov	r2, r1
 8004b8c:	eb42 0303 	adc.w	r3, r2, r3
 8004b90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b9c:	667a      	str	r2, [r7, #100]	; 0x64
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004baa:	4649      	mov	r1, r9
 8004bac:	008b      	lsls	r3, r1, #2
 8004bae:	4641      	mov	r1, r8
 8004bb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	008a      	lsls	r2, r1, #2
 8004bb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bbc:	f7fb fc6e 	bl	800049c <__aeabi_uldivmod>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	2164      	movs	r1, #100	; 0x64
 8004bce:	fb01 f303 	mul.w	r3, r1, r3
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	3332      	adds	r3, #50	; 0x32
 8004bd8:	4a08      	ldr	r2, [pc, #32]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004bda:	fba2 2303 	umull	r2, r3, r2, r3
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	f003 020f 	and.w	r2, r3, #15
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4422      	add	r2, r4
 8004bec:	609a      	str	r2, [r3, #8]
}
 8004bee:	bf00      	nop
 8004bf0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bfa:	bf00      	nop
 8004bfc:	51eb851f 	.word	0x51eb851f

08004c00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004c04:	4904      	ldr	r1, [pc, #16]	; (8004c18 <MX_FATFS_Init+0x18>)
 8004c06:	4805      	ldr	r0, [pc, #20]	; (8004c1c <MX_FATFS_Init+0x1c>)
 8004c08:	f003 f946 	bl	8007e98 <FATFS_LinkDriver>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	461a      	mov	r2, r3
 8004c10:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <MX_FATFS_Init+0x20>)
 8004c12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004c14:	bf00      	nop
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	200011d4 	.word	0x200011d4
 8004c1c:	20000010 	.word	0x20000010
 8004c20:	200011d0 	.word	0x200011d0

08004c24 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004c28:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fb ff67 	bl	8000b14 <SD_disk_initialize>
 8004c46:	4603      	mov	r3, r0
 8004c48:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	4603      	mov	r3, r0
 8004c5a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fc f844 	bl	8000cec <SD_disk_status>
 8004c64:	4603      	mov	r3, r0
 8004c66:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	607a      	str	r2, [r7, #4]
 8004c7a:	603b      	str	r3, [r7, #0]
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 8004c80:	7bf8      	ldrb	r0, [r7, #15]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	f7fc f846 	bl	8000d18 <SD_disk_read>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60b9      	str	r1, [r7, #8]
 8004ca0:	607a      	str	r2, [r7, #4]
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 8004ca8:	7bf8      	ldrb	r0, [r7, #15]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	68b9      	ldr	r1, [r7, #8]
 8004cb0:	f7fc f89c 	bl	8000dec <SD_disk_write>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	603a      	str	r2, [r7, #0]
 8004cca:	71fb      	strb	r3, [r7, #7]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8004cd0:	79fb      	ldrb	r3, [r7, #7]
 8004cd2:	79b9      	ldrb	r1, [r7, #6]
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fc f90c 	bl	8000ef4 <SD_disk_ioctl>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	4a08      	ldr	r2, [pc, #32]	; (8004d18 <disk_status+0x30>)
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	79fa      	ldrb	r2, [r7, #7]
 8004d00:	4905      	ldr	r1, [pc, #20]	; (8004d18 <disk_status+0x30>)
 8004d02:	440a      	add	r2, r1
 8004d04:	7a12      	ldrb	r2, [r2, #8]
 8004d06:	4610      	mov	r0, r2
 8004d08:	4798      	blx	r3
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20001400 	.word	0x20001400

08004d1c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004d2a:	79fb      	ldrb	r3, [r7, #7]
 8004d2c:	4a0d      	ldr	r2, [pc, #52]	; (8004d64 <disk_initialize+0x48>)
 8004d2e:	5cd3      	ldrb	r3, [r2, r3]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d111      	bne.n	8004d58 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	4a0b      	ldr	r2, [pc, #44]	; (8004d64 <disk_initialize+0x48>)
 8004d38:	2101      	movs	r1, #1
 8004d3a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	4a09      	ldr	r2, [pc, #36]	; (8004d64 <disk_initialize+0x48>)
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	79fa      	ldrb	r2, [r7, #7]
 8004d4a:	4906      	ldr	r1, [pc, #24]	; (8004d64 <disk_initialize+0x48>)
 8004d4c:	440a      	add	r2, r1
 8004d4e:	7a12      	ldrb	r2, [r2, #8]
 8004d50:	4610      	mov	r0, r2
 8004d52:	4798      	blx	r3
 8004d54:	4603      	mov	r3, r0
 8004d56:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20001400 	.word	0x20001400

08004d68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004d68:	b590      	push	{r4, r7, lr}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	607a      	str	r2, [r7, #4]
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	4603      	mov	r3, r0
 8004d76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	4a0a      	ldr	r2, [pc, #40]	; (8004da4 <disk_read+0x3c>)
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	689c      	ldr	r4, [r3, #8]
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
 8004d86:	4a07      	ldr	r2, [pc, #28]	; (8004da4 <disk_read+0x3c>)
 8004d88:	4413      	add	r3, r2
 8004d8a:	7a18      	ldrb	r0, [r3, #8]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	47a0      	blx	r4
 8004d94:	4603      	mov	r3, r0
 8004d96:	75fb      	strb	r3, [r7, #23]
  return res;
 8004d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd90      	pop	{r4, r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20001400 	.word	0x20001400

08004da8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004da8:	b590      	push	{r4, r7, lr}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	607a      	str	r2, [r7, #4]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	4603      	mov	r3, r0
 8004db6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
 8004dba:	4a0a      	ldr	r2, [pc, #40]	; (8004de4 <disk_write+0x3c>)
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	68dc      	ldr	r4, [r3, #12]
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
 8004dc6:	4a07      	ldr	r2, [pc, #28]	; (8004de4 <disk_write+0x3c>)
 8004dc8:	4413      	add	r3, r2
 8004dca:	7a18      	ldrb	r0, [r3, #8]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	68b9      	ldr	r1, [r7, #8]
 8004dd2:	47a0      	blx	r4
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	75fb      	strb	r3, [r7, #23]
  return res;
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd90      	pop	{r4, r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20001400 	.word	0x20001400

08004de8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	603a      	str	r2, [r7, #0]
 8004df2:	71fb      	strb	r3, [r7, #7]
 8004df4:	460b      	mov	r3, r1
 8004df6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004df8:	79fb      	ldrb	r3, [r7, #7]
 8004dfa:	4a09      	ldr	r2, [pc, #36]	; (8004e20 <disk_ioctl+0x38>)
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	79fa      	ldrb	r2, [r7, #7]
 8004e06:	4906      	ldr	r1, [pc, #24]	; (8004e20 <disk_ioctl+0x38>)
 8004e08:	440a      	add	r2, r1
 8004e0a:	7a10      	ldrb	r0, [r2, #8]
 8004e0c:	79b9      	ldrb	r1, [r7, #6]
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	4798      	blx	r3
 8004e12:	4603      	mov	r3, r0
 8004e14:	73fb      	strb	r3, [r7, #15]
  return res;
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	20001400 	.word	0x20001400

08004e24 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004e34:	89fb      	ldrh	r3, [r7, #14]
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	b21a      	sxth	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	b21b      	sxth	r3, r3
 8004e40:	4313      	orrs	r3, r2
 8004e42:	b21b      	sxth	r3, r3
 8004e44:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004e46:	89fb      	ldrh	r3, [r7, #14]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3303      	adds	r3, #3
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	3202      	adds	r2, #2
 8004e6c:	7812      	ldrb	r2, [r2, #0]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	3201      	adds	r2, #1
 8004e7a:	7812      	ldrb	r2, [r2, #0]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	7812      	ldrb	r2, [r2, #0]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
	return rv;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	887a      	ldrh	r2, [r7, #2]
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	887b      	ldrh	r3, [r7, #2]
 8004eb4:	0a1b      	lsrs	r3, r3, #8
 8004eb6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	607a      	str	r2, [r7, #4]
 8004ebe:	887a      	ldrh	r2, [r7, #2]
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	701a      	strb	r2, [r3, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	0a1b      	lsrs	r3, r3, #8
 8004eea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	607a      	str	r2, [r7, #4]
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	0a1b      	lsrs	r3, r3, #8
 8004efc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	0a1b      	lsrs	r3, r3, #8
 8004f0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	607a      	str	r2, [r7, #4]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	701a      	strb	r2, [r3, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00d      	beq.n	8004f5e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	1c53      	adds	r3, r2, #1
 8004f46:	613b      	str	r3, [r7, #16]
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	1c59      	adds	r1, r3, #1
 8004f4c:	6179      	str	r1, [r7, #20]
 8004f4e:	7812      	ldrb	r2, [r2, #0]
 8004f50:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	607b      	str	r3, [r7, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f1      	bne.n	8004f42 <mem_cpy+0x1a>
	}
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004f6a:	b480      	push	{r7}
 8004f6c:	b087      	sub	sp, #28
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	617a      	str	r2, [r7, #20]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	607b      	str	r3, [r7, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f3      	bne.n	8004f7a <mem_set+0x10>
}
 8004f92:	bf00      	nop
 8004f94:	bf00      	nop
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004fa0:	b480      	push	{r7}
 8004fa2:	b089      	sub	sp, #36	; 0x24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	61fb      	str	r3, [r7, #28]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	61fa      	str	r2, [r7, #28]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	61ba      	str	r2, [r7, #24]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	1acb      	subs	r3, r1, r3
 8004fcc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	607b      	str	r3, [r7, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <mem_cmp+0x40>
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0eb      	beq.n	8004fb8 <mem_cmp+0x18>

	return r;
 8004fe0:	697b      	ldr	r3, [r7, #20]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3724      	adds	r7, #36	; 0x24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004ff8:	e002      	b.n	8005000 <chk_chr+0x12>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	607b      	str	r3, [r7, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <chk_chr+0x26>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	461a      	mov	r2, r3
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	4293      	cmp	r3, r2
 8005012:	d1f2      	bne.n	8004ffa <chk_chr+0xc>
	return *str;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	781b      	ldrb	r3, [r3, #0]
}
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800502e:	2300      	movs	r3, #0
 8005030:	60bb      	str	r3, [r7, #8]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	e029      	b.n	800508c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005038:	4a27      	ldr	r2, [pc, #156]	; (80050d8 <chk_lock+0xb4>)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	4413      	add	r3, r2
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d01d      	beq.n	8005082 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005046:	4a24      	ldr	r2, [pc, #144]	; (80050d8 <chk_lock+0xb4>)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	4413      	add	r3, r2
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d116      	bne.n	8005086 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005058:	4a1f      	ldr	r2, [pc, #124]	; (80050d8 <chk_lock+0xb4>)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	4413      	add	r3, r2
 8005060:	3304      	adds	r3, #4
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005068:	429a      	cmp	r2, r3
 800506a:	d10c      	bne.n	8005086 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800506c:	4a1a      	ldr	r2, [pc, #104]	; (80050d8 <chk_lock+0xb4>)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	4413      	add	r3, r2
 8005074:	3308      	adds	r3, #8
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800507c:	429a      	cmp	r2, r3
 800507e:	d102      	bne.n	8005086 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005080:	e007      	b.n	8005092 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005082:	2301      	movs	r3, #1
 8005084:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	3301      	adds	r3, #1
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d9d2      	bls.n	8005038 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b02      	cmp	r3, #2
 8005096:	d109      	bne.n	80050ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d102      	bne.n	80050a4 <chk_lock+0x80>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d101      	bne.n	80050a8 <chk_lock+0x84>
 80050a4:	2300      	movs	r3, #0
 80050a6:	e010      	b.n	80050ca <chk_lock+0xa6>
 80050a8:	2312      	movs	r3, #18
 80050aa:	e00e      	b.n	80050ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d108      	bne.n	80050c4 <chk_lock+0xa0>
 80050b2:	4a09      	ldr	r2, [pc, #36]	; (80050d8 <chk_lock+0xb4>)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	4413      	add	r3, r2
 80050ba:	330c      	adds	r3, #12
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c2:	d101      	bne.n	80050c8 <chk_lock+0xa4>
 80050c4:	2310      	movs	r3, #16
 80050c6:	e000      	b.n	80050ca <chk_lock+0xa6>
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	200011e0 	.word	0x200011e0

080050dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80050e2:	2300      	movs	r3, #0
 80050e4:	607b      	str	r3, [r7, #4]
 80050e6:	e002      	b.n	80050ee <enq_lock+0x12>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3301      	adds	r3, #1
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d806      	bhi.n	8005102 <enq_lock+0x26>
 80050f4:	4a09      	ldr	r2, [pc, #36]	; (800511c <enq_lock+0x40>)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	4413      	add	r3, r2
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f2      	bne.n	80050e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b02      	cmp	r3, #2
 8005106:	bf14      	ite	ne
 8005108:	2301      	movne	r3, #1
 800510a:	2300      	moveq	r3, #0
 800510c:	b2db      	uxtb	r3, r3
}
 800510e:	4618      	mov	r0, r3
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	200011e0 	.word	0x200011e0

08005120 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	e01f      	b.n	8005170 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005130:	4a41      	ldr	r2, [pc, #260]	; (8005238 <inc_lock+0x118>)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	4413      	add	r3, r2
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d113      	bne.n	800516a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005142:	4a3d      	ldr	r2, [pc, #244]	; (8005238 <inc_lock+0x118>)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	4413      	add	r3, r2
 800514a:	3304      	adds	r3, #4
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005152:	429a      	cmp	r2, r3
 8005154:	d109      	bne.n	800516a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005156:	4a38      	ldr	r2, [pc, #224]	; (8005238 <inc_lock+0x118>)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	4413      	add	r3, r2
 800515e:	3308      	adds	r3, #8
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005166:	429a      	cmp	r2, r3
 8005168:	d006      	beq.n	8005178 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3301      	adds	r3, #1
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d9dc      	bls.n	8005130 <inc_lock+0x10>
 8005176:	e000      	b.n	800517a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005178:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d132      	bne.n	80051e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	e002      	b.n	800518c <inc_lock+0x6c>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3301      	adds	r3, #1
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d806      	bhi.n	80051a0 <inc_lock+0x80>
 8005192:	4a29      	ldr	r2, [pc, #164]	; (8005238 <inc_lock+0x118>)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	4413      	add	r3, r2
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1f2      	bne.n	8005186 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d101      	bne.n	80051aa <inc_lock+0x8a>
 80051a6:	2300      	movs	r3, #0
 80051a8:	e040      	b.n	800522c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4922      	ldr	r1, [pc, #136]	; (8005238 <inc_lock+0x118>)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	440b      	add	r3, r1
 80051b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	491e      	ldr	r1, [pc, #120]	; (8005238 <inc_lock+0x118>)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	440b      	add	r3, r1
 80051c4:	3304      	adds	r3, #4
 80051c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	695a      	ldr	r2, [r3, #20]
 80051cc:	491a      	ldr	r1, [pc, #104]	; (8005238 <inc_lock+0x118>)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	440b      	add	r3, r1
 80051d4:	3308      	adds	r3, #8
 80051d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80051d8:	4a17      	ldr	r2, [pc, #92]	; (8005238 <inc_lock+0x118>)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	4413      	add	r3, r2
 80051e0:	330c      	adds	r3, #12
 80051e2:	2200      	movs	r2, #0
 80051e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d009      	beq.n	8005200 <inc_lock+0xe0>
 80051ec:	4a12      	ldr	r2, [pc, #72]	; (8005238 <inc_lock+0x118>)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	4413      	add	r3, r2
 80051f4:	330c      	adds	r3, #12
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <inc_lock+0xe0>
 80051fc:	2300      	movs	r3, #0
 80051fe:	e015      	b.n	800522c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d108      	bne.n	8005218 <inc_lock+0xf8>
 8005206:	4a0c      	ldr	r2, [pc, #48]	; (8005238 <inc_lock+0x118>)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	4413      	add	r3, r2
 800520e:	330c      	adds	r3, #12
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	3301      	adds	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	e001      	b.n	800521c <inc_lock+0xfc>
 8005218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800521c:	4906      	ldr	r1, [pc, #24]	; (8005238 <inc_lock+0x118>)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	440b      	add	r3, r1
 8005224:	330c      	adds	r3, #12
 8005226:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3301      	adds	r3, #1
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	200011e0 	.word	0x200011e0

0800523c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3b01      	subs	r3, #1
 8005248:	607b      	str	r3, [r7, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d825      	bhi.n	800529c <dec_lock+0x60>
		n = Files[i].ctr;
 8005250:	4a17      	ldr	r2, [pc, #92]	; (80052b0 <dec_lock+0x74>)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	4413      	add	r3, r2
 8005258:	330c      	adds	r3, #12
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800525e:	89fb      	ldrh	r3, [r7, #14]
 8005260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005264:	d101      	bne.n	800526a <dec_lock+0x2e>
 8005266:	2300      	movs	r3, #0
 8005268:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800526a:	89fb      	ldrh	r3, [r7, #14]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <dec_lock+0x3a>
 8005270:	89fb      	ldrh	r3, [r7, #14]
 8005272:	3b01      	subs	r3, #1
 8005274:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005276:	4a0e      	ldr	r2, [pc, #56]	; (80052b0 <dec_lock+0x74>)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	4413      	add	r3, r2
 800527e:	330c      	adds	r3, #12
 8005280:	89fa      	ldrh	r2, [r7, #14]
 8005282:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005284:	89fb      	ldrh	r3, [r7, #14]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d105      	bne.n	8005296 <dec_lock+0x5a>
 800528a:	4a09      	ldr	r2, [pc, #36]	; (80052b0 <dec_lock+0x74>)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	4413      	add	r3, r2
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	737b      	strb	r3, [r7, #13]
 800529a:	e001      	b.n	80052a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800529c:	2302      	movs	r3, #2
 800529e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80052a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	200011e0 	.word	0x200011e0

080052b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80052bc:	2300      	movs	r3, #0
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	e010      	b.n	80052e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80052c2:	4a0d      	ldr	r2, [pc, #52]	; (80052f8 <clear_lock+0x44>)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	4413      	add	r3, r2
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d105      	bne.n	80052de <clear_lock+0x2a>
 80052d2:	4a09      	ldr	r2, [pc, #36]	; (80052f8 <clear_lock+0x44>)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	4413      	add	r3, r2
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3301      	adds	r3, #1
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d9eb      	bls.n	80052c2 <clear_lock+0xe>
	}
}
 80052ea:	bf00      	nop
 80052ec:	bf00      	nop
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	200011e0 	.word	0x200011e0

080052fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	78db      	ldrb	r3, [r3, #3]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d034      	beq.n	800537a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005314:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	7858      	ldrb	r0, [r3, #1]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005320:	2301      	movs	r3, #1
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	f7ff fd40 	bl	8004da8 <disk_write>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <sync_window+0x38>
			res = FR_DISK_ERR;
 800532e:	2301      	movs	r3, #1
 8005330:	73fb      	strb	r3, [r7, #15]
 8005332:	e022      	b.n	800537a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	1ad2      	subs	r2, r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	429a      	cmp	r2, r3
 8005348:	d217      	bcs.n	800537a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	789b      	ldrb	r3, [r3, #2]
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	e010      	b.n	8005374 <sync_window+0x78>
					wsect += fs->fsize;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4413      	add	r3, r2
 800535a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	7858      	ldrb	r0, [r3, #1]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005366:	2301      	movs	r3, #1
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	f7ff fd1d 	bl	8004da8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	3b01      	subs	r3, #1
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d8eb      	bhi.n	8005352 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800537a:	7bfb      	ldrb	r3, [r7, #15]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d01b      	beq.n	80053d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff ffad 	bl	80052fc <sync_window>
 80053a2:	4603      	mov	r3, r0
 80053a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80053a6:	7bfb      	ldrb	r3, [r7, #15]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d113      	bne.n	80053d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	7858      	ldrb	r0, [r3, #1]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80053b6:	2301      	movs	r3, #1
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	f7ff fcd5 	bl	8004d68 <disk_read>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d004      	beq.n	80053ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80053c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7ff ff87 	bl	80052fc <sync_window>
 80053ee:	4603      	mov	r3, r0
 80053f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d159      	bne.n	80054ac <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	d149      	bne.n	8005494 <sync_fs+0xb4>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	791b      	ldrb	r3, [r3, #4]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d145      	bne.n	8005494 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	899b      	ldrh	r3, [r3, #12]
 8005412:	461a      	mov	r2, r3
 8005414:	2100      	movs	r1, #0
 8005416:	f7ff fda8 	bl	8004f6a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3338      	adds	r3, #56	; 0x38
 800541e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005422:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005426:	4618      	mov	r0, r3
 8005428:	f7ff fd37 	bl	8004e9a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3338      	adds	r3, #56	; 0x38
 8005430:	4921      	ldr	r1, [pc, #132]	; (80054b8 <sync_fs+0xd8>)
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fd4c 	bl	8004ed0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3338      	adds	r3, #56	; 0x38
 800543c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005440:	491e      	ldr	r1, [pc, #120]	; (80054bc <sync_fs+0xdc>)
 8005442:	4618      	mov	r0, r3
 8005444:	f7ff fd44 	bl	8004ed0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3338      	adds	r3, #56	; 0x38
 800544c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f7ff fd3a 	bl	8004ed0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3338      	adds	r3, #56	; 0x38
 8005460:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f7ff fd30 	bl	8004ed0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	7858      	ldrb	r0, [r3, #1]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005488:	2301      	movs	r3, #1
 800548a:	f7ff fc8d 	bl	8004da8 <disk_write>
			fs->fsi_flag = 0;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	785b      	ldrb	r3, [r3, #1]
 8005498:	2200      	movs	r2, #0
 800549a:	2100      	movs	r1, #0
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff fca3 	bl	8004de8 <disk_ioctl>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <sync_fs+0xcc>
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	41615252 	.word	0x41615252
 80054bc:	61417272 	.word	0x61417272

080054c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	3b02      	subs	r3, #2
 80054ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	3b02      	subs	r3, #2
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d301      	bcc.n	80054e0 <clust2sect+0x20>
 80054dc:	2300      	movs	r3, #0
 80054de:	e008      	b.n	80054f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	895b      	ldrh	r3, [r3, #10]
 80054e4:	461a      	mov	r2, r3
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	fb03 f202 	mul.w	r2, r3, r2
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f0:	4413      	add	r3, r2
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b086      	sub	sp, #24
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d904      	bls.n	800551e <get_fat+0x20>
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d302      	bcc.n	8005524 <get_fat+0x26>
		val = 1;	/* Internal error */
 800551e:	2301      	movs	r3, #1
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	e0bb      	b.n	800569c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005528:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b03      	cmp	r3, #3
 8005530:	f000 8083 	beq.w	800563a <get_fat+0x13c>
 8005534:	2b03      	cmp	r3, #3
 8005536:	f300 80a7 	bgt.w	8005688 <get_fat+0x18a>
 800553a:	2b01      	cmp	r3, #1
 800553c:	d002      	beq.n	8005544 <get_fat+0x46>
 800553e:	2b02      	cmp	r3, #2
 8005540:	d056      	beq.n	80055f0 <get_fat+0xf2>
 8005542:	e0a1      	b.n	8005688 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	085b      	lsrs	r3, r3, #1
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	899b      	ldrh	r3, [r3, #12]
 800555a:	4619      	mov	r1, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005562:	4413      	add	r3, r2
 8005564:	4619      	mov	r1, r3
 8005566:	6938      	ldr	r0, [r7, #16]
 8005568:	f7ff ff0c 	bl	8005384 <move_window>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	f040 808d 	bne.w	800568e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	60fa      	str	r2, [r7, #12]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	8992      	ldrh	r2, [r2, #12]
 800557e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005582:	fb01 f202 	mul.w	r2, r1, r2
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4413      	add	r3, r2
 800558c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005590:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	899b      	ldrh	r3, [r3, #12]
 800559a:	4619      	mov	r1, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	fbb3 f3f1 	udiv	r3, r3, r1
 80055a2:	4413      	add	r3, r2
 80055a4:	4619      	mov	r1, r3
 80055a6:	6938      	ldr	r0, [r7, #16]
 80055a8:	f7ff feec 	bl	8005384 <move_window>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d16f      	bne.n	8005692 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	899b      	ldrh	r3, [r3, #12]
 80055b6:	461a      	mov	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80055be:	fb01 f202 	mul.w	r2, r1, r2
 80055c2:	1a9b      	subs	r3, r3, r2
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4413      	add	r3, r2
 80055c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055cc:	021b      	lsls	r3, r3, #8
 80055ce:	461a      	mov	r2, r3
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <get_fat+0xe8>
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	091b      	lsrs	r3, r3, #4
 80055e4:	e002      	b.n	80055ec <get_fat+0xee>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ec:	617b      	str	r3, [r7, #20]
			break;
 80055ee:	e055      	b.n	800569c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	899b      	ldrh	r3, [r3, #12]
 80055f8:	085b      	lsrs	r3, r3, #1
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	4619      	mov	r1, r3
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	fbb3 f3f1 	udiv	r3, r3, r1
 8005604:	4413      	add	r3, r2
 8005606:	4619      	mov	r1, r3
 8005608:	6938      	ldr	r0, [r7, #16]
 800560a:	f7ff febb 	bl	8005384 <move_window>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d140      	bne.n	8005696 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	8992      	ldrh	r2, [r2, #12]
 8005622:	fbb3 f0f2 	udiv	r0, r3, r2
 8005626:	fb00 f202 	mul.w	r2, r0, r2
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	440b      	add	r3, r1
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff fbf8 	bl	8004e24 <ld_word>
 8005634:	4603      	mov	r3, r0
 8005636:	617b      	str	r3, [r7, #20]
			break;
 8005638:	e030      	b.n	800569c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	899b      	ldrh	r3, [r3, #12]
 8005642:	089b      	lsrs	r3, r3, #2
 8005644:	b29b      	uxth	r3, r3
 8005646:	4619      	mov	r1, r3
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	fbb3 f3f1 	udiv	r3, r3, r1
 800564e:	4413      	add	r3, r2
 8005650:	4619      	mov	r1, r3
 8005652:	6938      	ldr	r0, [r7, #16]
 8005654:	f7ff fe96 	bl	8005384 <move_window>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d11d      	bne.n	800569a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	8992      	ldrh	r2, [r2, #12]
 800566c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005670:	fb00 f202 	mul.w	r2, r0, r2
 8005674:	1a9b      	subs	r3, r3, r2
 8005676:	440b      	add	r3, r1
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff fbeb 	bl	8004e54 <ld_dword>
 800567e:	4603      	mov	r3, r0
 8005680:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005684:	617b      	str	r3, [r7, #20]
			break;
 8005686:	e009      	b.n	800569c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005688:	2301      	movs	r3, #1
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	e006      	b.n	800569c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800568e:	bf00      	nop
 8005690:	e004      	b.n	800569c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005692:	bf00      	nop
 8005694:	e002      	b.n	800569c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005696:	bf00      	nop
 8005698:	e000      	b.n	800569c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800569a:	bf00      	nop
		}
	}

	return val;
 800569c:	697b      	ldr	r3, [r7, #20]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80056a6:	b590      	push	{r4, r7, lr}
 80056a8:	b089      	sub	sp, #36	; 0x24
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80056b2:	2302      	movs	r3, #2
 80056b4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	f240 8102 	bls.w	80058c2 <put_fat+0x21c>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	f080 80fc 	bcs.w	80058c2 <put_fat+0x21c>
		switch (fs->fs_type) {
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	f000 80b6 	beq.w	8005840 <put_fat+0x19a>
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	f300 80fd 	bgt.w	80058d4 <put_fat+0x22e>
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d003      	beq.n	80056e6 <put_fat+0x40>
 80056de:	2b02      	cmp	r3, #2
 80056e0:	f000 8083 	beq.w	80057ea <put_fat+0x144>
 80056e4:	e0f6      	b.n	80058d4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	085b      	lsrs	r3, r3, #1
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	4413      	add	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	899b      	ldrh	r3, [r3, #12]
 80056fc:	4619      	mov	r1, r3
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	fbb3 f3f1 	udiv	r3, r3, r1
 8005704:	4413      	add	r3, r2
 8005706:	4619      	mov	r1, r3
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f7ff fe3b 	bl	8005384 <move_window>
 800570e:	4603      	mov	r3, r0
 8005710:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005712:	7ffb      	ldrb	r3, [r7, #31]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f040 80d6 	bne.w	80058c6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	61ba      	str	r2, [r7, #24]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	8992      	ldrh	r2, [r2, #12]
 800572a:	fbb3 f0f2 	udiv	r0, r3, r2
 800572e:	fb00 f202 	mul.w	r2, r0, r2
 8005732:	1a9b      	subs	r3, r3, r2
 8005734:	440b      	add	r3, r1
 8005736:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00d      	beq.n	800575e <put_fat+0xb8>
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	b25b      	sxtb	r3, r3
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	b25a      	sxtb	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	b25b      	sxtb	r3, r3
 8005756:	4313      	orrs	r3, r2
 8005758:	b25b      	sxtb	r3, r3
 800575a:	b2db      	uxtb	r3, r3
 800575c:	e001      	b.n	8005762 <put_fat+0xbc>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	b2db      	uxtb	r3, r3
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	899b      	ldrh	r3, [r3, #12]
 8005774:	4619      	mov	r1, r3
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	fbb3 f3f1 	udiv	r3, r3, r1
 800577c:	4413      	add	r3, r2
 800577e:	4619      	mov	r1, r3
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7ff fdff 	bl	8005384 <move_window>
 8005786:	4603      	mov	r3, r0
 8005788:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800578a:	7ffb      	ldrb	r3, [r7, #31]
 800578c:	2b00      	cmp	r3, #0
 800578e:	f040 809c 	bne.w	80058ca <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	899b      	ldrh	r3, [r3, #12]
 800579c:	461a      	mov	r2, r3
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80057a4:	fb00 f202 	mul.w	r2, r0, r2
 80057a8:	1a9b      	subs	r3, r3, r2
 80057aa:	440b      	add	r3, r1
 80057ac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <put_fat+0x11a>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	091b      	lsrs	r3, r3, #4
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	e00e      	b.n	80057de <put_fat+0x138>
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	b25b      	sxtb	r3, r3
 80057c6:	f023 030f 	bic.w	r3, r3, #15
 80057ca:	b25a      	sxtb	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	0a1b      	lsrs	r3, r3, #8
 80057d0:	b25b      	sxtb	r3, r3
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	b25b      	sxtb	r3, r3
 80057d8:	4313      	orrs	r3, r2
 80057da:	b25b      	sxtb	r3, r3
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	70da      	strb	r2, [r3, #3]
			break;
 80057e8:	e074      	b.n	80058d4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	899b      	ldrh	r3, [r3, #12]
 80057f2:	085b      	lsrs	r3, r3, #1
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	4619      	mov	r1, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80057fe:	4413      	add	r3, r2
 8005800:	4619      	mov	r1, r3
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7ff fdbe 	bl	8005384 <move_window>
 8005808:	4603      	mov	r3, r0
 800580a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800580c:	7ffb      	ldrb	r3, [r7, #31]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d15d      	bne.n	80058ce <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	8992      	ldrh	r2, [r2, #12]
 8005820:	fbb3 f0f2 	udiv	r0, r3, r2
 8005824:	fb00 f202 	mul.w	r2, r0, r2
 8005828:	1a9b      	subs	r3, r3, r2
 800582a:	440b      	add	r3, r1
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	b292      	uxth	r2, r2
 8005830:	4611      	mov	r1, r2
 8005832:	4618      	mov	r0, r3
 8005834:	f7ff fb31 	bl	8004e9a <st_word>
			fs->wflag = 1;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	70da      	strb	r2, [r3, #3]
			break;
 800583e:	e049      	b.n	80058d4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	899b      	ldrh	r3, [r3, #12]
 8005848:	089b      	lsrs	r3, r3, #2
 800584a:	b29b      	uxth	r3, r3
 800584c:	4619      	mov	r1, r3
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	fbb3 f3f1 	udiv	r3, r3, r1
 8005854:	4413      	add	r3, r2
 8005856:	4619      	mov	r1, r3
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f7ff fd93 	bl	8005384 <move_window>
 800585e:	4603      	mov	r3, r0
 8005860:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005862:	7ffb      	ldrb	r3, [r7, #31]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d134      	bne.n	80058d2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	8992      	ldrh	r2, [r2, #12]
 800587c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005880:	fb00 f202 	mul.w	r2, r0, r2
 8005884:	1a9b      	subs	r3, r3, r2
 8005886:	440b      	add	r3, r1
 8005888:	4618      	mov	r0, r3
 800588a:	f7ff fae3 	bl	8004e54 <ld_dword>
 800588e:	4603      	mov	r3, r0
 8005890:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005894:	4323      	orrs	r3, r4
 8005896:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	8992      	ldrh	r2, [r2, #12]
 80058a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80058aa:	fb00 f202 	mul.w	r2, r0, r2
 80058ae:	1a9b      	subs	r3, r3, r2
 80058b0:	440b      	add	r3, r1
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7ff fb0b 	bl	8004ed0 <st_dword>
			fs->wflag = 1;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2201      	movs	r2, #1
 80058be:	70da      	strb	r2, [r3, #3]
			break;
 80058c0:	e008      	b.n	80058d4 <put_fat+0x22e>
		}
	}
 80058c2:	bf00      	nop
 80058c4:	e006      	b.n	80058d4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80058c6:	bf00      	nop
 80058c8:	e004      	b.n	80058d4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80058ca:	bf00      	nop
 80058cc:	e002      	b.n	80058d4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80058ce:	bf00      	nop
 80058d0:	e000      	b.n	80058d4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80058d2:	bf00      	nop
	return res;
 80058d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3724      	adds	r7, #36	; 0x24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd90      	pop	{r4, r7, pc}

080058de <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b088      	sub	sp, #32
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d904      	bls.n	8005904 <remove_chain+0x26>
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	429a      	cmp	r2, r3
 8005902:	d301      	bcc.n	8005908 <remove_chain+0x2a>
 8005904:	2302      	movs	r3, #2
 8005906:	e04b      	b.n	80059a0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00c      	beq.n	8005928 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800590e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	69b8      	ldr	r0, [r7, #24]
 8005916:	f7ff fec6 	bl	80056a6 <put_fat>
 800591a:	4603      	mov	r3, r0
 800591c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800591e:	7ffb      	ldrb	r3, [r7, #31]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <remove_chain+0x4a>
 8005924:	7ffb      	ldrb	r3, [r7, #31]
 8005926:	e03b      	b.n	80059a0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f7ff fde7 	bl	80054fe <get_fat>
 8005930:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d031      	beq.n	800599c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <remove_chain+0x64>
 800593e:	2302      	movs	r3, #2
 8005940:	e02e      	b.n	80059a0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005948:	d101      	bne.n	800594e <remove_chain+0x70>
 800594a:	2301      	movs	r3, #1
 800594c:	e028      	b.n	80059a0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800594e:	2200      	movs	r2, #0
 8005950:	68b9      	ldr	r1, [r7, #8]
 8005952:	69b8      	ldr	r0, [r7, #24]
 8005954:	f7ff fea7 	bl	80056a6 <put_fat>
 8005958:	4603      	mov	r3, r0
 800595a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800595c:	7ffb      	ldrb	r3, [r7, #31]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <remove_chain+0x88>
 8005962:	7ffb      	ldrb	r3, [r7, #31]
 8005964:	e01c      	b.n	80059a0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	3b02      	subs	r3, #2
 8005970:	429a      	cmp	r2, r3
 8005972:	d20b      	bcs.n	800598c <remove_chain+0xae>
			fs->free_clst++;
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	791b      	ldrb	r3, [r3, #4]
 8005982:	f043 0301 	orr.w	r3, r3, #1
 8005986:	b2da      	uxtb	r2, r3
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	429a      	cmp	r2, r3
 8005998:	d3c6      	bcc.n	8005928 <remove_chain+0x4a>
 800599a:	e000      	b.n	800599e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800599c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3720      	adds	r7, #32
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10d      	bne.n	80059da <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d004      	beq.n	80059d4 <create_chain+0x2c>
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d31b      	bcc.n	8005a0c <create_chain+0x64>
 80059d4:	2301      	movs	r3, #1
 80059d6:	61bb      	str	r3, [r7, #24]
 80059d8:	e018      	b.n	8005a0c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80059da:	6839      	ldr	r1, [r7, #0]
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff fd8e 	bl	80054fe <get_fat>
 80059e2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d801      	bhi.n	80059ee <create_chain+0x46>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e070      	b.n	8005ad0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059f4:	d101      	bne.n	80059fa <create_chain+0x52>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	e06a      	b.n	8005ad0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d201      	bcs.n	8005a08 <create_chain+0x60>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	e063      	b.n	8005ad0 <create_chain+0x128>
		scl = clst;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	3301      	adds	r3, #1
 8005a14:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	69fa      	ldr	r2, [r7, #28]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d307      	bcc.n	8005a30 <create_chain+0x88>
				ncl = 2;
 8005a20:	2302      	movs	r3, #2
 8005a22:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d901      	bls.n	8005a30 <create_chain+0x88>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	e04f      	b.n	8005ad0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005a30:	69f9      	ldr	r1, [r7, #28]
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff fd63 	bl	80054fe <get_fat>
 8005a38:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00e      	beq.n	8005a5e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d003      	beq.n	8005a4e <create_chain+0xa6>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a4c:	d101      	bne.n	8005a52 <create_chain+0xaa>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	e03e      	b.n	8005ad0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005a52:	69fa      	ldr	r2, [r7, #28]
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d1da      	bne.n	8005a10 <create_chain+0x68>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e038      	b.n	8005ad0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005a5e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a64:	69f9      	ldr	r1, [r7, #28]
 8005a66:	6938      	ldr	r0, [r7, #16]
 8005a68:	f7ff fe1d 	bl	80056a6 <put_fat>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d109      	bne.n	8005a8a <create_chain+0xe2>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d006      	beq.n	8005a8a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	6839      	ldr	r1, [r7, #0]
 8005a80:	6938      	ldr	r0, [r7, #16]
 8005a82:	f7ff fe10 	bl	80056a6 <put_fat>
 8005a86:	4603      	mov	r3, r0
 8005a88:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005a8a:	7dfb      	ldrb	r3, [r7, #23]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d116      	bne.n	8005abe <create_chain+0x116>
		fs->last_clst = ncl;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	3b02      	subs	r3, #2
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d804      	bhi.n	8005aae <create_chain+0x106>
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	1e5a      	subs	r2, r3, #1
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	791b      	ldrb	r3, [r3, #4]
 8005ab2:	f043 0301 	orr.w	r3, r3, #1
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	711a      	strb	r2, [r3, #4]
 8005abc:	e007      	b.n	8005ace <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d102      	bne.n	8005aca <create_chain+0x122>
 8005ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ac8:	e000      	b.n	8005acc <create_chain+0x124>
 8005aca:	2301      	movs	r3, #1
 8005acc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005ace:	69fb      	ldr	r3, [r7, #28]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3720      	adds	r7, #32
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	3304      	adds	r3, #4
 8005aee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	899b      	ldrh	r3, [r3, #12]
 8005af4:	461a      	mov	r2, r3
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	8952      	ldrh	r2, [r2, #10]
 8005b00:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1d1a      	adds	r2, r3, #4
 8005b0a:	613a      	str	r2, [r7, #16]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <clmt_clust+0x42>
 8005b16:	2300      	movs	r3, #0
 8005b18:	e010      	b.n	8005b3c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d307      	bcc.n	8005b32 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005b30:	e7e9      	b.n	8005b06 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005b32:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	4413      	add	r3, r2
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	371c      	adds	r7, #28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b5e:	d204      	bcs.n	8005b6a <dir_sdi+0x22>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <dir_sdi+0x26>
		return FR_INT_ERR;
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	e071      	b.n	8005c52 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d106      	bne.n	8005b8e <dir_sdi+0x46>
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d902      	bls.n	8005b8e <dir_sdi+0x46>
		clst = fs->dirbase;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10c      	bne.n	8005bae <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	8912      	ldrh	r2, [r2, #8]
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d301      	bcc.n	8005ba4 <dir_sdi+0x5c>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e056      	b.n	8005c52 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	61da      	str	r2, [r3, #28]
 8005bac:	e02d      	b.n	8005c0a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	895b      	ldrh	r3, [r3, #10]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	899b      	ldrh	r3, [r3, #12]
 8005bb8:	fb02 f303 	mul.w	r3, r2, r3
 8005bbc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005bbe:	e019      	b.n	8005bf4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6979      	ldr	r1, [r7, #20]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7ff fc9a 	bl	80054fe <get_fat>
 8005bca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bd2:	d101      	bne.n	8005bd8 <dir_sdi+0x90>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e03c      	b.n	8005c52 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d904      	bls.n	8005be8 <dir_sdi+0xa0>
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d301      	bcc.n	8005bec <dir_sdi+0xa4>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e032      	b.n	8005c52 <dir_sdi+0x10a>
			ofs -= csz;
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d2e1      	bcs.n	8005bc0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005bfc:	6979      	ldr	r1, [r7, #20]
 8005bfe:	6938      	ldr	r0, [r7, #16]
 8005c00:	f7ff fc5e 	bl	80054c0 <clust2sect>
 8005c04:	4602      	mov	r2, r0
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <dir_sdi+0xd4>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e01a      	b.n	8005c52 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	69da      	ldr	r2, [r3, #28]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	899b      	ldrh	r3, [r3, #12]
 8005c24:	4619      	mov	r1, r3
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c2c:	441a      	add	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	899b      	ldrh	r3, [r3, #12]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c44:	fb00 f202 	mul.w	r2, r0, r2
 8005c48:	1a9b      	subs	r3, r3, r2
 8005c4a:	18ca      	adds	r2, r1, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b086      	sub	sp, #24
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	3320      	adds	r3, #32
 8005c70:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <dir_next+0x28>
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c80:	d301      	bcc.n	8005c86 <dir_next+0x2c>
 8005c82:	2304      	movs	r3, #4
 8005c84:	e0bb      	b.n	8005dfe <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	899b      	ldrh	r3, [r3, #12]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c92:	fb01 f202 	mul.w	r2, r1, r2
 8005c96:	1a9b      	subs	r3, r3, r2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f040 809d 	bne.w	8005dd8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10b      	bne.n	8005cc8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	095b      	lsrs	r3, r3, #5
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	8912      	ldrh	r2, [r2, #8]
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	f0c0 808d 	bcc.w	8005dd8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	61da      	str	r2, [r3, #28]
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	e09a      	b.n	8005dfe <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	899b      	ldrh	r3, [r3, #12]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	8952      	ldrh	r2, [r2, #10]
 8005cd8:	3a01      	subs	r2, #1
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d17b      	bne.n	8005dd8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4610      	mov	r0, r2
 8005cea:	f7ff fc08 	bl	80054fe <get_fat>
 8005cee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d801      	bhi.n	8005cfa <dir_next+0xa0>
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	e081      	b.n	8005dfe <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d00:	d101      	bne.n	8005d06 <dir_next+0xac>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e07b      	b.n	8005dfe <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d359      	bcc.n	8005dc4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d104      	bne.n	8005d20 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	61da      	str	r2, [r3, #28]
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	e06e      	b.n	8005dfe <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	4619      	mov	r1, r3
 8005d28:	4610      	mov	r0, r2
 8005d2a:	f7ff fe3d 	bl	80059a8 <create_chain>
 8005d2e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <dir_next+0xe0>
 8005d36:	2307      	movs	r3, #7
 8005d38:	e061      	b.n	8005dfe <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <dir_next+0xea>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e05c      	b.n	8005dfe <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d4a:	d101      	bne.n	8005d50 <dir_next+0xf6>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e056      	b.n	8005dfe <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f7ff fad3 	bl	80052fc <sync_window>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <dir_next+0x106>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e04e      	b.n	8005dfe <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	899b      	ldrh	r3, [r3, #12]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	f7ff f8fc 	bl	8004f6a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005d72:	2300      	movs	r3, #0
 8005d74:	613b      	str	r3, [r7, #16]
 8005d76:	6979      	ldr	r1, [r7, #20]
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f7ff fba1 	bl	80054c0 <clust2sect>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	635a      	str	r2, [r3, #52]	; 0x34
 8005d84:	e012      	b.n	8005dac <dir_next+0x152>
						fs->wflag = 1;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f7ff fab5 	bl	80052fc <sync_window>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <dir_next+0x142>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e030      	b.n	8005dfe <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	635a      	str	r2, [r3, #52]	; 0x34
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	895b      	ldrh	r3, [r3, #10]
 8005db0:	461a      	mov	r2, r3
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d3e6      	bcc.n	8005d86 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad2      	subs	r2, r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005dca:	6979      	ldr	r1, [r7, #20]
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f7ff fb77 	bl	80054c0 <clust2sect>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	899b      	ldrh	r3, [r3, #12]
 8005de8:	461a      	mov	r2, r3
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	fbb3 f0f2 	udiv	r0, r3, r2
 8005df0:	fb00 f202 	mul.w	r2, r0, r2
 8005df4:	1a9b      	subs	r3, r3, r2
 8005df6:	18ca      	adds	r2, r1, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b086      	sub	sp, #24
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005e16:	2100      	movs	r1, #0
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff fe95 	bl	8005b48 <dir_sdi>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005e22:	7dfb      	ldrb	r3, [r7, #23]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d12b      	bne.n	8005e80 <dir_alloc+0x7a>
		n = 0;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	4619      	mov	r1, r3
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f7ff faa6 	bl	8005384 <move_window>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d11d      	bne.n	8005e7e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2be5      	cmp	r3, #229	; 0xe5
 8005e4a:	d004      	beq.n	8005e56 <dir_alloc+0x50>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d107      	bne.n	8005e66 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	613b      	str	r3, [r7, #16]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d102      	bne.n	8005e6a <dir_alloc+0x64>
 8005e64:	e00c      	b.n	8005e80 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005e66:	2300      	movs	r3, #0
 8005e68:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff fef4 	bl	8005c5a <dir_next>
 8005e72:	4603      	mov	r3, r0
 8005e74:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0d7      	beq.n	8005e2c <dir_alloc+0x26>
 8005e7c:	e000      	b.n	8005e80 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005e7e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d101      	bne.n	8005e8a <dir_alloc+0x84>
 8005e86:	2307      	movs	r3, #7
 8005e88:	75fb      	strb	r3, [r7, #23]
	return res;
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	331a      	adds	r3, #26
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fe ffbe 	bl	8004e24 <ld_word>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d109      	bne.n	8005ec8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	3314      	adds	r3, #20
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fe ffb3 	bl	8004e24 <ld_word>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	041b      	lsls	r3, r3, #16
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	331a      	adds	r3, #26
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	b292      	uxth	r2, r2
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fe ffd6 	bl	8004e9a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d109      	bne.n	8005f0a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f103 0214 	add.w	r2, r3, #20
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	0c1b      	lsrs	r3, r3, #16
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	4619      	mov	r1, r3
 8005f04:	4610      	mov	r0, r2
 8005f06:	f7fe ffc8 	bl	8004e9a <st_word>
	}
}
 8005f0a:	bf00      	nop
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005f14:	b590      	push	{r4, r7, lr}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	331a      	adds	r3, #26
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe ff7e 	bl	8004e24 <ld_word>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <cmp_lfn+0x1e>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e059      	b.n	8005fe6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f3a:	1e5a      	subs	r2, r3, #1
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005f48:	2301      	movs	r3, #1
 8005f4a:	81fb      	strh	r3, [r7, #14]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	613b      	str	r3, [r7, #16]
 8005f50:	e033      	b.n	8005fba <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005f52:	4a27      	ldr	r2, [pc, #156]	; (8005ff0 <cmp_lfn+0xdc>)
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	4413      	add	r3, r2
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	4413      	add	r3, r2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe ff5f 	bl	8004e24 <ld_word>
 8005f66:	4603      	mov	r3, r0
 8005f68:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005f6a:	89fb      	ldrh	r3, [r7, #14]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01a      	beq.n	8005fa6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2bfe      	cmp	r3, #254	; 0xfe
 8005f74:	d812      	bhi.n	8005f9c <cmp_lfn+0x88>
 8005f76:	89bb      	ldrh	r3, [r7, #12]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f001 ffd9 	bl	8007f30 <ff_wtoupper>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	461c      	mov	r4, r3
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	617a      	str	r2, [r7, #20]
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f001 ffcd 	bl	8007f30 <ff_wtoupper>
 8005f96:	4603      	mov	r3, r0
 8005f98:	429c      	cmp	r4, r3
 8005f9a:	d001      	beq.n	8005fa0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	e022      	b.n	8005fe6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005fa0:	89bb      	ldrh	r3, [r7, #12]
 8005fa2:	81fb      	strh	r3, [r7, #14]
 8005fa4:	e006      	b.n	8005fb4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005fa6:	89bb      	ldrh	r3, [r7, #12]
 8005fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d001      	beq.n	8005fb4 <cmp_lfn+0xa0>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	e018      	b.n	8005fe6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	613b      	str	r3, [r7, #16]
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b0c      	cmp	r3, #12
 8005fbe:	d9c8      	bls.n	8005f52 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00b      	beq.n	8005fe4 <cmp_lfn+0xd0>
 8005fcc:	89fb      	ldrh	r3, [r7, #14]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d008      	beq.n	8005fe4 <cmp_lfn+0xd0>
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	4413      	add	r3, r2
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <cmp_lfn+0xd0>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	e000      	b.n	8005fe6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005fe4:	2301      	movs	r3, #1
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	371c      	adds	r7, #28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd90      	pop	{r4, r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	08008ca0 	.word	0x08008ca0

08005ff4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	331a      	adds	r3, #26
 8006002:	4618      	mov	r0, r3
 8006004:	f7fe ff0e 	bl	8004e24 <ld_word>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <pick_lfn+0x1e>
 800600e:	2300      	movs	r3, #0
 8006010:	e04d      	b.n	80060ae <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800601a:	1e5a      	subs	r2, r3, #1
 800601c:	4613      	mov	r3, r2
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	4413      	add	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006028:	2301      	movs	r3, #1
 800602a:	81fb      	strh	r3, [r7, #14]
 800602c:	2300      	movs	r3, #0
 800602e:	613b      	str	r3, [r7, #16]
 8006030:	e028      	b.n	8006084 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006032:	4a21      	ldr	r2, [pc, #132]	; (80060b8 <pick_lfn+0xc4>)
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	4413      	add	r3, r2
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	4413      	add	r3, r2
 8006040:	4618      	mov	r0, r3
 8006042:	f7fe feef 	bl	8004e24 <ld_word>
 8006046:	4603      	mov	r3, r0
 8006048:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800604a:	89fb      	ldrh	r3, [r7, #14]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00f      	beq.n	8006070 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	2bfe      	cmp	r3, #254	; 0xfe
 8006054:	d901      	bls.n	800605a <pick_lfn+0x66>
 8006056:	2300      	movs	r3, #0
 8006058:	e029      	b.n	80060ae <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800605a:	89bb      	ldrh	r3, [r7, #12]
 800605c:	81fb      	strh	r3, [r7, #14]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	617a      	str	r2, [r7, #20]
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	4413      	add	r3, r2
 800606a:	89fa      	ldrh	r2, [r7, #14]
 800606c:	801a      	strh	r2, [r3, #0]
 800606e:	e006      	b.n	800607e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006070:	89bb      	ldrh	r3, [r7, #12]
 8006072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006076:	4293      	cmp	r3, r2
 8006078:	d001      	beq.n	800607e <pick_lfn+0x8a>
 800607a:	2300      	movs	r3, #0
 800607c:	e017      	b.n	80060ae <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	3301      	adds	r3, #1
 8006082:	613b      	str	r3, [r7, #16]
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b0c      	cmp	r3, #12
 8006088:	d9d3      	bls.n	8006032 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2bfe      	cmp	r3, #254	; 0xfe
 800609a:	d901      	bls.n	80060a0 <pick_lfn+0xac>
 800609c:	2300      	movs	r3, #0
 800609e:	e006      	b.n	80060ae <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	4413      	add	r3, r2
 80060a8:	2200      	movs	r2, #0
 80060aa:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80060ac:	2301      	movs	r3, #1
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	08008ca0 	.word	0x08008ca0

080060bc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	4611      	mov	r1, r2
 80060c8:	461a      	mov	r2, r3
 80060ca:	460b      	mov	r3, r1
 80060cc:	71fb      	strb	r3, [r7, #7]
 80060ce:	4613      	mov	r3, r2
 80060d0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	330d      	adds	r3, #13
 80060d6:	79ba      	ldrb	r2, [r7, #6]
 80060d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	330b      	adds	r3, #11
 80060de:	220f      	movs	r2, #15
 80060e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	330c      	adds	r3, #12
 80060e6:	2200      	movs	r2, #0
 80060e8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	331a      	adds	r3, #26
 80060ee:	2100      	movs	r1, #0
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fe fed2 	bl	8004e9a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	1e5a      	subs	r2, r3, #1
 80060fa:	4613      	mov	r3, r2
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006106:	2300      	movs	r3, #0
 8006108:	82fb      	strh	r3, [r7, #22]
 800610a:	2300      	movs	r3, #0
 800610c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800610e:	8afb      	ldrh	r3, [r7, #22]
 8006110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006114:	4293      	cmp	r3, r2
 8006116:	d007      	beq.n	8006128 <put_lfn+0x6c>
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	61fa      	str	r2, [r7, #28]
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006128:	4a17      	ldr	r2, [pc, #92]	; (8006188 <put_lfn+0xcc>)
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	4413      	add	r3, r2
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	4413      	add	r3, r2
 8006136:	8afa      	ldrh	r2, [r7, #22]
 8006138:	4611      	mov	r1, r2
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe fead 	bl	8004e9a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006140:	8afb      	ldrh	r3, [r7, #22]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d102      	bne.n	800614c <put_lfn+0x90>
 8006146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800614a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	3301      	adds	r3, #1
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	2b0c      	cmp	r3, #12
 8006156:	d9da      	bls.n	800610e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006158:	8afb      	ldrh	r3, [r7, #22]
 800615a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800615e:	4293      	cmp	r3, r2
 8006160:	d006      	beq.n	8006170 <put_lfn+0xb4>
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4413      	add	r3, r2
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d103      	bne.n	8006178 <put_lfn+0xbc>
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006176:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	79fa      	ldrb	r2, [r7, #7]
 800617c:	701a      	strb	r2, [r3, #0]
}
 800617e:	bf00      	nop
 8006180:	3720      	adds	r7, #32
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	08008ca0 	.word	0x08008ca0

0800618c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08c      	sub	sp, #48	; 0x30
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800619a:	220b      	movs	r2, #11
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f7fe fec2 	bl	8004f28 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2b05      	cmp	r3, #5
 80061a8:	d92b      	bls.n	8006202 <gen_numname+0x76>
		sr = seq;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80061ae:	e022      	b.n	80061f6 <gen_numname+0x6a>
			wc = *lfn++;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	1c9a      	adds	r2, r3, #2
 80061b4:	607a      	str	r2, [r7, #4]
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80061ba:	2300      	movs	r3, #0
 80061bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80061be:	e017      	b.n	80061f0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	005a      	lsls	r2, r3, #1
 80061c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	4413      	add	r3, r2
 80061cc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80061ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061d0:	085b      	lsrs	r3, r3, #1
 80061d2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d005      	beq.n	80061ea <gen_numname+0x5e>
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80061e4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80061e8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80061ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ec:	3301      	adds	r3, #1
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	2b0f      	cmp	r3, #15
 80061f4:	d9e4      	bls.n	80061c0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1d8      	bne.n	80061b0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006202:	2307      	movs	r3, #7
 8006204:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	b2db      	uxtb	r3, r3
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	b2db      	uxtb	r3, r3
 8006210:	3330      	adds	r3, #48	; 0x30
 8006212:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006216:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800621a:	2b39      	cmp	r3, #57	; 0x39
 800621c:	d904      	bls.n	8006228 <gen_numname+0x9c>
 800621e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006222:	3307      	adds	r3, #7
 8006224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622a:	1e5a      	subs	r2, r3, #1
 800622c:	62ba      	str	r2, [r7, #40]	; 0x28
 800622e:	3330      	adds	r3, #48	; 0x30
 8006230:	443b      	add	r3, r7
 8006232:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006236:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	091b      	lsrs	r3, r3, #4
 800623e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1df      	bne.n	8006206 <gen_numname+0x7a>
	ns[i] = '~';
 8006246:	f107 0214 	add.w	r2, r7, #20
 800624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624c:	4413      	add	r3, r2
 800624e:	227e      	movs	r2, #126	; 0x7e
 8006250:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006252:	2300      	movs	r3, #0
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
 8006256:	e002      	b.n	800625e <gen_numname+0xd2>
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	3301      	adds	r3, #1
 800625c:	627b      	str	r3, [r7, #36]	; 0x24
 800625e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	429a      	cmp	r2, r3
 8006264:	d205      	bcs.n	8006272 <gen_numname+0xe6>
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	4413      	add	r3, r2
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b20      	cmp	r3, #32
 8006270:	d1f2      	bne.n	8006258 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	2b07      	cmp	r3, #7
 8006276:	d807      	bhi.n	8006288 <gen_numname+0xfc>
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	1c5a      	adds	r2, r3, #1
 800627c:	62ba      	str	r2, [r7, #40]	; 0x28
 800627e:	3330      	adds	r3, #48	; 0x30
 8006280:	443b      	add	r3, r7
 8006282:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006286:	e000      	b.n	800628a <gen_numname+0xfe>
 8006288:	2120      	movs	r1, #32
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	627a      	str	r2, [r7, #36]	; 0x24
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4413      	add	r3, r2
 8006294:	460a      	mov	r2, r1
 8006296:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	2b07      	cmp	r3, #7
 800629c:	d9e9      	bls.n	8006272 <gen_numname+0xe6>
}
 800629e:	bf00      	nop
 80062a0:	bf00      	nop
 80062a2:	3730      	adds	r7, #48	; 0x30
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80062b4:	230b      	movs	r3, #11
 80062b6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	0852      	lsrs	r2, r2, #1
 80062be:	01db      	lsls	r3, r3, #7
 80062c0:	4313      	orrs	r3, r2
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	1c59      	adds	r1, r3, #1
 80062c8:	6079      	str	r1, [r7, #4]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	4413      	add	r3, r2
 80062ce:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	60bb      	str	r3, [r7, #8]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1ed      	bne.n	80062b8 <sum_sfn+0x10>
	return sum;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b086      	sub	sp, #24
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80062f4:	2304      	movs	r3, #4
 80062f6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80062fe:	23ff      	movs	r3, #255	; 0xff
 8006300:	757b      	strb	r3, [r7, #21]
 8006302:	23ff      	movs	r3, #255	; 0xff
 8006304:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8006306:	e081      	b.n	800640c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	69db      	ldr	r3, [r3, #28]
 800630c:	4619      	mov	r1, r3
 800630e:	6938      	ldr	r0, [r7, #16]
 8006310:	f7ff f838 	bl	8005384 <move_window>
 8006314:	4603      	mov	r3, r0
 8006316:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006318:	7dfb      	ldrb	r3, [r7, #23]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d17c      	bne.n	8006418 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8006326:	7dbb      	ldrb	r3, [r7, #22]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d102      	bne.n	8006332 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800632c:	2304      	movs	r3, #4
 800632e:	75fb      	strb	r3, [r7, #23]
 8006330:	e077      	b.n	8006422 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	330b      	adds	r3, #11
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800633e:	73fb      	strb	r3, [r7, #15]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	7bfa      	ldrb	r2, [r7, #15]
 8006344:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8006346:	7dbb      	ldrb	r3, [r7, #22]
 8006348:	2be5      	cmp	r3, #229	; 0xe5
 800634a:	d00e      	beq.n	800636a <dir_read+0x80>
 800634c:	7dbb      	ldrb	r3, [r7, #22]
 800634e:	2b2e      	cmp	r3, #46	; 0x2e
 8006350:	d00b      	beq.n	800636a <dir_read+0x80>
 8006352:	7bfb      	ldrb	r3, [r7, #15]
 8006354:	f023 0320 	bic.w	r3, r3, #32
 8006358:	2b08      	cmp	r3, #8
 800635a:	bf0c      	ite	eq
 800635c:	2301      	moveq	r3, #1
 800635e:	2300      	movne	r3, #0
 8006360:	b2db      	uxtb	r3, r3
 8006362:	461a      	mov	r2, r3
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	4293      	cmp	r3, r2
 8006368:	d002      	beq.n	8006370 <dir_read+0x86>
				ord = 0xFF;
 800636a:	23ff      	movs	r3, #255	; 0xff
 800636c:	757b      	strb	r3, [r7, #21]
 800636e:	e044      	b.n	80063fa <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	2b0f      	cmp	r3, #15
 8006374:	d12f      	bne.n	80063d6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8006376:	7dbb      	ldrb	r3, [r7, #22]
 8006378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00d      	beq.n	800639c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	7b5b      	ldrb	r3, [r3, #13]
 8006386:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8006388:	7dbb      	ldrb	r3, [r7, #22]
 800638a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800638e:	75bb      	strb	r3, [r7, #22]
 8006390:	7dbb      	ldrb	r3, [r7, #22]
 8006392:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	695a      	ldr	r2, [r3, #20]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800639c:	7dba      	ldrb	r2, [r7, #22]
 800639e:	7d7b      	ldrb	r3, [r7, #21]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d115      	bne.n	80063d0 <dir_read+0xe6>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	330d      	adds	r3, #13
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	7d3a      	ldrb	r2, [r7, #20]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d10e      	bne.n	80063d0 <dir_read+0xe6>
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	691a      	ldr	r2, [r3, #16]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	4619      	mov	r1, r3
 80063bc:	4610      	mov	r0, r2
 80063be:	f7ff fe19 	bl	8005ff4 <pick_lfn>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <dir_read+0xe6>
 80063c8:	7d7b      	ldrb	r3, [r7, #21]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	e000      	b.n	80063d2 <dir_read+0xe8>
 80063d0:	23ff      	movs	r3, #255	; 0xff
 80063d2:	757b      	strb	r3, [r7, #21]
 80063d4:	e011      	b.n	80063fa <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80063d6:	7d7b      	ldrb	r3, [r7, #21]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d109      	bne.n	80063f0 <dir_read+0x106>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff ff61 	bl	80062a8 <sum_sfn>
 80063e6:	4603      	mov	r3, r0
 80063e8:	461a      	mov	r2, r3
 80063ea:	7d3b      	ldrb	r3, [r7, #20]
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d015      	beq.n	800641c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063f6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80063f8:	e010      	b.n	800641c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80063fa:	2100      	movs	r1, #0
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff fc2c 	bl	8005c5a <dir_next>
 8006402:	4603      	mov	r3, r0
 8006404:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006406:	7dfb      	ldrb	r3, [r7, #23]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d109      	bne.n	8006420 <dir_read+0x136>
	while (dp->sect) {
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	2b00      	cmp	r3, #0
 8006412:	f47f af79 	bne.w	8006308 <dir_read+0x1e>
 8006416:	e004      	b.n	8006422 <dir_read+0x138>
		if (res != FR_OK) break;
 8006418:	bf00      	nop
 800641a:	e002      	b.n	8006422 <dir_read+0x138>
					break;
 800641c:	bf00      	nop
 800641e:	e000      	b.n	8006422 <dir_read+0x138>
		if (res != FR_OK) break;
 8006420:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006422:	7dfb      	ldrb	r3, [r7, #23]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <dir_read+0x144>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	61da      	str	r2, [r3, #28]
	return res;
 800642e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006446:	2100      	movs	r1, #0
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff fb7d 	bl	8005b48 <dir_sdi>
 800644e:	4603      	mov	r3, r0
 8006450:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006452:	7dfb      	ldrb	r3, [r7, #23]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <dir_find+0x24>
 8006458:	7dfb      	ldrb	r3, [r7, #23]
 800645a:	e0a9      	b.n	80065b0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800645c:	23ff      	movs	r3, #255	; 0xff
 800645e:	753b      	strb	r3, [r7, #20]
 8006460:	7d3b      	ldrb	r3, [r7, #20]
 8006462:	757b      	strb	r3, [r7, #21]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800646a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	4619      	mov	r1, r3
 8006472:	6938      	ldr	r0, [r7, #16]
 8006474:	f7fe ff86 	bl	8005384 <move_window>
 8006478:	4603      	mov	r3, r0
 800647a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800647c:	7dfb      	ldrb	r3, [r7, #23]
 800647e:	2b00      	cmp	r3, #0
 8006480:	f040 8090 	bne.w	80065a4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800648c:	7dbb      	ldrb	r3, [r7, #22]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d102      	bne.n	8006498 <dir_find+0x60>
 8006492:	2304      	movs	r3, #4
 8006494:	75fb      	strb	r3, [r7, #23]
 8006496:	e08a      	b.n	80065ae <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	330b      	adds	r3, #11
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064a4:	73fb      	strb	r3, [r7, #15]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	7bfa      	ldrb	r2, [r7, #15]
 80064aa:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80064ac:	7dbb      	ldrb	r3, [r7, #22]
 80064ae:	2be5      	cmp	r3, #229	; 0xe5
 80064b0:	d007      	beq.n	80064c2 <dir_find+0x8a>
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	f003 0308 	and.w	r3, r3, #8
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d009      	beq.n	80064d0 <dir_find+0x98>
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	2b0f      	cmp	r3, #15
 80064c0:	d006      	beq.n	80064d0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80064c2:	23ff      	movs	r3, #255	; 0xff
 80064c4:	757b      	strb	r3, [r7, #21]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
 80064ce:	e05e      	b.n	800658e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	2b0f      	cmp	r3, #15
 80064d4:	d136      	bne.n	8006544 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80064dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d154      	bne.n	800658e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80064e4:	7dbb      	ldrb	r3, [r7, #22]
 80064e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00d      	beq.n	800650a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	7b5b      	ldrb	r3, [r3, #13]
 80064f4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80064f6:	7dbb      	ldrb	r3, [r7, #22]
 80064f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064fc:	75bb      	strb	r3, [r7, #22]
 80064fe:	7dbb      	ldrb	r3, [r7, #22]
 8006500:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	695a      	ldr	r2, [r3, #20]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800650a:	7dba      	ldrb	r2, [r7, #22]
 800650c:	7d7b      	ldrb	r3, [r7, #21]
 800650e:	429a      	cmp	r2, r3
 8006510:	d115      	bne.n	800653e <dir_find+0x106>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	330d      	adds	r3, #13
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	7d3a      	ldrb	r2, [r7, #20]
 800651c:	429a      	cmp	r2, r3
 800651e:	d10e      	bne.n	800653e <dir_find+0x106>
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	691a      	ldr	r2, [r3, #16]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	4619      	mov	r1, r3
 800652a:	4610      	mov	r0, r2
 800652c:	f7ff fcf2 	bl	8005f14 <cmp_lfn>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <dir_find+0x106>
 8006536:	7d7b      	ldrb	r3, [r7, #21]
 8006538:	3b01      	subs	r3, #1
 800653a:	b2db      	uxtb	r3, r3
 800653c:	e000      	b.n	8006540 <dir_find+0x108>
 800653e:	23ff      	movs	r3, #255	; 0xff
 8006540:	757b      	strb	r3, [r7, #21]
 8006542:	e024      	b.n	800658e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006544:	7d7b      	ldrb	r3, [r7, #21]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d109      	bne.n	800655e <dir_find+0x126>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff feaa 	bl	80062a8 <sum_sfn>
 8006554:	4603      	mov	r3, r0
 8006556:	461a      	mov	r2, r3
 8006558:	7d3b      	ldrb	r3, [r7, #20]
 800655a:	4293      	cmp	r3, r2
 800655c:	d024      	beq.n	80065a8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10a      	bne.n	8006582 <dir_find+0x14a>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a18      	ldr	r0, [r3, #32]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	3324      	adds	r3, #36	; 0x24
 8006574:	220b      	movs	r2, #11
 8006576:	4619      	mov	r1, r3
 8006578:	f7fe fd12 	bl	8004fa0 <mem_cmp>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d014      	beq.n	80065ac <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006582:	23ff      	movs	r3, #255	; 0xff
 8006584:	757b      	strb	r3, [r7, #21]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800658c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800658e:	2100      	movs	r1, #0
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff fb62 	bl	8005c5a <dir_next>
 8006596:	4603      	mov	r3, r0
 8006598:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800659a:	7dfb      	ldrb	r3, [r7, #23]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f43f af65 	beq.w	800646c <dir_find+0x34>
 80065a2:	e004      	b.n	80065ae <dir_find+0x176>
		if (res != FR_OK) break;
 80065a4:	bf00      	nop
 80065a6:	e002      	b.n	80065ae <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80065a8:	bf00      	nop
 80065aa:	e000      	b.n	80065ae <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80065ac:	bf00      	nop

	return res;
 80065ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08c      	sub	sp, #48	; 0x30
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80065cc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <dir_register+0x20>
 80065d4:	2306      	movs	r3, #6
 80065d6:	e0e0      	b.n	800679a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80065d8:	2300      	movs	r3, #0
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
 80065dc:	e002      	b.n	80065e4 <dir_register+0x2c>
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	3301      	adds	r3, #1
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	691a      	ldr	r2, [r3, #16]
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	4413      	add	r3, r2
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1f4      	bne.n	80065de <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80065fa:	f107 030c 	add.w	r3, r7, #12
 80065fe:	220c      	movs	r2, #12
 8006600:	4618      	mov	r0, r3
 8006602:	f7fe fc91 	bl	8004f28 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006606:	7dfb      	ldrb	r3, [r7, #23]
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d032      	beq.n	8006676 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2240      	movs	r2, #64	; 0x40
 8006614:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006618:	2301      	movs	r3, #1
 800661a:	62bb      	str	r3, [r7, #40]	; 0x28
 800661c:	e016      	b.n	800664c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	f107 010c 	add.w	r1, r7, #12
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	f7ff fdad 	bl	800618c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7ff ff00 	bl	8006438 <dir_find>
 8006638:	4603      	mov	r3, r0
 800663a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800663e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006642:	2b00      	cmp	r3, #0
 8006644:	d106      	bne.n	8006654 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	3301      	adds	r3, #1
 800664a:	62bb      	str	r3, [r7, #40]	; 0x28
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	2b63      	cmp	r3, #99	; 0x63
 8006650:	d9e5      	bls.n	800661e <dir_register+0x66>
 8006652:	e000      	b.n	8006656 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006654:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006658:	2b64      	cmp	r3, #100	; 0x64
 800665a:	d101      	bne.n	8006660 <dir_register+0xa8>
 800665c:	2307      	movs	r3, #7
 800665e:	e09c      	b.n	800679a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006660:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006664:	2b04      	cmp	r3, #4
 8006666:	d002      	beq.n	800666e <dir_register+0xb6>
 8006668:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800666c:	e095      	b.n	800679a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800666e:	7dfa      	ldrb	r2, [r7, #23]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006676:	7dfb      	ldrb	r3, [r7, #23]
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d007      	beq.n	8006690 <dir_register+0xd8>
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	330c      	adds	r3, #12
 8006684:	4a47      	ldr	r2, [pc, #284]	; (80067a4 <dir_register+0x1ec>)
 8006686:	fba2 2303 	umull	r2, r3, r2, r3
 800668a:	089b      	lsrs	r3, r3, #2
 800668c:	3301      	adds	r3, #1
 800668e:	e000      	b.n	8006692 <dir_register+0xda>
 8006690:	2301      	movs	r3, #1
 8006692:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006694:	6a39      	ldr	r1, [r7, #32]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff fbb5 	bl	8005e06 <dir_alloc>
 800669c:	4603      	mov	r3, r0
 800669e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80066a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d148      	bne.n	800673c <dir_register+0x184>
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	623b      	str	r3, [r7, #32]
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d042      	beq.n	800673c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	695a      	ldr	r2, [r3, #20]
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	015b      	lsls	r3, r3, #5
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	4619      	mov	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff fa40 	bl	8005b48 <dir_sdi>
 80066c8:	4603      	mov	r3, r0
 80066ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80066ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d132      	bne.n	800673c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3324      	adds	r3, #36	; 0x24
 80066da:	4618      	mov	r0, r3
 80066dc:	f7ff fde4 	bl	80062a8 <sum_sfn>
 80066e0:	4603      	mov	r3, r0
 80066e2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	4619      	mov	r1, r3
 80066ea:	69f8      	ldr	r0, [r7, #28]
 80066ec:	f7fe fe4a 	bl	8005384 <move_window>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80066f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d11d      	bne.n	800673a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	6918      	ldr	r0, [r3, #16]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a19      	ldr	r1, [r3, #32]
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	b2da      	uxtb	r2, r3
 800670a:	7efb      	ldrb	r3, [r7, #27]
 800670c:	f7ff fcd6 	bl	80060bc <put_lfn>
				fs->wflag = 1;
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	2201      	movs	r2, #1
 8006714:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006716:	2100      	movs	r1, #0
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff fa9e 	bl	8005c5a <dir_next>
 800671e:	4603      	mov	r3, r0
 8006720:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006724:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006728:	2b00      	cmp	r3, #0
 800672a:	d107      	bne.n	800673c <dir_register+0x184>
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	3b01      	subs	r3, #1
 8006730:	623b      	str	r3, [r7, #32]
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1d5      	bne.n	80066e4 <dir_register+0x12c>
 8006738:	e000      	b.n	800673c <dir_register+0x184>
				if (res != FR_OK) break;
 800673a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800673c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006740:	2b00      	cmp	r3, #0
 8006742:	d128      	bne.n	8006796 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	4619      	mov	r1, r3
 800674a:	69f8      	ldr	r0, [r7, #28]
 800674c:	f7fe fe1a 	bl	8005384 <move_window>
 8006750:	4603      	mov	r3, r0
 8006752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006756:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800675a:	2b00      	cmp	r3, #0
 800675c:	d11b      	bne.n	8006796 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	2220      	movs	r2, #32
 8006764:	2100      	movs	r1, #0
 8006766:	4618      	mov	r0, r3
 8006768:	f7fe fbff 	bl	8004f6a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a18      	ldr	r0, [r3, #32]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3324      	adds	r3, #36	; 0x24
 8006774:	220b      	movs	r2, #11
 8006776:	4619      	mov	r1, r3
 8006778:	f7fe fbd6 	bl	8004f28 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	330c      	adds	r3, #12
 8006788:	f002 0218 	and.w	r2, r2, #24
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	2201      	movs	r2, #1
 8006794:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800679a:	4618      	mov	r0, r3
 800679c:	3730      	adds	r7, #48	; 0x30
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	4ec4ec4f 	.word	0x4ec4ec4f

080067a8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2200      	movs	r2, #0
 80067bc:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 80c9 	beq.w	800695a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067d0:	d032      	beq.n	8006838 <get_fileinfo+0x90>
			i = j = 0;
 80067d2:	2300      	movs	r3, #0
 80067d4:	61bb      	str	r3, [r7, #24]
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80067da:	e01b      	b.n	8006814 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80067dc:	89fb      	ldrh	r3, [r7, #14]
 80067de:	2100      	movs	r1, #0
 80067e0:	4618      	mov	r0, r3
 80067e2:	f001 fb69 	bl	8007eb8 <ff_convert>
 80067e6:	4603      	mov	r3, r0
 80067e8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80067ea:	89fb      	ldrh	r3, [r7, #14]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d102      	bne.n	80067f6 <get_fileinfo+0x4e>
 80067f0:	2300      	movs	r3, #0
 80067f2:	61fb      	str	r3, [r7, #28]
 80067f4:	e01a      	b.n	800682c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	2bfe      	cmp	r3, #254	; 0xfe
 80067fa:	d902      	bls.n	8006802 <get_fileinfo+0x5a>
 80067fc:	2300      	movs	r3, #0
 80067fe:	61fb      	str	r3, [r7, #28]
 8006800:	e014      	b.n	800682c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	61fa      	str	r2, [r7, #28]
 8006808:	89fa      	ldrh	r2, [r7, #14]
 800680a:	b2d1      	uxtb	r1, r2
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	4413      	add	r3, r2
 8006810:	460a      	mov	r2, r1
 8006812:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	1c59      	adds	r1, r3, #1
 800681c:	61b9      	str	r1, [r7, #24]
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	4413      	add	r3, r2
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	81fb      	strh	r3, [r7, #14]
 8006826:	89fb      	ldrh	r3, [r7, #14]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1d7      	bne.n	80067dc <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	4413      	add	r3, r2
 8006832:	3316      	adds	r3, #22
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8006838:	2300      	movs	r3, #0
 800683a:	61bb      	str	r3, [r7, #24]
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	4413      	add	r3, r2
 8006846:	3316      	adds	r3, #22
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800684c:	e04c      	b.n	80068e8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1a      	ldr	r2, [r3, #32]
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	1c59      	adds	r1, r3, #1
 8006856:	61f9      	str	r1, [r7, #28]
 8006858:	4413      	add	r3, r2
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800685e:	7dfb      	ldrb	r3, [r7, #23]
 8006860:	2b20      	cmp	r3, #32
 8006862:	d100      	bne.n	8006866 <get_fileinfo+0xbe>
 8006864:	e040      	b.n	80068e8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	2b05      	cmp	r3, #5
 800686a:	d101      	bne.n	8006870 <get_fileinfo+0xc8>
 800686c:	23e5      	movs	r3, #229	; 0xe5
 800686e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	2b09      	cmp	r3, #9
 8006874:	d10f      	bne.n	8006896 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8006876:	89bb      	ldrh	r3, [r7, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d105      	bne.n	8006888 <get_fileinfo+0xe0>
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	4413      	add	r3, r2
 8006882:	3316      	adds	r3, #22
 8006884:	222e      	movs	r2, #46	; 0x2e
 8006886:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	61ba      	str	r2, [r7, #24]
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	4413      	add	r3, r2
 8006892:	222e      	movs	r2, #46	; 0x2e
 8006894:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	4413      	add	r3, r2
 800689c:	3309      	adds	r3, #9
 800689e:	7dfa      	ldrb	r2, [r7, #23]
 80068a0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80068a2:	89bb      	ldrh	r3, [r7, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d11c      	bne.n	80068e2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
 80068aa:	2b40      	cmp	r3, #64	; 0x40
 80068ac:	d913      	bls.n	80068d6 <get_fileinfo+0x12e>
 80068ae:	7dfb      	ldrb	r3, [r7, #23]
 80068b0:	2b5a      	cmp	r3, #90	; 0x5a
 80068b2:	d810      	bhi.n	80068d6 <get_fileinfo+0x12e>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	330c      	adds	r3, #12
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d901      	bls.n	80068c8 <get_fileinfo+0x120>
 80068c4:	2310      	movs	r3, #16
 80068c6:	e000      	b.n	80068ca <get_fileinfo+0x122>
 80068c8:	2308      	movs	r3, #8
 80068ca:	4013      	ands	r3, r2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 80068d0:	7dfb      	ldrb	r3, [r7, #23]
 80068d2:	3320      	adds	r3, #32
 80068d4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	4413      	add	r3, r2
 80068dc:	3316      	adds	r3, #22
 80068de:	7dfa      	ldrb	r2, [r7, #23]
 80068e0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	3301      	adds	r3, #1
 80068e6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	2b0a      	cmp	r3, #10
 80068ec:	d9af      	bls.n	800684e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80068ee:	89bb      	ldrh	r3, [r7, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10d      	bne.n	8006910 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	4413      	add	r3, r2
 80068fa:	3316      	adds	r3, #22
 80068fc:	2200      	movs	r2, #0
 80068fe:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	330c      	adds	r3, #12
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <get_fileinfo+0x168>
 800690c:	2300      	movs	r3, #0
 800690e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8006910:	683a      	ldr	r2, [r7, #0]
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	4413      	add	r3, r2
 8006916:	3309      	adds	r3, #9
 8006918:	2200      	movs	r2, #0
 800691a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	7ada      	ldrb	r2, [r3, #11]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	331c      	adds	r3, #28
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe fa91 	bl	8004e54 <ld_dword>
 8006932:	4602      	mov	r2, r0
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	3316      	adds	r3, #22
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe fa88 	bl	8004e54 <ld_dword>
 8006944:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	b29a      	uxth	r2, r3
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	80da      	strh	r2, [r3, #6]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	0c1b      	lsrs	r3, r3, #16
 8006952:	b29a      	uxth	r2, r3
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	809a      	strh	r2, [r3, #4]
 8006958:	e000      	b.n	800695c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800695a:	bf00      	nop
}
 800695c:	3720      	adds	r7, #32
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
	...

08006964 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08a      	sub	sp, #40	; 0x28
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	613b      	str	r3, [r7, #16]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	2300      	movs	r3, #0
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	61ba      	str	r2, [r7, #24]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	4413      	add	r3, r2
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006992:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006994:	2b1f      	cmp	r3, #31
 8006996:	d940      	bls.n	8006a1a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006998:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800699a:	2b2f      	cmp	r3, #47	; 0x2f
 800699c:	d006      	beq.n	80069ac <create_name+0x48>
 800699e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069a0:	2b5c      	cmp	r3, #92	; 0x5c
 80069a2:	d110      	bne.n	80069c6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80069a4:	e002      	b.n	80069ac <create_name+0x48>
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	3301      	adds	r3, #1
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	4413      	add	r3, r2
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	2b2f      	cmp	r3, #47	; 0x2f
 80069b6:	d0f6      	beq.n	80069a6 <create_name+0x42>
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	4413      	add	r3, r2
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b5c      	cmp	r3, #92	; 0x5c
 80069c2:	d0f0      	beq.n	80069a6 <create_name+0x42>
			break;
 80069c4:	e02a      	b.n	8006a1c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2bfe      	cmp	r3, #254	; 0xfe
 80069ca:	d901      	bls.n	80069d0 <create_name+0x6c>
 80069cc:	2306      	movs	r3, #6
 80069ce:	e17d      	b.n	8006ccc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80069d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80069d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069d8:	2101      	movs	r1, #1
 80069da:	4618      	mov	r0, r3
 80069dc:	f001 fa6c 	bl	8007eb8 <ff_convert>
 80069e0:	4603      	mov	r3, r0
 80069e2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80069e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <create_name+0x8a>
 80069ea:	2306      	movs	r3, #6
 80069ec:	e16e      	b.n	8006ccc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80069ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069f0:	2b7f      	cmp	r3, #127	; 0x7f
 80069f2:	d809      	bhi.n	8006a08 <create_name+0xa4>
 80069f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069f6:	4619      	mov	r1, r3
 80069f8:	488d      	ldr	r0, [pc, #564]	; (8006c30 <create_name+0x2cc>)
 80069fa:	f7fe faf8 	bl	8004fee <chk_chr>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <create_name+0xa4>
 8006a04:	2306      	movs	r3, #6
 8006a06:	e161      	b.n	8006ccc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	617a      	str	r2, [r7, #20]
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4413      	add	r3, r2
 8006a14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a16:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006a18:	e7b4      	b.n	8006984 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006a1a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	441a      	add	r2, r3
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006a26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a28:	2b1f      	cmp	r3, #31
 8006a2a:	d801      	bhi.n	8006a30 <create_name+0xcc>
 8006a2c:	2304      	movs	r3, #4
 8006a2e:	e000      	b.n	8006a32 <create_name+0xce>
 8006a30:	2300      	movs	r3, #0
 8006a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006a36:	e011      	b.n	8006a5c <create_name+0xf8>
		w = lfn[di - 1];
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4413      	add	r3, r2
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006a4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a4c:	2b20      	cmp	r3, #32
 8006a4e:	d002      	beq.n	8006a56 <create_name+0xf2>
 8006a50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a52:	2b2e      	cmp	r3, #46	; 0x2e
 8006a54:	d106      	bne.n	8006a64 <create_name+0x100>
		di--;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1ea      	bne.n	8006a38 <create_name+0xd4>
 8006a62:	e000      	b.n	8006a66 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006a64:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	2200      	movs	r2, #0
 8006a70:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <create_name+0x118>
 8006a78:	2306      	movs	r3, #6
 8006a7a:	e127      	b.n	8006ccc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	3324      	adds	r3, #36	; 0x24
 8006a80:	220b      	movs	r2, #11
 8006a82:	2120      	movs	r1, #32
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe fa70 	bl	8004f6a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	61bb      	str	r3, [r7, #24]
 8006a8e:	e002      	b.n	8006a96 <create_name+0x132>
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	3301      	adds	r3, #1
 8006a94:	61bb      	str	r3, [r7, #24]
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	2b20      	cmp	r3, #32
 8006aa2:	d0f5      	beq.n	8006a90 <create_name+0x12c>
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4413      	add	r3, r2
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	2b2e      	cmp	r3, #46	; 0x2e
 8006ab0:	d0ee      	beq.n	8006a90 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d009      	beq.n	8006acc <create_name+0x168>
 8006ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006abc:	f043 0303 	orr.w	r3, r3, #3
 8006ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006ac4:	e002      	b.n	8006acc <create_name+0x168>
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d009      	beq.n	8006ae6 <create_name+0x182>
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8006ae4:	d1ef      	bne.n	8006ac6 <create_name+0x162>

	i = b = 0; ni = 8;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006aec:	2300      	movs	r3, #0
 8006aee:	623b      	str	r3, [r7, #32]
 8006af0:	2308      	movs	r3, #8
 8006af2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	61ba      	str	r2, [r7, #24]
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006b04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 8090 	beq.w	8006c2c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006b0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b0e:	2b20      	cmp	r3, #32
 8006b10:	d006      	beq.n	8006b20 <create_name+0x1bc>
 8006b12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b14:	2b2e      	cmp	r3, #46	; 0x2e
 8006b16:	d10a      	bne.n	8006b2e <create_name+0x1ca>
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d006      	beq.n	8006b2e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b24:	f043 0303 	orr.w	r3, r3, #3
 8006b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b2c:	e07d      	b.n	8006c2a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006b2e:	6a3a      	ldr	r2, [r7, #32]
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d203      	bcs.n	8006b3e <create_name+0x1da>
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d123      	bne.n	8006b86 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	2b0b      	cmp	r3, #11
 8006b42:	d106      	bne.n	8006b52 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b48:	f043 0303 	orr.w	r3, r3, #3
 8006b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b50:	e075      	b.n	8006c3e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d005      	beq.n	8006b66 <create_name+0x202>
 8006b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b5e:	f043 0303 	orr.w	r3, r3, #3
 8006b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d866      	bhi.n	8006c3c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	61bb      	str	r3, [r7, #24]
 8006b72:	2308      	movs	r3, #8
 8006b74:	623b      	str	r3, [r7, #32]
 8006b76:	230b      	movs	r3, #11
 8006b78:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006b7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006b84:	e051      	b.n	8006c2a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006b86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b88:	2b7f      	cmp	r3, #127	; 0x7f
 8006b8a:	d914      	bls.n	8006bb6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006b8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b8e:	2100      	movs	r1, #0
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 f991 	bl	8007eb8 <ff_convert>
 8006b96:	4603      	mov	r3, r0
 8006b98:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006b9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d004      	beq.n	8006baa <create_name+0x246>
 8006ba0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ba2:	3b80      	subs	r3, #128	; 0x80
 8006ba4:	4a23      	ldr	r2, [pc, #140]	; (8006c34 <create_name+0x2d0>)
 8006ba6:	5cd3      	ldrb	r3, [r2, r3]
 8006ba8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006baa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bae:	f043 0302 	orr.w	r3, r3, #2
 8006bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006bb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d007      	beq.n	8006bcc <create_name+0x268>
 8006bbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	481d      	ldr	r0, [pc, #116]	; (8006c38 <create_name+0x2d4>)
 8006bc2:	f7fe fa14 	bl	8004fee <chk_chr>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d008      	beq.n	8006bde <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006bcc:	235f      	movs	r3, #95	; 0x5f
 8006bce:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bd4:	f043 0303 	orr.w	r3, r3, #3
 8006bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006bdc:	e01b      	b.n	8006c16 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006bde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006be0:	2b40      	cmp	r3, #64	; 0x40
 8006be2:	d909      	bls.n	8006bf8 <create_name+0x294>
 8006be4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006be6:	2b5a      	cmp	r3, #90	; 0x5a
 8006be8:	d806      	bhi.n	8006bf8 <create_name+0x294>
					b |= 2;
 8006bea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bee:	f043 0302 	orr.w	r3, r3, #2
 8006bf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006bf6:	e00e      	b.n	8006c16 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006bf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bfa:	2b60      	cmp	r3, #96	; 0x60
 8006bfc:	d90b      	bls.n	8006c16 <create_name+0x2b2>
 8006bfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c00:	2b7a      	cmp	r3, #122	; 0x7a
 8006c02:	d808      	bhi.n	8006c16 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006c04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c08:	f043 0301 	orr.w	r3, r3, #1
 8006c0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c12:	3b20      	subs	r3, #32
 8006c14:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	623a      	str	r2, [r7, #32]
 8006c1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c1e:	b2d1      	uxtb	r1, r2
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	4413      	add	r3, r2
 8006c24:	460a      	mov	r2, r1
 8006c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006c2a:	e763      	b.n	8006af4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006c2c:	bf00      	nop
 8006c2e:	e006      	b.n	8006c3e <create_name+0x2da>
 8006c30:	08008bc0 	.word	0x08008bc0
 8006c34:	08008c20 	.word	0x08008c20
 8006c38:	08008bcc 	.word	0x08008bcc
			if (si > di) break;			/* No extension */
 8006c3c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c44:	2be5      	cmp	r3, #229	; 0xe5
 8006c46:	d103      	bne.n	8006c50 <create_name+0x2ec>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2205      	movs	r2, #5
 8006c4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	2b08      	cmp	r3, #8
 8006c54:	d104      	bne.n	8006c60 <create_name+0x2fc>
 8006c56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006c60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c64:	f003 030c 	and.w	r3, r3, #12
 8006c68:	2b0c      	cmp	r3, #12
 8006c6a:	d005      	beq.n	8006c78 <create_name+0x314>
 8006c6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c70:	f003 0303 	and.w	r3, r3, #3
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d105      	bne.n	8006c84 <create_name+0x320>
 8006c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c7c:	f043 0302 	orr.w	r3, r3, #2
 8006c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d117      	bne.n	8006cc0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006c90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c94:	f003 0303 	and.w	r3, r3, #3
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d105      	bne.n	8006ca8 <create_name+0x344>
 8006c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ca0:	f043 0310 	orr.w	r3, r3, #16
 8006ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006ca8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cac:	f003 030c 	and.w	r3, r3, #12
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d105      	bne.n	8006cc0 <create_name+0x35c>
 8006cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cb8:	f043 0308 	orr.w	r3, r3, #8
 8006cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006cc6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006cca:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3728      	adds	r7, #40	; 0x28
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006ce8:	e002      	b.n	8006cf0 <follow_path+0x1c>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	3301      	adds	r3, #1
 8006cee:	603b      	str	r3, [r7, #0]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b2f      	cmp	r3, #47	; 0x2f
 8006cf6:	d0f8      	beq.n	8006cea <follow_path+0x16>
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b5c      	cmp	r3, #92	; 0x5c
 8006cfe:	d0f4      	beq.n	8006cea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	2200      	movs	r2, #0
 8006d04:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	2b1f      	cmp	r3, #31
 8006d0c:	d80a      	bhi.n	8006d24 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2280      	movs	r2, #128	; 0x80
 8006d12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006d16:	2100      	movs	r1, #0
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7fe ff15 	bl	8005b48 <dir_sdi>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	75fb      	strb	r3, [r7, #23]
 8006d22:	e048      	b.n	8006db6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006d24:	463b      	mov	r3, r7
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff fe1b 	bl	8006964 <create_name>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006d32:	7dfb      	ldrb	r3, [r7, #23]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d139      	bne.n	8006dac <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7ff fb7d 	bl	8006438 <dir_find>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006d48:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006d4a:	7dfb      	ldrb	r3, [r7, #23]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00a      	beq.n	8006d66 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006d50:	7dfb      	ldrb	r3, [r7, #23]
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	d12c      	bne.n	8006db0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006d56:	7afb      	ldrb	r3, [r7, #11]
 8006d58:	f003 0304 	and.w	r3, r3, #4
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d127      	bne.n	8006db0 <follow_path+0xdc>
 8006d60:	2305      	movs	r3, #5
 8006d62:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006d64:	e024      	b.n	8006db0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006d66:	7afb      	ldrb	r3, [r7, #11]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d121      	bne.n	8006db4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	799b      	ldrb	r3, [r3, #6]
 8006d74:	f003 0310 	and.w	r3, r3, #16
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d102      	bne.n	8006d82 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006d7c:	2305      	movs	r3, #5
 8006d7e:	75fb      	strb	r3, [r7, #23]
 8006d80:	e019      	b.n	8006db6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	8992      	ldrh	r2, [r2, #12]
 8006d90:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d94:	fb00 f202 	mul.w	r2, r0, r2
 8006d98:	1a9b      	subs	r3, r3, r2
 8006d9a:	440b      	add	r3, r1
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f7ff f878 	bl	8005e94 <ld_clust>
 8006da4:	4602      	mov	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006daa:	e7bb      	b.n	8006d24 <follow_path+0x50>
			if (res != FR_OK) break;
 8006dac:	bf00      	nop
 8006dae:	e002      	b.n	8006db6 <follow_path+0xe2>
				break;
 8006db0:	bf00      	nop
 8006db2:	e000      	b.n	8006db6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006db4:	bf00      	nop
			}
		}
	}

	return res;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dcc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d031      	beq.n	8006e3a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	e002      	b.n	8006de4 <get_ldnumber+0x24>
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	3301      	adds	r3, #1
 8006de2:	617b      	str	r3, [r7, #20]
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2b1f      	cmp	r3, #31
 8006dea:	d903      	bls.n	8006df4 <get_ldnumber+0x34>
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	2b3a      	cmp	r3, #58	; 0x3a
 8006df2:	d1f4      	bne.n	8006dde <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2b3a      	cmp	r3, #58	; 0x3a
 8006dfa:	d11c      	bne.n	8006e36 <get_ldnumber+0x76>
			tp = *path;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	60fa      	str	r2, [r7, #12]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	3b30      	subs	r3, #48	; 0x30
 8006e0c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b09      	cmp	r3, #9
 8006e12:	d80e      	bhi.n	8006e32 <get_ldnumber+0x72>
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d10a      	bne.n	8006e32 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d107      	bne.n	8006e32 <get_ldnumber+0x72>
					vol = (int)i;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	617b      	str	r3, [r7, #20]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	e002      	b.n	8006e3c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006e36:	2300      	movs	r3, #0
 8006e38:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006e3a:	693b      	ldr	r3, [r7, #16]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	70da      	strb	r2, [r3, #3]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e5e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7fe fa8e 	bl	8005384 <move_window>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <check_fs+0x2a>
 8006e6e:	2304      	movs	r3, #4
 8006e70:	e038      	b.n	8006ee4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3338      	adds	r3, #56	; 0x38
 8006e76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fd ffd2 	bl	8004e24 <ld_word>
 8006e80:	4603      	mov	r3, r0
 8006e82:	461a      	mov	r2, r3
 8006e84:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d001      	beq.n	8006e90 <check_fs+0x48>
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e029      	b.n	8006ee4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e96:	2be9      	cmp	r3, #233	; 0xe9
 8006e98:	d009      	beq.n	8006eae <check_fs+0x66>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ea0:	2beb      	cmp	r3, #235	; 0xeb
 8006ea2:	d11e      	bne.n	8006ee2 <check_fs+0x9a>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006eaa:	2b90      	cmp	r3, #144	; 0x90
 8006eac:	d119      	bne.n	8006ee2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3338      	adds	r3, #56	; 0x38
 8006eb2:	3336      	adds	r3, #54	; 0x36
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fd ffcd 	bl	8004e54 <ld_dword>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ec0:	4a0a      	ldr	r2, [pc, #40]	; (8006eec <check_fs+0xa4>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d101      	bne.n	8006eca <check_fs+0x82>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	e00c      	b.n	8006ee4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3338      	adds	r3, #56	; 0x38
 8006ece:	3352      	adds	r3, #82	; 0x52
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fd ffbf 	bl	8004e54 <ld_dword>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	4a05      	ldr	r2, [pc, #20]	; (8006ef0 <check_fs+0xa8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d101      	bne.n	8006ee2 <check_fs+0x9a>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	e000      	b.n	8006ee4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006ee2:	2302      	movs	r3, #2
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	00544146 	.word	0x00544146
 8006ef0:	33544146 	.word	0x33544146

08006ef4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b096      	sub	sp, #88	; 0x58
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	4613      	mov	r3, r2
 8006f00:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2200      	movs	r2, #0
 8006f06:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f7ff ff59 	bl	8006dc0 <get_ldnumber>
 8006f0e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	da01      	bge.n	8006f1a <find_volume+0x26>
 8006f16:	230b      	movs	r3, #11
 8006f18:	e265      	b.n	80073e6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006f1a:	4a9f      	ldr	r2, [pc, #636]	; (8007198 <find_volume+0x2a4>)
 8006f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f22:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <find_volume+0x3a>
 8006f2a:	230c      	movs	r3, #12
 8006f2c:	e25b      	b.n	80073e6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f32:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006f34:	79fb      	ldrb	r3, [r7, #7]
 8006f36:	f023 0301 	bic.w	r3, r3, #1
 8006f3a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d01a      	beq.n	8006f7a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f46:	785b      	ldrb	r3, [r3, #1]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fd fecd 	bl	8004ce8 <disk_status>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006f54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10c      	bne.n	8006f7a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006f60:	79fb      	ldrb	r3, [r7, #7]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d007      	beq.n	8006f76 <find_volume+0x82>
 8006f66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f6a:	f003 0304 	and.w	r3, r3, #4
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006f72:	230a      	movs	r3, #10
 8006f74:	e237      	b.n	80073e6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006f76:	2300      	movs	r3, #0
 8006f78:	e235      	b.n	80073e6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8a:	785b      	ldrb	r3, [r3, #1]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fd fec5 	bl	8004d1c <disk_initialize>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006f98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e21e      	b.n	80073e6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d007      	beq.n	8006fbe <find_volume+0xca>
 8006fae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fb2:	f003 0304 	and.w	r3, r3, #4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006fba:	230a      	movs	r3, #10
 8006fbc:	e213      	b.n	80073e6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	7858      	ldrb	r0, [r3, #1]
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	330c      	adds	r3, #12
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	2102      	movs	r1, #2
 8006fca:	f7fd ff0d 	bl	8004de8 <disk_ioctl>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <find_volume+0xe4>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e206      	b.n	80073e6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fda:	899b      	ldrh	r3, [r3, #12]
 8006fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe0:	d80d      	bhi.n	8006ffe <find_volume+0x10a>
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	899b      	ldrh	r3, [r3, #12]
 8006fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fea:	d308      	bcc.n	8006ffe <find_volume+0x10a>
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	899b      	ldrh	r3, [r3, #12]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff4:	899b      	ldrh	r3, [r3, #12]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <find_volume+0x10e>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e1f1      	b.n	80073e6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007006:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007008:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800700a:	f7ff ff1d 	bl	8006e48 <check_fs>
 800700e:	4603      	mov	r3, r0
 8007010:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007014:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007018:	2b02      	cmp	r3, #2
 800701a:	d149      	bne.n	80070b0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800701c:	2300      	movs	r3, #0
 800701e:	643b      	str	r3, [r7, #64]	; 0x40
 8007020:	e01e      	b.n	8007060 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007024:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800702a:	011b      	lsls	r3, r3, #4
 800702c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007030:	4413      	add	r3, r2
 8007032:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007036:	3304      	adds	r3, #4
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d006      	beq.n	800704c <find_volume+0x158>
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	3308      	adds	r3, #8
 8007042:	4618      	mov	r0, r3
 8007044:	f7fd ff06 	bl	8004e54 <ld_dword>
 8007048:	4602      	mov	r2, r0
 800704a:	e000      	b.n	800704e <find_volume+0x15a>
 800704c:	2200      	movs	r2, #0
 800704e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	3358      	adds	r3, #88	; 0x58
 8007054:	443b      	add	r3, r7
 8007056:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800705a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800705c:	3301      	adds	r3, #1
 800705e:	643b      	str	r3, [r7, #64]	; 0x40
 8007060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007062:	2b03      	cmp	r3, #3
 8007064:	d9dd      	bls.n	8007022 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007066:	2300      	movs	r3, #0
 8007068:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800706a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <find_volume+0x182>
 8007070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007072:	3b01      	subs	r3, #1
 8007074:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	3358      	adds	r3, #88	; 0x58
 800707c:	443b      	add	r3, r7
 800707e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007082:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <find_volume+0x1a2>
 800708a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800708c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800708e:	f7ff fedb 	bl	8006e48 <check_fs>
 8007092:	4603      	mov	r3, r0
 8007094:	e000      	b.n	8007098 <find_volume+0x1a4>
 8007096:	2303      	movs	r3, #3
 8007098:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800709c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d905      	bls.n	80070b0 <find_volume+0x1bc>
 80070a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070a6:	3301      	adds	r3, #1
 80070a8:	643b      	str	r3, [r7, #64]	; 0x40
 80070aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d9e2      	bls.n	8007076 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80070b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d101      	bne.n	80070bc <find_volume+0x1c8>
 80070b8:	2301      	movs	r3, #1
 80070ba:	e194      	b.n	80073e6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80070bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d901      	bls.n	80070c8 <find_volume+0x1d4>
 80070c4:	230d      	movs	r3, #13
 80070c6:	e18e      	b.n	80073e6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80070c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ca:	3338      	adds	r3, #56	; 0x38
 80070cc:	330b      	adds	r3, #11
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fd fea8 	bl	8004e24 <ld_word>
 80070d4:	4603      	mov	r3, r0
 80070d6:	461a      	mov	r2, r3
 80070d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070da:	899b      	ldrh	r3, [r3, #12]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d001      	beq.n	80070e4 <find_volume+0x1f0>
 80070e0:	230d      	movs	r3, #13
 80070e2:	e180      	b.n	80073e6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80070e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e6:	3338      	adds	r3, #56	; 0x38
 80070e8:	3316      	adds	r3, #22
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fd fe9a 	bl	8004e24 <ld_word>
 80070f0:	4603      	mov	r3, r0
 80070f2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80070f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d106      	bne.n	8007108 <find_volume+0x214>
 80070fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fc:	3338      	adds	r3, #56	; 0x38
 80070fe:	3324      	adds	r3, #36	; 0x24
 8007100:	4618      	mov	r0, r3
 8007102:	f7fd fea7 	bl	8004e54 <ld_dword>
 8007106:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800710c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800710e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007110:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007116:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	789b      	ldrb	r3, [r3, #2]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d005      	beq.n	800712c <find_volume+0x238>
 8007120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007122:	789b      	ldrb	r3, [r3, #2]
 8007124:	2b02      	cmp	r3, #2
 8007126:	d001      	beq.n	800712c <find_volume+0x238>
 8007128:	230d      	movs	r3, #13
 800712a:	e15c      	b.n	80073e6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	789b      	ldrb	r3, [r3, #2]
 8007130:	461a      	mov	r2, r3
 8007132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007134:	fb02 f303 	mul.w	r3, r2, r3
 8007138:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800713a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007140:	b29a      	uxth	r2, r3
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	895b      	ldrh	r3, [r3, #10]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d008      	beq.n	8007160 <find_volume+0x26c>
 800714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007150:	895b      	ldrh	r3, [r3, #10]
 8007152:	461a      	mov	r2, r3
 8007154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007156:	895b      	ldrh	r3, [r3, #10]
 8007158:	3b01      	subs	r3, #1
 800715a:	4013      	ands	r3, r2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <find_volume+0x270>
 8007160:	230d      	movs	r3, #13
 8007162:	e140      	b.n	80073e6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007166:	3338      	adds	r3, #56	; 0x38
 8007168:	3311      	adds	r3, #17
 800716a:	4618      	mov	r0, r3
 800716c:	f7fd fe5a 	bl	8004e24 <ld_word>
 8007170:	4603      	mov	r3, r0
 8007172:	461a      	mov	r2, r3
 8007174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007176:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717a:	891b      	ldrh	r3, [r3, #8]
 800717c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800717e:	8992      	ldrh	r2, [r2, #12]
 8007180:	0952      	lsrs	r2, r2, #5
 8007182:	b292      	uxth	r2, r2
 8007184:	fbb3 f1f2 	udiv	r1, r3, r2
 8007188:	fb01 f202 	mul.w	r2, r1, r2
 800718c:	1a9b      	subs	r3, r3, r2
 800718e:	b29b      	uxth	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d003      	beq.n	800719c <find_volume+0x2a8>
 8007194:	230d      	movs	r3, #13
 8007196:	e126      	b.n	80073e6 <find_volume+0x4f2>
 8007198:	200011d8 	.word	0x200011d8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800719c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719e:	3338      	adds	r3, #56	; 0x38
 80071a0:	3313      	adds	r3, #19
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fd fe3e 	bl	8004e24 <ld_word>
 80071a8:	4603      	mov	r3, r0
 80071aa:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80071ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d106      	bne.n	80071c0 <find_volume+0x2cc>
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	3338      	adds	r3, #56	; 0x38
 80071b6:	3320      	adds	r3, #32
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fd fe4b 	bl	8004e54 <ld_dword>
 80071be:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80071c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c2:	3338      	adds	r3, #56	; 0x38
 80071c4:	330e      	adds	r3, #14
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fd fe2c 	bl	8004e24 <ld_word>
 80071cc:	4603      	mov	r3, r0
 80071ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80071d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <find_volume+0x2e6>
 80071d6:	230d      	movs	r3, #13
 80071d8:	e105      	b.n	80073e6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80071da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80071dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071de:	4413      	add	r3, r2
 80071e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071e2:	8911      	ldrh	r1, [r2, #8]
 80071e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071e6:	8992      	ldrh	r2, [r2, #12]
 80071e8:	0952      	lsrs	r2, r2, #5
 80071ea:	b292      	uxth	r2, r2
 80071ec:	fbb1 f2f2 	udiv	r2, r1, r2
 80071f0:	b292      	uxth	r2, r2
 80071f2:	4413      	add	r3, r2
 80071f4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80071f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d201      	bcs.n	8007202 <find_volume+0x30e>
 80071fe:	230d      	movs	r3, #13
 8007200:	e0f1      	b.n	80073e6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800720a:	8952      	ldrh	r2, [r2, #10]
 800720c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007210:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <find_volume+0x328>
 8007218:	230d      	movs	r3, #13
 800721a:	e0e4      	b.n	80073e6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800721c:	2303      	movs	r3, #3
 800721e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007228:	4293      	cmp	r3, r2
 800722a:	d802      	bhi.n	8007232 <find_volume+0x33e>
 800722c:	2302      	movs	r3, #2
 800722e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007238:	4293      	cmp	r3, r2
 800723a:	d802      	bhi.n	8007242 <find_volume+0x34e>
 800723c:	2301      	movs	r3, #1
 800723e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	1c9a      	adds	r2, r3, #2
 8007246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007248:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800724a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800724e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007250:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007254:	441a      	add	r2, r3
 8007256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007258:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800725a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	441a      	add	r2, r3
 8007260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007262:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007264:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007268:	2b03      	cmp	r3, #3
 800726a:	d11e      	bne.n	80072aa <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800726c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726e:	3338      	adds	r3, #56	; 0x38
 8007270:	332a      	adds	r3, #42	; 0x2a
 8007272:	4618      	mov	r0, r3
 8007274:	f7fd fdd6 	bl	8004e24 <ld_word>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <find_volume+0x38e>
 800727e:	230d      	movs	r3, #13
 8007280:	e0b1      	b.n	80073e6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007284:	891b      	ldrh	r3, [r3, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <find_volume+0x39a>
 800728a:	230d      	movs	r3, #13
 800728c:	e0ab      	b.n	80073e6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	3338      	adds	r3, #56	; 0x38
 8007292:	332c      	adds	r3, #44	; 0x2c
 8007294:	4618      	mov	r0, r3
 8007296:	f7fd fddd 	bl	8004e54 <ld_dword>
 800729a:	4602      	mov	r2, r0
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	647b      	str	r3, [r7, #68]	; 0x44
 80072a8:	e01f      	b.n	80072ea <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80072aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ac:	891b      	ldrh	r3, [r3, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <find_volume+0x3c2>
 80072b2:	230d      	movs	r3, #13
 80072b4:	e097      	b.n	80073e6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072bc:	441a      	add	r2, r3
 80072be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80072c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d103      	bne.n	80072d2 <find_volume+0x3de>
 80072ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	e00a      	b.n	80072e8 <find_volume+0x3f4>
 80072d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d4:	69da      	ldr	r2, [r3, #28]
 80072d6:	4613      	mov	r3, r2
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	4413      	add	r3, r2
 80072dc:	085a      	lsrs	r2, r3, #1
 80072de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80072e8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80072ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ec:	6a1a      	ldr	r2, [r3, #32]
 80072ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f0:	899b      	ldrh	r3, [r3, #12]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072f6:	440b      	add	r3, r1
 80072f8:	3b01      	subs	r3, #1
 80072fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072fc:	8989      	ldrh	r1, [r1, #12]
 80072fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007302:	429a      	cmp	r2, r3
 8007304:	d201      	bcs.n	800730a <find_volume+0x416>
 8007306:	230d      	movs	r3, #13
 8007308:	e06d      	b.n	80073e6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007310:	619a      	str	r2, [r3, #24]
 8007312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007314:	699a      	ldr	r2, [r3, #24]
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800731a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731c:	2280      	movs	r2, #128	; 0x80
 800731e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007320:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007324:	2b03      	cmp	r3, #3
 8007326:	d149      	bne.n	80073bc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732a:	3338      	adds	r3, #56	; 0x38
 800732c:	3330      	adds	r3, #48	; 0x30
 800732e:	4618      	mov	r0, r3
 8007330:	f7fd fd78 	bl	8004e24 <ld_word>
 8007334:	4603      	mov	r3, r0
 8007336:	2b01      	cmp	r3, #1
 8007338:	d140      	bne.n	80073bc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800733a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800733c:	3301      	adds	r3, #1
 800733e:	4619      	mov	r1, r3
 8007340:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007342:	f7fe f81f 	bl	8005384 <move_window>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d137      	bne.n	80073bc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	2200      	movs	r2, #0
 8007350:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007354:	3338      	adds	r3, #56	; 0x38
 8007356:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800735a:	4618      	mov	r0, r3
 800735c:	f7fd fd62 	bl	8004e24 <ld_word>
 8007360:	4603      	mov	r3, r0
 8007362:	461a      	mov	r2, r3
 8007364:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007368:	429a      	cmp	r2, r3
 800736a:	d127      	bne.n	80073bc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800736c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736e:	3338      	adds	r3, #56	; 0x38
 8007370:	4618      	mov	r0, r3
 8007372:	f7fd fd6f 	bl	8004e54 <ld_dword>
 8007376:	4603      	mov	r3, r0
 8007378:	4a1d      	ldr	r2, [pc, #116]	; (80073f0 <find_volume+0x4fc>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d11e      	bne.n	80073bc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007380:	3338      	adds	r3, #56	; 0x38
 8007382:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007386:	4618      	mov	r0, r3
 8007388:	f7fd fd64 	bl	8004e54 <ld_dword>
 800738c:	4603      	mov	r3, r0
 800738e:	4a19      	ldr	r2, [pc, #100]	; (80073f4 <find_volume+0x500>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d113      	bne.n	80073bc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007396:	3338      	adds	r3, #56	; 0x38
 8007398:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800739c:	4618      	mov	r0, r3
 800739e:	f7fd fd59 	bl	8004e54 <ld_dword>
 80073a2:	4602      	mov	r2, r0
 80073a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80073a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073aa:	3338      	adds	r3, #56	; 0x38
 80073ac:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fd fd4f 	bl	8004e54 <ld_dword>
 80073b6:	4602      	mov	r2, r0
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80073c2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80073c4:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <find_volume+0x504>)
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	3301      	adds	r3, #1
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	4b0a      	ldr	r3, [pc, #40]	; (80073f8 <find_volume+0x504>)
 80073ce:	801a      	strh	r2, [r3, #0]
 80073d0:	4b09      	ldr	r3, [pc, #36]	; (80073f8 <find_volume+0x504>)
 80073d2:	881a      	ldrh	r2, [r3, #0]
 80073d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80073d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073da:	4a08      	ldr	r2, [pc, #32]	; (80073fc <find_volume+0x508>)
 80073dc:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80073de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073e0:	f7fd ff68 	bl	80052b4 <clear_lock>
#endif
	return FR_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3758      	adds	r7, #88	; 0x58
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	41615252 	.word	0x41615252
 80073f4:	61417272 	.word	0x61417272
 80073f8:	200011dc 	.word	0x200011dc
 80073fc:	20001200 	.word	0x20001200

08007400 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800740a:	2309      	movs	r3, #9
 800740c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d01c      	beq.n	800744e <validate+0x4e>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d018      	beq.n	800744e <validate+0x4e>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d013      	beq.n	800744e <validate+0x4e>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	889a      	ldrh	r2, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	88db      	ldrh	r3, [r3, #6]
 8007430:	429a      	cmp	r2, r3
 8007432:	d10c      	bne.n	800744e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	785b      	ldrb	r3, [r3, #1]
 800743a:	4618      	mov	r0, r3
 800743c:	f7fd fc54 	bl	8004ce8 <disk_status>
 8007440:	4603      	mov	r3, r0
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <validate+0x4e>
			res = FR_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d102      	bne.n	800745a <validate+0x5a>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	e000      	b.n	800745c <validate+0x5c>
 800745a:	2300      	movs	r3, #0
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	6013      	str	r3, [r2, #0]
	return res;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800747e:	f107 0310 	add.w	r3, r7, #16
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff fc9c 	bl	8006dc0 <get_ldnumber>
 8007488:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	2b00      	cmp	r3, #0
 800748e:	da01      	bge.n	8007494 <f_mount+0x28>
 8007490:	230b      	movs	r3, #11
 8007492:	e02b      	b.n	80074ec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007494:	4a17      	ldr	r2, [pc, #92]	; (80074f4 <f_mount+0x88>)
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800749c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d005      	beq.n	80074b0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80074a4:	69b8      	ldr	r0, [r7, #24]
 80074a6:	f7fd ff05 	bl	80052b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	2200      	movs	r2, #0
 80074ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	490d      	ldr	r1, [pc, #52]	; (80074f4 <f_mount+0x88>)
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <f_mount+0x66>
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d001      	beq.n	80074d6 <f_mount+0x6a>
 80074d2:	2300      	movs	r3, #0
 80074d4:	e00a      	b.n	80074ec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80074d6:	f107 010c 	add.w	r1, r7, #12
 80074da:	f107 0308 	add.w	r3, r7, #8
 80074de:	2200      	movs	r2, #0
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff fd07 	bl	8006ef4 <find_volume>
 80074e6:	4603      	mov	r3, r0
 80074e8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3720      	adds	r7, #32
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	200011d8 	.word	0x200011d8

080074f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b09a      	sub	sp, #104	; 0x68
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	4613      	mov	r3, r2
 8007504:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <f_open+0x18>
 800750c:	2309      	movs	r3, #9
 800750e:	e1bb      	b.n	8007888 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007510:	79fb      	ldrb	r3, [r7, #7]
 8007512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007516:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007518:	79fa      	ldrb	r2, [r7, #7]
 800751a:	f107 0114 	add.w	r1, r7, #20
 800751e:	f107 0308 	add.w	r3, r7, #8
 8007522:	4618      	mov	r0, r3
 8007524:	f7ff fce6 	bl	8006ef4 <find_volume>
 8007528:	4603      	mov	r3, r0
 800752a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800752e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007532:	2b00      	cmp	r3, #0
 8007534:	f040 819f 	bne.w	8007876 <f_open+0x37e>
		dj.obj.fs = fs;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	f107 0318 	add.w	r3, r7, #24
 8007542:	4611      	mov	r1, r2
 8007544:	4618      	mov	r0, r3
 8007546:	f7ff fbc5 	bl	8006cd4 <follow_path>
 800754a:	4603      	mov	r3, r0
 800754c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007550:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007554:	2b00      	cmp	r3, #0
 8007556:	d11a      	bne.n	800758e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007558:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800755c:	b25b      	sxtb	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	da03      	bge.n	800756a <f_open+0x72>
				res = FR_INVALID_NAME;
 8007562:	2306      	movs	r3, #6
 8007564:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007568:	e011      	b.n	800758e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	f023 0301 	bic.w	r3, r3, #1
 8007570:	2b00      	cmp	r3, #0
 8007572:	bf14      	ite	ne
 8007574:	2301      	movne	r3, #1
 8007576:	2300      	moveq	r3, #0
 8007578:	b2db      	uxtb	r3, r3
 800757a:	461a      	mov	r2, r3
 800757c:	f107 0318 	add.w	r3, r7, #24
 8007580:	4611      	mov	r1, r2
 8007582:	4618      	mov	r0, r3
 8007584:	f7fd fd4e 	bl	8005024 <chk_lock>
 8007588:	4603      	mov	r3, r0
 800758a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800758e:	79fb      	ldrb	r3, [r7, #7]
 8007590:	f003 031c 	and.w	r3, r3, #28
 8007594:	2b00      	cmp	r3, #0
 8007596:	d07f      	beq.n	8007698 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007598:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800759c:	2b00      	cmp	r3, #0
 800759e:	d017      	beq.n	80075d0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80075a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075a4:	2b04      	cmp	r3, #4
 80075a6:	d10e      	bne.n	80075c6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80075a8:	f7fd fd98 	bl	80050dc <enq_lock>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d006      	beq.n	80075c0 <f_open+0xc8>
 80075b2:	f107 0318 	add.w	r3, r7, #24
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe fffe 	bl	80065b8 <dir_register>
 80075bc:	4603      	mov	r3, r0
 80075be:	e000      	b.n	80075c2 <f_open+0xca>
 80075c0:	2312      	movs	r3, #18
 80075c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80075c6:	79fb      	ldrb	r3, [r7, #7]
 80075c8:	f043 0308 	orr.w	r3, r3, #8
 80075cc:	71fb      	strb	r3, [r7, #7]
 80075ce:	e010      	b.n	80075f2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80075d0:	7fbb      	ldrb	r3, [r7, #30]
 80075d2:	f003 0311 	and.w	r3, r3, #17
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <f_open+0xea>
					res = FR_DENIED;
 80075da:	2307      	movs	r3, #7
 80075dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80075e0:	e007      	b.n	80075f2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80075e2:	79fb      	ldrb	r3, [r7, #7]
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <f_open+0xfa>
 80075ec:	2308      	movs	r3, #8
 80075ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80075f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d168      	bne.n	80076cc <f_open+0x1d4>
 80075fa:	79fb      	ldrb	r3, [r7, #7]
 80075fc:	f003 0308 	and.w	r3, r3, #8
 8007600:	2b00      	cmp	r3, #0
 8007602:	d063      	beq.n	80076cc <f_open+0x1d4>
				dw = GET_FATTIME();
 8007604:	f7fd fb0e 	bl	8004c24 <get_fattime>
 8007608:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800760a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760c:	330e      	adds	r3, #14
 800760e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007610:	4618      	mov	r0, r3
 8007612:	f7fd fc5d 	bl	8004ed0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007618:	3316      	adds	r3, #22
 800761a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800761c:	4618      	mov	r0, r3
 800761e:	f7fd fc57 	bl	8004ed0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007624:	330b      	adds	r3, #11
 8007626:	2220      	movs	r2, #32
 8007628:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800762e:	4611      	mov	r1, r2
 8007630:	4618      	mov	r0, r3
 8007632:	f7fe fc2f 	bl	8005e94 <ld_clust>
 8007636:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800763c:	2200      	movs	r2, #0
 800763e:	4618      	mov	r0, r3
 8007640:	f7fe fc47 	bl	8005ed2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007646:	331c      	adds	r3, #28
 8007648:	2100      	movs	r1, #0
 800764a:	4618      	mov	r0, r3
 800764c:	f7fd fc40 	bl	8004ed0 <st_dword>
					fs->wflag = 1;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	2201      	movs	r2, #1
 8007654:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007658:	2b00      	cmp	r3, #0
 800765a:	d037      	beq.n	80076cc <f_open+0x1d4>
						dw = fs->winsect;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007660:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007662:	f107 0318 	add.w	r3, r7, #24
 8007666:	2200      	movs	r2, #0
 8007668:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe f937 	bl	80058de <remove_chain>
 8007670:	4603      	mov	r3, r0
 8007672:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007676:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800767a:	2b00      	cmp	r3, #0
 800767c:	d126      	bne.n	80076cc <f_open+0x1d4>
							res = move_window(fs, dw);
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007682:	4618      	mov	r0, r3
 8007684:	f7fd fe7e 	bl	8005384 <move_window>
 8007688:	4603      	mov	r3, r0
 800768a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007692:	3a01      	subs	r2, #1
 8007694:	615a      	str	r2, [r3, #20]
 8007696:	e019      	b.n	80076cc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007698:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800769c:	2b00      	cmp	r3, #0
 800769e:	d115      	bne.n	80076cc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80076a0:	7fbb      	ldrb	r3, [r7, #30]
 80076a2:	f003 0310 	and.w	r3, r3, #16
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80076aa:	2304      	movs	r3, #4
 80076ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80076b0:	e00c      	b.n	80076cc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80076b2:	79fb      	ldrb	r3, [r7, #7]
 80076b4:	f003 0302 	and.w	r3, r3, #2
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d007      	beq.n	80076cc <f_open+0x1d4>
 80076bc:	7fbb      	ldrb	r3, [r7, #30]
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <f_open+0x1d4>
						res = FR_DENIED;
 80076c6:	2307      	movs	r3, #7
 80076c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80076cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d128      	bne.n	8007726 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80076d4:	79fb      	ldrb	r3, [r7, #7]
 80076d6:	f003 0308 	and.w	r3, r3, #8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80076de:	79fb      	ldrb	r3, [r7, #7]
 80076e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80076ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80076f4:	79fb      	ldrb	r3, [r7, #7]
 80076f6:	f023 0301 	bic.w	r3, r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	bf14      	ite	ne
 80076fe:	2301      	movne	r3, #1
 8007700:	2300      	moveq	r3, #0
 8007702:	b2db      	uxtb	r3, r3
 8007704:	461a      	mov	r2, r3
 8007706:	f107 0318 	add.w	r3, r7, #24
 800770a:	4611      	mov	r1, r2
 800770c:	4618      	mov	r0, r3
 800770e:	f7fd fd07 	bl	8005120 <inc_lock>
 8007712:	4602      	mov	r2, r0
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d102      	bne.n	8007726 <f_open+0x22e>
 8007720:	2302      	movs	r3, #2
 8007722:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007726:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800772a:	2b00      	cmp	r3, #0
 800772c:	f040 80a3 	bne.w	8007876 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007734:	4611      	mov	r1, r2
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe fbac 	bl	8005e94 <ld_clust>
 800773c:	4602      	mov	r2, r0
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	331c      	adds	r3, #28
 8007746:	4618      	mov	r0, r3
 8007748:	f7fd fb84 	bl	8004e54 <ld_dword>
 800774c:	4602      	mov	r2, r0
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	88da      	ldrh	r2, [r3, #6]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	79fa      	ldrb	r2, [r7, #7]
 800776a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3330      	adds	r3, #48	; 0x30
 8007782:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007786:	2100      	movs	r1, #0
 8007788:	4618      	mov	r0, r3
 800778a:	f7fd fbee 	bl	8004f6a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800778e:	79fb      	ldrb	r3, [r7, #7]
 8007790:	f003 0320 	and.w	r3, r3, #32
 8007794:	2b00      	cmp	r3, #0
 8007796:	d06e      	beq.n	8007876 <f_open+0x37e>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d06a      	beq.n	8007876 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	68da      	ldr	r2, [r3, #12]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	895b      	ldrh	r3, [r3, #10]
 80077ac:	461a      	mov	r2, r3
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	899b      	ldrh	r3, [r3, #12]
 80077b2:	fb02 f303 	mul.w	r3, r2, r3
 80077b6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077c4:	e016      	b.n	80077f4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fd fe97 	bl	80054fe <get_fat>
 80077d0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80077d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d802      	bhi.n	80077de <f_open+0x2e6>
 80077d8:	2302      	movs	r3, #2
 80077da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80077de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077e4:	d102      	bne.n	80077ec <f_open+0x2f4>
 80077e6:	2301      	movs	r3, #1
 80077e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80077ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d103      	bne.n	8007804 <f_open+0x30c>
 80077fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007800:	429a      	cmp	r2, r3
 8007802:	d8e0      	bhi.n	80077c6 <f_open+0x2ce>
				}
				fp->clust = clst;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007808:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800780a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800780e:	2b00      	cmp	r3, #0
 8007810:	d131      	bne.n	8007876 <f_open+0x37e>
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	899b      	ldrh	r3, [r3, #12]
 8007816:	461a      	mov	r2, r3
 8007818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800781a:	fbb3 f1f2 	udiv	r1, r3, r2
 800781e:	fb01 f202 	mul.w	r2, r1, r2
 8007822:	1a9b      	subs	r3, r3, r2
 8007824:	2b00      	cmp	r3, #0
 8007826:	d026      	beq.n	8007876 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800782c:	4618      	mov	r0, r3
 800782e:	f7fd fe47 	bl	80054c0 <clust2sect>
 8007832:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007836:	2b00      	cmp	r3, #0
 8007838:	d103      	bne.n	8007842 <f_open+0x34a>
						res = FR_INT_ERR;
 800783a:	2302      	movs	r3, #2
 800783c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007840:	e019      	b.n	8007876 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	899b      	ldrh	r3, [r3, #12]
 8007846:	461a      	mov	r2, r3
 8007848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800784a:	fbb3 f2f2 	udiv	r2, r3, r2
 800784e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007850:	441a      	add	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	7858      	ldrb	r0, [r3, #1]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6a1a      	ldr	r2, [r3, #32]
 8007864:	2301      	movs	r3, #1
 8007866:	f7fd fa7f 	bl	8004d68 <disk_read>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <f_open+0x37e>
 8007870:	2301      	movs	r3, #1
 8007872:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007876:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <f_open+0x38c>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007884:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007888:	4618      	mov	r0, r3
 800788a:	3768      	adds	r7, #104	; 0x68
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08e      	sub	sp, #56	; 0x38
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f107 0214 	add.w	r2, r7, #20
 80078ae:	4611      	mov	r1, r2
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7ff fda5 	bl	8007400 <validate>
 80078b6:	4603      	mov	r3, r0
 80078b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80078bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d107      	bne.n	80078d4 <f_read+0x44>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	7d5b      	ldrb	r3, [r3, #21]
 80078c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80078cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d002      	beq.n	80078da <f_read+0x4a>
 80078d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078d8:	e135      	b.n	8007b46 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	7d1b      	ldrb	r3, [r3, #20]
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <f_read+0x5a>
 80078e6:	2307      	movs	r3, #7
 80078e8:	e12d      	b.n	8007b46 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	68da      	ldr	r2, [r3, #12]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	f240 811e 	bls.w	8007b3c <f_read+0x2ac>
 8007900:	6a3b      	ldr	r3, [r7, #32]
 8007902:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007904:	e11a      	b.n	8007b3c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	8992      	ldrh	r2, [r2, #12]
 800790e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007912:	fb01 f202 	mul.w	r2, r1, r2
 8007916:	1a9b      	subs	r3, r3, r2
 8007918:	2b00      	cmp	r3, #0
 800791a:	f040 80d5 	bne.w	8007ac8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	8992      	ldrh	r2, [r2, #12]
 8007926:	fbb3 f3f2 	udiv	r3, r3, r2
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	8952      	ldrh	r2, [r2, #10]
 800792e:	3a01      	subs	r2, #1
 8007930:	4013      	ands	r3, r2
 8007932:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d12f      	bne.n	800799a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d103      	bne.n	800794a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	633b      	str	r3, [r7, #48]	; 0x30
 8007948:	e013      	b.n	8007972 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794e:	2b00      	cmp	r3, #0
 8007950:	d007      	beq.n	8007962 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	4619      	mov	r1, r3
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f7fe f8bd 	bl	8005ad8 <clmt_clust>
 800795e:	6338      	str	r0, [r7, #48]	; 0x30
 8007960:	e007      	b.n	8007972 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	69db      	ldr	r3, [r3, #28]
 8007968:	4619      	mov	r1, r3
 800796a:	4610      	mov	r0, r2
 800796c:	f7fd fdc7 	bl	80054fe <get_fat>
 8007970:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007974:	2b01      	cmp	r3, #1
 8007976:	d804      	bhi.n	8007982 <f_read+0xf2>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2202      	movs	r2, #2
 800797c:	755a      	strb	r2, [r3, #21]
 800797e:	2302      	movs	r3, #2
 8007980:	e0e1      	b.n	8007b46 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007988:	d104      	bne.n	8007994 <f_read+0x104>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2201      	movs	r2, #1
 800798e:	755a      	strb	r2, [r3, #21]
 8007990:	2301      	movs	r3, #1
 8007992:	e0d8      	b.n	8007b46 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007998:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	69db      	ldr	r3, [r3, #28]
 80079a0:	4619      	mov	r1, r3
 80079a2:	4610      	mov	r0, r2
 80079a4:	f7fd fd8c 	bl	80054c0 <clust2sect>
 80079a8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d104      	bne.n	80079ba <f_read+0x12a>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2202      	movs	r2, #2
 80079b4:	755a      	strb	r2, [r3, #21]
 80079b6:	2302      	movs	r3, #2
 80079b8:	e0c5      	b.n	8007b46 <f_read+0x2b6>
			sect += csect;
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	4413      	add	r3, r2
 80079c0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	899b      	ldrh	r3, [r3, #12]
 80079c6:	461a      	mov	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80079ce:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80079d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d041      	beq.n	8007a5a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80079d6:	69fa      	ldr	r2, [r7, #28]
 80079d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079da:	4413      	add	r3, r2
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	8952      	ldrh	r2, [r2, #10]
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d905      	bls.n	80079f0 <f_read+0x160>
					cc = fs->csize - csect;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	895b      	ldrh	r3, [r3, #10]
 80079e8:	461a      	mov	r2, r3
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	7858      	ldrb	r0, [r3, #1]
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	69ba      	ldr	r2, [r7, #24]
 80079f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079fa:	f7fd f9b5 	bl	8004d68 <disk_read>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d004      	beq.n	8007a0e <f_read+0x17e>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2201      	movs	r2, #1
 8007a08:	755a      	strb	r2, [r3, #21]
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e09b      	b.n	8007b46 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	7d1b      	ldrb	r3, [r3, #20]
 8007a12:	b25b      	sxtb	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	da18      	bge.n	8007a4a <f_read+0x1ba>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6a1a      	ldr	r2, [r3, #32]
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d911      	bls.n	8007a4a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6a1a      	ldr	r2, [r3, #32]
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	8992      	ldrh	r2, [r2, #12]
 8007a32:	fb02 f303 	mul.w	r3, r2, r3
 8007a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a38:	18d0      	adds	r0, r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	899b      	ldrh	r3, [r3, #12]
 8007a44:	461a      	mov	r2, r3
 8007a46:	f7fd fa6f 	bl	8004f28 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	899b      	ldrh	r3, [r3, #12]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a52:	fb02 f303 	mul.w	r3, r2, r3
 8007a56:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007a58:	e05c      	b.n	8007b14 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d02e      	beq.n	8007ac2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	7d1b      	ldrb	r3, [r3, #20]
 8007a68:	b25b      	sxtb	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	da18      	bge.n	8007aa0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	7858      	ldrb	r0, [r3, #1]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6a1a      	ldr	r2, [r3, #32]
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	f7fd f993 	bl	8004da8 <disk_write>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d004      	beq.n	8007a92 <f_read+0x202>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	755a      	strb	r2, [r3, #21]
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e059      	b.n	8007b46 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	7d1b      	ldrb	r3, [r3, #20]
 8007a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	7858      	ldrb	r0, [r3, #1]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007aaa:	2301      	movs	r3, #1
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	f7fd f95b 	bl	8004d68 <disk_read>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d004      	beq.n	8007ac2 <f_read+0x232>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2201      	movs	r2, #1
 8007abc:	755a      	strb	r2, [r3, #21]
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e041      	b.n	8007b46 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	899b      	ldrh	r3, [r3, #12]
 8007acc:	4618      	mov	r0, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	8992      	ldrh	r2, [r2, #12]
 8007ad6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ada:	fb01 f202 	mul.w	r2, r1, r2
 8007ade:	1a9b      	subs	r3, r3, r2
 8007ae0:	1ac3      	subs	r3, r0, r3
 8007ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d901      	bls.n	8007af0 <f_read+0x260>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	8992      	ldrh	r2, [r2, #12]
 8007afe:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b02:	fb00 f202 	mul.w	r2, r0, r2
 8007b06:	1a9b      	subs	r3, r3, r2
 8007b08:	440b      	add	r3, r1
 8007b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b10:	f7fd fa0a 	bl	8004f28 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b18:	4413      	add	r3, r2
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	699a      	ldr	r2, [r3, #24]
 8007b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b22:	441a      	add	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	619a      	str	r2, [r3, #24]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2e:	441a      	add	r2, r3
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f47f aee1 	bne.w	8007906 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3738      	adds	r7, #56	; 0x38
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b086      	sub	sp, #24
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f107 0208 	add.w	r2, r7, #8
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7ff fc4e 	bl	8007400 <validate>
 8007b64:	4603      	mov	r3, r0
 8007b66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d168      	bne.n	8007c40 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	7d1b      	ldrb	r3, [r3, #20]
 8007b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d062      	beq.n	8007c40 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	7d1b      	ldrb	r3, [r3, #20]
 8007b7e:	b25b      	sxtb	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	da15      	bge.n	8007bb0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	7858      	ldrb	r0, [r3, #1]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1a      	ldr	r2, [r3, #32]
 8007b92:	2301      	movs	r3, #1
 8007b94:	f7fd f908 	bl	8004da8 <disk_write>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <f_sync+0x54>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e04f      	b.n	8007c42 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	7d1b      	ldrb	r3, [r3, #20]
 8007ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007bb0:	f7fd f838 	bl	8004c24 <get_fattime>
 8007bb4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	f7fd fbe0 	bl	8005384 <move_window>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d138      	bne.n	8007c40 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	330b      	adds	r3, #11
 8007bd8:	781a      	ldrb	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	330b      	adds	r3, #11
 8007bde:	f042 0220 	orr.w	r2, r2, #32
 8007be2:	b2d2      	uxtb	r2, r2
 8007be4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	68f9      	ldr	r1, [r7, #12]
 8007bf2:	f7fe f96e 	bl	8005ed2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f103 021c 	add.w	r2, r3, #28
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	4619      	mov	r1, r3
 8007c02:	4610      	mov	r0, r2
 8007c04:	f7fd f964 	bl	8004ed0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3316      	adds	r3, #22
 8007c0c:	6939      	ldr	r1, [r7, #16]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fd f95e 	bl	8004ed0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	3312      	adds	r3, #18
 8007c18:	2100      	movs	r1, #0
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fd f93d 	bl	8004e9a <st_word>
					fs->wflag = 1;
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	2201      	movs	r2, #1
 8007c24:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fd fbd9 	bl	80053e0 <sync_fs>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	7d1b      	ldrb	r3, [r3, #20]
 8007c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3718      	adds	r7, #24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7ff ff7b 	bl	8007b4e <f_sync>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d118      	bne.n	8007c94 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f107 0208 	add.w	r2, r7, #8
 8007c68:	4611      	mov	r1, r2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff fbc8 	bl	8007400 <validate>
 8007c70:	4603      	mov	r3, r0
 8007c72:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10c      	bne.n	8007c94 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fd fadc 	bl	800523c <dec_lock>
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d102      	bne.n	8007c94 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b086      	sub	sp, #24
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <f_opendir+0x14>
 8007cae:	2309      	movs	r3, #9
 8007cb0:	e064      	b.n	8007d7c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8007cb6:	f107 010c 	add.w	r1, r7, #12
 8007cba:	463b      	mov	r3, r7
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff f918 	bl	8006ef4 <find_volume>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d14f      	bne.n	8007d6e <f_opendir+0xd0>
		obj->fs = fs;
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7fe fffb 	bl	8006cd4 <follow_path>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8007ce2:	7dfb      	ldrb	r3, [r7, #23]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d13d      	bne.n	8007d64 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007cee:	b25b      	sxtb	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	db12      	blt.n	8007d1a <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	799b      	ldrb	r3, [r3, #6]
 8007cf8:	f003 0310 	and.w	r3, r3, #16
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00a      	beq.n	8007d16 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	4619      	mov	r1, r3
 8007d08:	4610      	mov	r0, r2
 8007d0a:	f7fe f8c3 	bl	8005e94 <ld_clust>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	609a      	str	r2, [r3, #8]
 8007d14:	e001      	b.n	8007d1a <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8007d16:	2305      	movs	r3, #5
 8007d18:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d121      	bne.n	8007d64 <f_opendir+0xc6>
				obj->id = fs->id;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	88da      	ldrh	r2, [r3, #6]
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007d28:	2100      	movs	r1, #0
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7fd ff0c 	bl	8005b48 <dir_sdi>
 8007d30:	4603      	mov	r3, r0
 8007d32:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d114      	bne.n	8007d64 <f_opendir+0xc6>
					if (obj->sclust) {
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00d      	beq.n	8007d5e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007d42:	2100      	movs	r1, #0
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7fd f9eb 	bl	8005120 <inc_lock>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d105      	bne.n	8007d64 <f_opendir+0xc6>
 8007d58:	2312      	movs	r3, #18
 8007d5a:	75fb      	strb	r3, [r7, #23]
 8007d5c:	e002      	b.n	8007d64 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	2200      	movs	r2, #0
 8007d62:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	d101      	bne.n	8007d6e <f_opendir+0xd0>
 8007d6a:	2305      	movs	r3, #5
 8007d6c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <f_opendir+0xdc>
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f107 0208 	add.w	r2, r7, #8
 8007d94:	4611      	mov	r1, r2
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7ff fb32 	bl	8007400 <validate>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d126      	bne.n	8007df4 <f_readdir+0x70>
		if (!fno) {
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d106      	bne.n	8007dba <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8007dac:	2100      	movs	r1, #0
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7fd feca 	bl	8005b48 <dir_sdi>
 8007db4:	4603      	mov	r3, r0
 8007db6:	73fb      	strb	r3, [r7, #15]
 8007db8:	e01c      	b.n	8007df4 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8007dba:	2100      	movs	r1, #0
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7fe fa94 	bl	80062ea <dir_read>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	2b04      	cmp	r3, #4
 8007dca:	d101      	bne.n	8007dd0 <f_readdir+0x4c>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10e      	bne.n	8007df4 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7fe fce5 	bl	80067a8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007dde:	2100      	movs	r1, #0
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7fd ff3a 	bl	8005c5a <dir_next>
 8007de6:	4603      	mov	r3, r0
 8007de8:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	2b04      	cmp	r3, #4
 8007dee:	d101      	bne.n	8007df4 <f_readdir+0x70>
 8007df0:	2300      	movs	r3, #0
 8007df2:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
	...

08007e00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007e16:	4b1f      	ldr	r3, [pc, #124]	; (8007e94 <FATFS_LinkDriverEx+0x94>)
 8007e18:	7a5b      	ldrb	r3, [r3, #9]
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d131      	bne.n	8007e84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007e20:	4b1c      	ldr	r3, [pc, #112]	; (8007e94 <FATFS_LinkDriverEx+0x94>)
 8007e22:	7a5b      	ldrb	r3, [r3, #9]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	461a      	mov	r2, r3
 8007e28:	4b1a      	ldr	r3, [pc, #104]	; (8007e94 <FATFS_LinkDriverEx+0x94>)
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007e2e:	4b19      	ldr	r3, [pc, #100]	; (8007e94 <FATFS_LinkDriverEx+0x94>)
 8007e30:	7a5b      	ldrb	r3, [r3, #9]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	4a17      	ldr	r2, [pc, #92]	; (8007e94 <FATFS_LinkDriverEx+0x94>)
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007e3e:	4b15      	ldr	r3, [pc, #84]	; (8007e94 <FATFS_LinkDriverEx+0x94>)
 8007e40:	7a5b      	ldrb	r3, [r3, #9]
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	461a      	mov	r2, r3
 8007e46:	4b13      	ldr	r3, [pc, #76]	; (8007e94 <FATFS_LinkDriverEx+0x94>)
 8007e48:	4413      	add	r3, r2
 8007e4a:	79fa      	ldrb	r2, [r7, #7]
 8007e4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007e4e:	4b11      	ldr	r3, [pc, #68]	; (8007e94 <FATFS_LinkDriverEx+0x94>)
 8007e50:	7a5b      	ldrb	r3, [r3, #9]
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	b2d1      	uxtb	r1, r2
 8007e58:	4a0e      	ldr	r2, [pc, #56]	; (8007e94 <FATFS_LinkDriverEx+0x94>)
 8007e5a:	7251      	strb	r1, [r2, #9]
 8007e5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007e5e:	7dbb      	ldrb	r3, [r7, #22]
 8007e60:	3330      	adds	r3, #48	; 0x30
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	223a      	movs	r2, #58	; 0x3a
 8007e6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	3302      	adds	r3, #2
 8007e74:	222f      	movs	r2, #47	; 0x2f
 8007e76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	3303      	adds	r3, #3
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007e80:	2300      	movs	r3, #0
 8007e82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	20001400 	.word	0x20001400

08007e98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7ff ffaa 	bl	8007e00 <FATFS_LinkDriverEx>
 8007eac:	4603      	mov	r3, r0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
	...

08007eb8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	6039      	str	r1, [r7, #0]
 8007ec2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007ec4:	88fb      	ldrh	r3, [r7, #6]
 8007ec6:	2b7f      	cmp	r3, #127	; 0x7f
 8007ec8:	d802      	bhi.n	8007ed0 <ff_convert+0x18>
		c = chr;
 8007eca:	88fb      	ldrh	r3, [r7, #6]
 8007ecc:	81fb      	strh	r3, [r7, #14]
 8007ece:	e025      	b.n	8007f1c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00b      	beq.n	8007eee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007ed6:	88fb      	ldrh	r3, [r7, #6]
 8007ed8:	2bff      	cmp	r3, #255	; 0xff
 8007eda:	d805      	bhi.n	8007ee8 <ff_convert+0x30>
 8007edc:	88fb      	ldrh	r3, [r7, #6]
 8007ede:	3b80      	subs	r3, #128	; 0x80
 8007ee0:	4a12      	ldr	r2, [pc, #72]	; (8007f2c <ff_convert+0x74>)
 8007ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ee6:	e000      	b.n	8007eea <ff_convert+0x32>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	81fb      	strh	r3, [r7, #14]
 8007eec:	e016      	b.n	8007f1c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007eee:	2300      	movs	r3, #0
 8007ef0:	81fb      	strh	r3, [r7, #14]
 8007ef2:	e009      	b.n	8007f08 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007ef4:	89fb      	ldrh	r3, [r7, #14]
 8007ef6:	4a0d      	ldr	r2, [pc, #52]	; (8007f2c <ff_convert+0x74>)
 8007ef8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007efc:	88fa      	ldrh	r2, [r7, #6]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d006      	beq.n	8007f10 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007f02:	89fb      	ldrh	r3, [r7, #14]
 8007f04:	3301      	adds	r3, #1
 8007f06:	81fb      	strh	r3, [r7, #14]
 8007f08:	89fb      	ldrh	r3, [r7, #14]
 8007f0a:	2b7f      	cmp	r3, #127	; 0x7f
 8007f0c:	d9f2      	bls.n	8007ef4 <ff_convert+0x3c>
 8007f0e:	e000      	b.n	8007f12 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007f10:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007f12:	89fb      	ldrh	r3, [r7, #14]
 8007f14:	3380      	adds	r3, #128	; 0x80
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007f1c:	89fb      	ldrh	r3, [r7, #14]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	08008cb0 	.word	0x08008cb0

08007f30 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	4603      	mov	r3, r0
 8007f38:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007f3a:	88fb      	ldrh	r3, [r7, #6]
 8007f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f40:	d201      	bcs.n	8007f46 <ff_wtoupper+0x16>
 8007f42:	4b3e      	ldr	r3, [pc, #248]	; (800803c <ff_wtoupper+0x10c>)
 8007f44:	e000      	b.n	8007f48 <ff_wtoupper+0x18>
 8007f46:	4b3e      	ldr	r3, [pc, #248]	; (8008040 <ff_wtoupper+0x110>)
 8007f48:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	1c9a      	adds	r2, r3, #2
 8007f4e:	617a      	str	r2, [r7, #20]
 8007f50:	881b      	ldrh	r3, [r3, #0]
 8007f52:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007f54:	8a7b      	ldrh	r3, [r7, #18]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d068      	beq.n	800802c <ff_wtoupper+0xfc>
 8007f5a:	88fa      	ldrh	r2, [r7, #6]
 8007f5c:	8a7b      	ldrh	r3, [r7, #18]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d364      	bcc.n	800802c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	1c9a      	adds	r2, r3, #2
 8007f66:	617a      	str	r2, [r7, #20]
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	823b      	strh	r3, [r7, #16]
 8007f6c:	8a3b      	ldrh	r3, [r7, #16]
 8007f6e:	0a1b      	lsrs	r3, r3, #8
 8007f70:	81fb      	strh	r3, [r7, #14]
 8007f72:	8a3b      	ldrh	r3, [r7, #16]
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007f78:	88fa      	ldrh	r2, [r7, #6]
 8007f7a:	8a79      	ldrh	r1, [r7, #18]
 8007f7c:	8a3b      	ldrh	r3, [r7, #16]
 8007f7e:	440b      	add	r3, r1
 8007f80:	429a      	cmp	r2, r3
 8007f82:	da49      	bge.n	8008018 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007f84:	89fb      	ldrh	r3, [r7, #14]
 8007f86:	2b08      	cmp	r3, #8
 8007f88:	d84f      	bhi.n	800802a <ff_wtoupper+0xfa>
 8007f8a:	a201      	add	r2, pc, #4	; (adr r2, 8007f90 <ff_wtoupper+0x60>)
 8007f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f90:	08007fb5 	.word	0x08007fb5
 8007f94:	08007fc7 	.word	0x08007fc7
 8007f98:	08007fdd 	.word	0x08007fdd
 8007f9c:	08007fe5 	.word	0x08007fe5
 8007fa0:	08007fed 	.word	0x08007fed
 8007fa4:	08007ff5 	.word	0x08007ff5
 8007fa8:	08007ffd 	.word	0x08007ffd
 8007fac:	08008005 	.word	0x08008005
 8007fb0:	0800800d 	.word	0x0800800d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007fb4:	88fa      	ldrh	r2, [r7, #6]
 8007fb6:	8a7b      	ldrh	r3, [r7, #18]
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	005b      	lsls	r3, r3, #1
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	881b      	ldrh	r3, [r3, #0]
 8007fc2:	80fb      	strh	r3, [r7, #6]
 8007fc4:	e027      	b.n	8008016 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007fc6:	88fa      	ldrh	r2, [r7, #6]
 8007fc8:	8a7b      	ldrh	r3, [r7, #18]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	88fa      	ldrh	r2, [r7, #6]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	80fb      	strh	r3, [r7, #6]
 8007fda:	e01c      	b.n	8008016 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007fdc:	88fb      	ldrh	r3, [r7, #6]
 8007fde:	3b10      	subs	r3, #16
 8007fe0:	80fb      	strh	r3, [r7, #6]
 8007fe2:	e018      	b.n	8008016 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007fe4:	88fb      	ldrh	r3, [r7, #6]
 8007fe6:	3b20      	subs	r3, #32
 8007fe8:	80fb      	strh	r3, [r7, #6]
 8007fea:	e014      	b.n	8008016 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007fec:	88fb      	ldrh	r3, [r7, #6]
 8007fee:	3b30      	subs	r3, #48	; 0x30
 8007ff0:	80fb      	strh	r3, [r7, #6]
 8007ff2:	e010      	b.n	8008016 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007ff4:	88fb      	ldrh	r3, [r7, #6]
 8007ff6:	3b1a      	subs	r3, #26
 8007ff8:	80fb      	strh	r3, [r7, #6]
 8007ffa:	e00c      	b.n	8008016 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007ffc:	88fb      	ldrh	r3, [r7, #6]
 8007ffe:	3308      	adds	r3, #8
 8008000:	80fb      	strh	r3, [r7, #6]
 8008002:	e008      	b.n	8008016 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008004:	88fb      	ldrh	r3, [r7, #6]
 8008006:	3b50      	subs	r3, #80	; 0x50
 8008008:	80fb      	strh	r3, [r7, #6]
 800800a:	e004      	b.n	8008016 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800800c:	88fb      	ldrh	r3, [r7, #6]
 800800e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008012:	80fb      	strh	r3, [r7, #6]
 8008014:	bf00      	nop
			}
			break;
 8008016:	e008      	b.n	800802a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008018:	89fb      	ldrh	r3, [r7, #14]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d195      	bne.n	8007f4a <ff_wtoupper+0x1a>
 800801e:	8a3b      	ldrh	r3, [r7, #16]
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	4413      	add	r3, r2
 8008026:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008028:	e78f      	b.n	8007f4a <ff_wtoupper+0x1a>
			break;
 800802a:	bf00      	nop
	}

	return chr;
 800802c:	88fb      	ldrh	r3, [r7, #6]
}
 800802e:	4618      	mov	r0, r3
 8008030:	371c      	adds	r7, #28
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	08008db0 	.word	0x08008db0
 8008040:	08008fa4 	.word	0x08008fa4

08008044 <__errno>:
 8008044:	4b01      	ldr	r3, [pc, #4]	; (800804c <__errno+0x8>)
 8008046:	6818      	ldr	r0, [r3, #0]
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	20000024 	.word	0x20000024

08008050 <__libc_init_array>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	4d0d      	ldr	r5, [pc, #52]	; (8008088 <__libc_init_array+0x38>)
 8008054:	4c0d      	ldr	r4, [pc, #52]	; (800808c <__libc_init_array+0x3c>)
 8008056:	1b64      	subs	r4, r4, r5
 8008058:	10a4      	asrs	r4, r4, #2
 800805a:	2600      	movs	r6, #0
 800805c:	42a6      	cmp	r6, r4
 800805e:	d109      	bne.n	8008074 <__libc_init_array+0x24>
 8008060:	4d0b      	ldr	r5, [pc, #44]	; (8008090 <__libc_init_array+0x40>)
 8008062:	4c0c      	ldr	r4, [pc, #48]	; (8008094 <__libc_init_array+0x44>)
 8008064:	f000 fc8e 	bl	8008984 <_init>
 8008068:	1b64      	subs	r4, r4, r5
 800806a:	10a4      	asrs	r4, r4, #2
 800806c:	2600      	movs	r6, #0
 800806e:	42a6      	cmp	r6, r4
 8008070:	d105      	bne.n	800807e <__libc_init_array+0x2e>
 8008072:	bd70      	pop	{r4, r5, r6, pc}
 8008074:	f855 3b04 	ldr.w	r3, [r5], #4
 8008078:	4798      	blx	r3
 800807a:	3601      	adds	r6, #1
 800807c:	e7ee      	b.n	800805c <__libc_init_array+0xc>
 800807e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008082:	4798      	blx	r3
 8008084:	3601      	adds	r6, #1
 8008086:	e7f2      	b.n	800806e <__libc_init_array+0x1e>
 8008088:	080090fc 	.word	0x080090fc
 800808c:	080090fc 	.word	0x080090fc
 8008090:	080090fc 	.word	0x080090fc
 8008094:	08009100 	.word	0x08009100

08008098 <__retarget_lock_acquire_recursive>:
 8008098:	4770      	bx	lr

0800809a <__retarget_lock_release_recursive>:
 800809a:	4770      	bx	lr

0800809c <memcpy>:
 800809c:	440a      	add	r2, r1
 800809e:	4291      	cmp	r1, r2
 80080a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80080a4:	d100      	bne.n	80080a8 <memcpy+0xc>
 80080a6:	4770      	bx	lr
 80080a8:	b510      	push	{r4, lr}
 80080aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080b2:	4291      	cmp	r1, r2
 80080b4:	d1f9      	bne.n	80080aa <memcpy+0xe>
 80080b6:	bd10      	pop	{r4, pc}

080080b8 <memset>:
 80080b8:	4402      	add	r2, r0
 80080ba:	4603      	mov	r3, r0
 80080bc:	4293      	cmp	r3, r2
 80080be:	d100      	bne.n	80080c2 <memset+0xa>
 80080c0:	4770      	bx	lr
 80080c2:	f803 1b01 	strb.w	r1, [r3], #1
 80080c6:	e7f9      	b.n	80080bc <memset+0x4>

080080c8 <_free_r>:
 80080c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ca:	2900      	cmp	r1, #0
 80080cc:	d044      	beq.n	8008158 <_free_r+0x90>
 80080ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d2:	9001      	str	r0, [sp, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f1a1 0404 	sub.w	r4, r1, #4
 80080da:	bfb8      	it	lt
 80080dc:	18e4      	addlt	r4, r4, r3
 80080de:	f000 f903 	bl	80082e8 <__malloc_lock>
 80080e2:	4a1e      	ldr	r2, [pc, #120]	; (800815c <_free_r+0x94>)
 80080e4:	9801      	ldr	r0, [sp, #4]
 80080e6:	6813      	ldr	r3, [r2, #0]
 80080e8:	b933      	cbnz	r3, 80080f8 <_free_r+0x30>
 80080ea:	6063      	str	r3, [r4, #4]
 80080ec:	6014      	str	r4, [r2, #0]
 80080ee:	b003      	add	sp, #12
 80080f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080f4:	f000 b8fe 	b.w	80082f4 <__malloc_unlock>
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	d908      	bls.n	800810e <_free_r+0x46>
 80080fc:	6825      	ldr	r5, [r4, #0]
 80080fe:	1961      	adds	r1, r4, r5
 8008100:	428b      	cmp	r3, r1
 8008102:	bf01      	itttt	eq
 8008104:	6819      	ldreq	r1, [r3, #0]
 8008106:	685b      	ldreq	r3, [r3, #4]
 8008108:	1949      	addeq	r1, r1, r5
 800810a:	6021      	streq	r1, [r4, #0]
 800810c:	e7ed      	b.n	80080ea <_free_r+0x22>
 800810e:	461a      	mov	r2, r3
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	b10b      	cbz	r3, 8008118 <_free_r+0x50>
 8008114:	42a3      	cmp	r3, r4
 8008116:	d9fa      	bls.n	800810e <_free_r+0x46>
 8008118:	6811      	ldr	r1, [r2, #0]
 800811a:	1855      	adds	r5, r2, r1
 800811c:	42a5      	cmp	r5, r4
 800811e:	d10b      	bne.n	8008138 <_free_r+0x70>
 8008120:	6824      	ldr	r4, [r4, #0]
 8008122:	4421      	add	r1, r4
 8008124:	1854      	adds	r4, r2, r1
 8008126:	42a3      	cmp	r3, r4
 8008128:	6011      	str	r1, [r2, #0]
 800812a:	d1e0      	bne.n	80080ee <_free_r+0x26>
 800812c:	681c      	ldr	r4, [r3, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	6053      	str	r3, [r2, #4]
 8008132:	4421      	add	r1, r4
 8008134:	6011      	str	r1, [r2, #0]
 8008136:	e7da      	b.n	80080ee <_free_r+0x26>
 8008138:	d902      	bls.n	8008140 <_free_r+0x78>
 800813a:	230c      	movs	r3, #12
 800813c:	6003      	str	r3, [r0, #0]
 800813e:	e7d6      	b.n	80080ee <_free_r+0x26>
 8008140:	6825      	ldr	r5, [r4, #0]
 8008142:	1961      	adds	r1, r4, r5
 8008144:	428b      	cmp	r3, r1
 8008146:	bf04      	itt	eq
 8008148:	6819      	ldreq	r1, [r3, #0]
 800814a:	685b      	ldreq	r3, [r3, #4]
 800814c:	6063      	str	r3, [r4, #4]
 800814e:	bf04      	itt	eq
 8008150:	1949      	addeq	r1, r1, r5
 8008152:	6021      	streq	r1, [r4, #0]
 8008154:	6054      	str	r4, [r2, #4]
 8008156:	e7ca      	b.n	80080ee <_free_r+0x26>
 8008158:	b003      	add	sp, #12
 800815a:	bd30      	pop	{r4, r5, pc}
 800815c:	20001410 	.word	0x20001410

08008160 <sbrk_aligned>:
 8008160:	b570      	push	{r4, r5, r6, lr}
 8008162:	4e0e      	ldr	r6, [pc, #56]	; (800819c <sbrk_aligned+0x3c>)
 8008164:	460c      	mov	r4, r1
 8008166:	6831      	ldr	r1, [r6, #0]
 8008168:	4605      	mov	r5, r0
 800816a:	b911      	cbnz	r1, 8008172 <sbrk_aligned+0x12>
 800816c:	f000 f88c 	bl	8008288 <_sbrk_r>
 8008170:	6030      	str	r0, [r6, #0]
 8008172:	4621      	mov	r1, r4
 8008174:	4628      	mov	r0, r5
 8008176:	f000 f887 	bl	8008288 <_sbrk_r>
 800817a:	1c43      	adds	r3, r0, #1
 800817c:	d00a      	beq.n	8008194 <sbrk_aligned+0x34>
 800817e:	1cc4      	adds	r4, r0, #3
 8008180:	f024 0403 	bic.w	r4, r4, #3
 8008184:	42a0      	cmp	r0, r4
 8008186:	d007      	beq.n	8008198 <sbrk_aligned+0x38>
 8008188:	1a21      	subs	r1, r4, r0
 800818a:	4628      	mov	r0, r5
 800818c:	f000 f87c 	bl	8008288 <_sbrk_r>
 8008190:	3001      	adds	r0, #1
 8008192:	d101      	bne.n	8008198 <sbrk_aligned+0x38>
 8008194:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008198:	4620      	mov	r0, r4
 800819a:	bd70      	pop	{r4, r5, r6, pc}
 800819c:	20001414 	.word	0x20001414

080081a0 <_malloc_r>:
 80081a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081a4:	1ccd      	adds	r5, r1, #3
 80081a6:	f025 0503 	bic.w	r5, r5, #3
 80081aa:	3508      	adds	r5, #8
 80081ac:	2d0c      	cmp	r5, #12
 80081ae:	bf38      	it	cc
 80081b0:	250c      	movcc	r5, #12
 80081b2:	2d00      	cmp	r5, #0
 80081b4:	4607      	mov	r7, r0
 80081b6:	db01      	blt.n	80081bc <_malloc_r+0x1c>
 80081b8:	42a9      	cmp	r1, r5
 80081ba:	d905      	bls.n	80081c8 <_malloc_r+0x28>
 80081bc:	230c      	movs	r3, #12
 80081be:	603b      	str	r3, [r7, #0]
 80081c0:	2600      	movs	r6, #0
 80081c2:	4630      	mov	r0, r6
 80081c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081c8:	4e2e      	ldr	r6, [pc, #184]	; (8008284 <_malloc_r+0xe4>)
 80081ca:	f000 f88d 	bl	80082e8 <__malloc_lock>
 80081ce:	6833      	ldr	r3, [r6, #0]
 80081d0:	461c      	mov	r4, r3
 80081d2:	bb34      	cbnz	r4, 8008222 <_malloc_r+0x82>
 80081d4:	4629      	mov	r1, r5
 80081d6:	4638      	mov	r0, r7
 80081d8:	f7ff ffc2 	bl	8008160 <sbrk_aligned>
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	4604      	mov	r4, r0
 80081e0:	d14d      	bne.n	800827e <_malloc_r+0xde>
 80081e2:	6834      	ldr	r4, [r6, #0]
 80081e4:	4626      	mov	r6, r4
 80081e6:	2e00      	cmp	r6, #0
 80081e8:	d140      	bne.n	800826c <_malloc_r+0xcc>
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	4631      	mov	r1, r6
 80081ee:	4638      	mov	r0, r7
 80081f0:	eb04 0803 	add.w	r8, r4, r3
 80081f4:	f000 f848 	bl	8008288 <_sbrk_r>
 80081f8:	4580      	cmp	r8, r0
 80081fa:	d13a      	bne.n	8008272 <_malloc_r+0xd2>
 80081fc:	6821      	ldr	r1, [r4, #0]
 80081fe:	3503      	adds	r5, #3
 8008200:	1a6d      	subs	r5, r5, r1
 8008202:	f025 0503 	bic.w	r5, r5, #3
 8008206:	3508      	adds	r5, #8
 8008208:	2d0c      	cmp	r5, #12
 800820a:	bf38      	it	cc
 800820c:	250c      	movcc	r5, #12
 800820e:	4629      	mov	r1, r5
 8008210:	4638      	mov	r0, r7
 8008212:	f7ff ffa5 	bl	8008160 <sbrk_aligned>
 8008216:	3001      	adds	r0, #1
 8008218:	d02b      	beq.n	8008272 <_malloc_r+0xd2>
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	442b      	add	r3, r5
 800821e:	6023      	str	r3, [r4, #0]
 8008220:	e00e      	b.n	8008240 <_malloc_r+0xa0>
 8008222:	6822      	ldr	r2, [r4, #0]
 8008224:	1b52      	subs	r2, r2, r5
 8008226:	d41e      	bmi.n	8008266 <_malloc_r+0xc6>
 8008228:	2a0b      	cmp	r2, #11
 800822a:	d916      	bls.n	800825a <_malloc_r+0xba>
 800822c:	1961      	adds	r1, r4, r5
 800822e:	42a3      	cmp	r3, r4
 8008230:	6025      	str	r5, [r4, #0]
 8008232:	bf18      	it	ne
 8008234:	6059      	strne	r1, [r3, #4]
 8008236:	6863      	ldr	r3, [r4, #4]
 8008238:	bf08      	it	eq
 800823a:	6031      	streq	r1, [r6, #0]
 800823c:	5162      	str	r2, [r4, r5]
 800823e:	604b      	str	r3, [r1, #4]
 8008240:	4638      	mov	r0, r7
 8008242:	f104 060b 	add.w	r6, r4, #11
 8008246:	f000 f855 	bl	80082f4 <__malloc_unlock>
 800824a:	f026 0607 	bic.w	r6, r6, #7
 800824e:	1d23      	adds	r3, r4, #4
 8008250:	1af2      	subs	r2, r6, r3
 8008252:	d0b6      	beq.n	80081c2 <_malloc_r+0x22>
 8008254:	1b9b      	subs	r3, r3, r6
 8008256:	50a3      	str	r3, [r4, r2]
 8008258:	e7b3      	b.n	80081c2 <_malloc_r+0x22>
 800825a:	6862      	ldr	r2, [r4, #4]
 800825c:	42a3      	cmp	r3, r4
 800825e:	bf0c      	ite	eq
 8008260:	6032      	streq	r2, [r6, #0]
 8008262:	605a      	strne	r2, [r3, #4]
 8008264:	e7ec      	b.n	8008240 <_malloc_r+0xa0>
 8008266:	4623      	mov	r3, r4
 8008268:	6864      	ldr	r4, [r4, #4]
 800826a:	e7b2      	b.n	80081d2 <_malloc_r+0x32>
 800826c:	4634      	mov	r4, r6
 800826e:	6876      	ldr	r6, [r6, #4]
 8008270:	e7b9      	b.n	80081e6 <_malloc_r+0x46>
 8008272:	230c      	movs	r3, #12
 8008274:	603b      	str	r3, [r7, #0]
 8008276:	4638      	mov	r0, r7
 8008278:	f000 f83c 	bl	80082f4 <__malloc_unlock>
 800827c:	e7a1      	b.n	80081c2 <_malloc_r+0x22>
 800827e:	6025      	str	r5, [r4, #0]
 8008280:	e7de      	b.n	8008240 <_malloc_r+0xa0>
 8008282:	bf00      	nop
 8008284:	20001410 	.word	0x20001410

08008288 <_sbrk_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4d06      	ldr	r5, [pc, #24]	; (80082a4 <_sbrk_r+0x1c>)
 800828c:	2300      	movs	r3, #0
 800828e:	4604      	mov	r4, r0
 8008290:	4608      	mov	r0, r1
 8008292:	602b      	str	r3, [r5, #0]
 8008294:	f7fa f83e 	bl	8002314 <_sbrk>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_sbrk_r+0x1a>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_sbrk_r+0x1a>
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	20001418 	.word	0x20001418

080082a8 <siprintf>:
 80082a8:	b40e      	push	{r1, r2, r3}
 80082aa:	b500      	push	{lr}
 80082ac:	b09c      	sub	sp, #112	; 0x70
 80082ae:	ab1d      	add	r3, sp, #116	; 0x74
 80082b0:	9002      	str	r0, [sp, #8]
 80082b2:	9006      	str	r0, [sp, #24]
 80082b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082b8:	4809      	ldr	r0, [pc, #36]	; (80082e0 <siprintf+0x38>)
 80082ba:	9107      	str	r1, [sp, #28]
 80082bc:	9104      	str	r1, [sp, #16]
 80082be:	4909      	ldr	r1, [pc, #36]	; (80082e4 <siprintf+0x3c>)
 80082c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80082c4:	9105      	str	r1, [sp, #20]
 80082c6:	6800      	ldr	r0, [r0, #0]
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	a902      	add	r1, sp, #8
 80082cc:	f000 f874 	bl	80083b8 <_svfiprintf_r>
 80082d0:	9b02      	ldr	r3, [sp, #8]
 80082d2:	2200      	movs	r2, #0
 80082d4:	701a      	strb	r2, [r3, #0]
 80082d6:	b01c      	add	sp, #112	; 0x70
 80082d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80082dc:	b003      	add	sp, #12
 80082de:	4770      	bx	lr
 80082e0:	20000024 	.word	0x20000024
 80082e4:	ffff0208 	.word	0xffff0208

080082e8 <__malloc_lock>:
 80082e8:	4801      	ldr	r0, [pc, #4]	; (80082f0 <__malloc_lock+0x8>)
 80082ea:	f7ff bed5 	b.w	8008098 <__retarget_lock_acquire_recursive>
 80082ee:	bf00      	nop
 80082f0:	2000140c 	.word	0x2000140c

080082f4 <__malloc_unlock>:
 80082f4:	4801      	ldr	r0, [pc, #4]	; (80082fc <__malloc_unlock+0x8>)
 80082f6:	f7ff bed0 	b.w	800809a <__retarget_lock_release_recursive>
 80082fa:	bf00      	nop
 80082fc:	2000140c 	.word	0x2000140c

08008300 <__ssputs_r>:
 8008300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008304:	688e      	ldr	r6, [r1, #8]
 8008306:	429e      	cmp	r6, r3
 8008308:	4682      	mov	sl, r0
 800830a:	460c      	mov	r4, r1
 800830c:	4690      	mov	r8, r2
 800830e:	461f      	mov	r7, r3
 8008310:	d838      	bhi.n	8008384 <__ssputs_r+0x84>
 8008312:	898a      	ldrh	r2, [r1, #12]
 8008314:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008318:	d032      	beq.n	8008380 <__ssputs_r+0x80>
 800831a:	6825      	ldr	r5, [r4, #0]
 800831c:	6909      	ldr	r1, [r1, #16]
 800831e:	eba5 0901 	sub.w	r9, r5, r1
 8008322:	6965      	ldr	r5, [r4, #20]
 8008324:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008328:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800832c:	3301      	adds	r3, #1
 800832e:	444b      	add	r3, r9
 8008330:	106d      	asrs	r5, r5, #1
 8008332:	429d      	cmp	r5, r3
 8008334:	bf38      	it	cc
 8008336:	461d      	movcc	r5, r3
 8008338:	0553      	lsls	r3, r2, #21
 800833a:	d531      	bpl.n	80083a0 <__ssputs_r+0xa0>
 800833c:	4629      	mov	r1, r5
 800833e:	f7ff ff2f 	bl	80081a0 <_malloc_r>
 8008342:	4606      	mov	r6, r0
 8008344:	b950      	cbnz	r0, 800835c <__ssputs_r+0x5c>
 8008346:	230c      	movs	r3, #12
 8008348:	f8ca 3000 	str.w	r3, [sl]
 800834c:	89a3      	ldrh	r3, [r4, #12]
 800834e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008352:	81a3      	strh	r3, [r4, #12]
 8008354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800835c:	6921      	ldr	r1, [r4, #16]
 800835e:	464a      	mov	r2, r9
 8008360:	f7ff fe9c 	bl	800809c <memcpy>
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800836a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836e:	81a3      	strh	r3, [r4, #12]
 8008370:	6126      	str	r6, [r4, #16]
 8008372:	6165      	str	r5, [r4, #20]
 8008374:	444e      	add	r6, r9
 8008376:	eba5 0509 	sub.w	r5, r5, r9
 800837a:	6026      	str	r6, [r4, #0]
 800837c:	60a5      	str	r5, [r4, #8]
 800837e:	463e      	mov	r6, r7
 8008380:	42be      	cmp	r6, r7
 8008382:	d900      	bls.n	8008386 <__ssputs_r+0x86>
 8008384:	463e      	mov	r6, r7
 8008386:	6820      	ldr	r0, [r4, #0]
 8008388:	4632      	mov	r2, r6
 800838a:	4641      	mov	r1, r8
 800838c:	f000 faa8 	bl	80088e0 <memmove>
 8008390:	68a3      	ldr	r3, [r4, #8]
 8008392:	1b9b      	subs	r3, r3, r6
 8008394:	60a3      	str	r3, [r4, #8]
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	4433      	add	r3, r6
 800839a:	6023      	str	r3, [r4, #0]
 800839c:	2000      	movs	r0, #0
 800839e:	e7db      	b.n	8008358 <__ssputs_r+0x58>
 80083a0:	462a      	mov	r2, r5
 80083a2:	f000 fab7 	bl	8008914 <_realloc_r>
 80083a6:	4606      	mov	r6, r0
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d1e1      	bne.n	8008370 <__ssputs_r+0x70>
 80083ac:	6921      	ldr	r1, [r4, #16]
 80083ae:	4650      	mov	r0, sl
 80083b0:	f7ff fe8a 	bl	80080c8 <_free_r>
 80083b4:	e7c7      	b.n	8008346 <__ssputs_r+0x46>
	...

080083b8 <_svfiprintf_r>:
 80083b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083bc:	4698      	mov	r8, r3
 80083be:	898b      	ldrh	r3, [r1, #12]
 80083c0:	061b      	lsls	r3, r3, #24
 80083c2:	b09d      	sub	sp, #116	; 0x74
 80083c4:	4607      	mov	r7, r0
 80083c6:	460d      	mov	r5, r1
 80083c8:	4614      	mov	r4, r2
 80083ca:	d50e      	bpl.n	80083ea <_svfiprintf_r+0x32>
 80083cc:	690b      	ldr	r3, [r1, #16]
 80083ce:	b963      	cbnz	r3, 80083ea <_svfiprintf_r+0x32>
 80083d0:	2140      	movs	r1, #64	; 0x40
 80083d2:	f7ff fee5 	bl	80081a0 <_malloc_r>
 80083d6:	6028      	str	r0, [r5, #0]
 80083d8:	6128      	str	r0, [r5, #16]
 80083da:	b920      	cbnz	r0, 80083e6 <_svfiprintf_r+0x2e>
 80083dc:	230c      	movs	r3, #12
 80083de:	603b      	str	r3, [r7, #0]
 80083e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083e4:	e0d1      	b.n	800858a <_svfiprintf_r+0x1d2>
 80083e6:	2340      	movs	r3, #64	; 0x40
 80083e8:	616b      	str	r3, [r5, #20]
 80083ea:	2300      	movs	r3, #0
 80083ec:	9309      	str	r3, [sp, #36]	; 0x24
 80083ee:	2320      	movs	r3, #32
 80083f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80083f8:	2330      	movs	r3, #48	; 0x30
 80083fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80085a4 <_svfiprintf_r+0x1ec>
 80083fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008402:	f04f 0901 	mov.w	r9, #1
 8008406:	4623      	mov	r3, r4
 8008408:	469a      	mov	sl, r3
 800840a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800840e:	b10a      	cbz	r2, 8008414 <_svfiprintf_r+0x5c>
 8008410:	2a25      	cmp	r2, #37	; 0x25
 8008412:	d1f9      	bne.n	8008408 <_svfiprintf_r+0x50>
 8008414:	ebba 0b04 	subs.w	fp, sl, r4
 8008418:	d00b      	beq.n	8008432 <_svfiprintf_r+0x7a>
 800841a:	465b      	mov	r3, fp
 800841c:	4622      	mov	r2, r4
 800841e:	4629      	mov	r1, r5
 8008420:	4638      	mov	r0, r7
 8008422:	f7ff ff6d 	bl	8008300 <__ssputs_r>
 8008426:	3001      	adds	r0, #1
 8008428:	f000 80aa 	beq.w	8008580 <_svfiprintf_r+0x1c8>
 800842c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800842e:	445a      	add	r2, fp
 8008430:	9209      	str	r2, [sp, #36]	; 0x24
 8008432:	f89a 3000 	ldrb.w	r3, [sl]
 8008436:	2b00      	cmp	r3, #0
 8008438:	f000 80a2 	beq.w	8008580 <_svfiprintf_r+0x1c8>
 800843c:	2300      	movs	r3, #0
 800843e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008442:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008446:	f10a 0a01 	add.w	sl, sl, #1
 800844a:	9304      	str	r3, [sp, #16]
 800844c:	9307      	str	r3, [sp, #28]
 800844e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008452:	931a      	str	r3, [sp, #104]	; 0x68
 8008454:	4654      	mov	r4, sl
 8008456:	2205      	movs	r2, #5
 8008458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800845c:	4851      	ldr	r0, [pc, #324]	; (80085a4 <_svfiprintf_r+0x1ec>)
 800845e:	f7f7 febf 	bl	80001e0 <memchr>
 8008462:	9a04      	ldr	r2, [sp, #16]
 8008464:	b9d8      	cbnz	r0, 800849e <_svfiprintf_r+0xe6>
 8008466:	06d0      	lsls	r0, r2, #27
 8008468:	bf44      	itt	mi
 800846a:	2320      	movmi	r3, #32
 800846c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008470:	0711      	lsls	r1, r2, #28
 8008472:	bf44      	itt	mi
 8008474:	232b      	movmi	r3, #43	; 0x2b
 8008476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800847a:	f89a 3000 	ldrb.w	r3, [sl]
 800847e:	2b2a      	cmp	r3, #42	; 0x2a
 8008480:	d015      	beq.n	80084ae <_svfiprintf_r+0xf6>
 8008482:	9a07      	ldr	r2, [sp, #28]
 8008484:	4654      	mov	r4, sl
 8008486:	2000      	movs	r0, #0
 8008488:	f04f 0c0a 	mov.w	ip, #10
 800848c:	4621      	mov	r1, r4
 800848e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008492:	3b30      	subs	r3, #48	; 0x30
 8008494:	2b09      	cmp	r3, #9
 8008496:	d94e      	bls.n	8008536 <_svfiprintf_r+0x17e>
 8008498:	b1b0      	cbz	r0, 80084c8 <_svfiprintf_r+0x110>
 800849a:	9207      	str	r2, [sp, #28]
 800849c:	e014      	b.n	80084c8 <_svfiprintf_r+0x110>
 800849e:	eba0 0308 	sub.w	r3, r0, r8
 80084a2:	fa09 f303 	lsl.w	r3, r9, r3
 80084a6:	4313      	orrs	r3, r2
 80084a8:	9304      	str	r3, [sp, #16]
 80084aa:	46a2      	mov	sl, r4
 80084ac:	e7d2      	b.n	8008454 <_svfiprintf_r+0x9c>
 80084ae:	9b03      	ldr	r3, [sp, #12]
 80084b0:	1d19      	adds	r1, r3, #4
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	9103      	str	r1, [sp, #12]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	bfbb      	ittet	lt
 80084ba:	425b      	neglt	r3, r3
 80084bc:	f042 0202 	orrlt.w	r2, r2, #2
 80084c0:	9307      	strge	r3, [sp, #28]
 80084c2:	9307      	strlt	r3, [sp, #28]
 80084c4:	bfb8      	it	lt
 80084c6:	9204      	strlt	r2, [sp, #16]
 80084c8:	7823      	ldrb	r3, [r4, #0]
 80084ca:	2b2e      	cmp	r3, #46	; 0x2e
 80084cc:	d10c      	bne.n	80084e8 <_svfiprintf_r+0x130>
 80084ce:	7863      	ldrb	r3, [r4, #1]
 80084d0:	2b2a      	cmp	r3, #42	; 0x2a
 80084d2:	d135      	bne.n	8008540 <_svfiprintf_r+0x188>
 80084d4:	9b03      	ldr	r3, [sp, #12]
 80084d6:	1d1a      	adds	r2, r3, #4
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	9203      	str	r2, [sp, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	bfb8      	it	lt
 80084e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80084e4:	3402      	adds	r4, #2
 80084e6:	9305      	str	r3, [sp, #20]
 80084e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80085b4 <_svfiprintf_r+0x1fc>
 80084ec:	7821      	ldrb	r1, [r4, #0]
 80084ee:	2203      	movs	r2, #3
 80084f0:	4650      	mov	r0, sl
 80084f2:	f7f7 fe75 	bl	80001e0 <memchr>
 80084f6:	b140      	cbz	r0, 800850a <_svfiprintf_r+0x152>
 80084f8:	2340      	movs	r3, #64	; 0x40
 80084fa:	eba0 000a 	sub.w	r0, r0, sl
 80084fe:	fa03 f000 	lsl.w	r0, r3, r0
 8008502:	9b04      	ldr	r3, [sp, #16]
 8008504:	4303      	orrs	r3, r0
 8008506:	3401      	adds	r4, #1
 8008508:	9304      	str	r3, [sp, #16]
 800850a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800850e:	4826      	ldr	r0, [pc, #152]	; (80085a8 <_svfiprintf_r+0x1f0>)
 8008510:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008514:	2206      	movs	r2, #6
 8008516:	f7f7 fe63 	bl	80001e0 <memchr>
 800851a:	2800      	cmp	r0, #0
 800851c:	d038      	beq.n	8008590 <_svfiprintf_r+0x1d8>
 800851e:	4b23      	ldr	r3, [pc, #140]	; (80085ac <_svfiprintf_r+0x1f4>)
 8008520:	bb1b      	cbnz	r3, 800856a <_svfiprintf_r+0x1b2>
 8008522:	9b03      	ldr	r3, [sp, #12]
 8008524:	3307      	adds	r3, #7
 8008526:	f023 0307 	bic.w	r3, r3, #7
 800852a:	3308      	adds	r3, #8
 800852c:	9303      	str	r3, [sp, #12]
 800852e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008530:	4433      	add	r3, r6
 8008532:	9309      	str	r3, [sp, #36]	; 0x24
 8008534:	e767      	b.n	8008406 <_svfiprintf_r+0x4e>
 8008536:	fb0c 3202 	mla	r2, ip, r2, r3
 800853a:	460c      	mov	r4, r1
 800853c:	2001      	movs	r0, #1
 800853e:	e7a5      	b.n	800848c <_svfiprintf_r+0xd4>
 8008540:	2300      	movs	r3, #0
 8008542:	3401      	adds	r4, #1
 8008544:	9305      	str	r3, [sp, #20]
 8008546:	4619      	mov	r1, r3
 8008548:	f04f 0c0a 	mov.w	ip, #10
 800854c:	4620      	mov	r0, r4
 800854e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008552:	3a30      	subs	r2, #48	; 0x30
 8008554:	2a09      	cmp	r2, #9
 8008556:	d903      	bls.n	8008560 <_svfiprintf_r+0x1a8>
 8008558:	2b00      	cmp	r3, #0
 800855a:	d0c5      	beq.n	80084e8 <_svfiprintf_r+0x130>
 800855c:	9105      	str	r1, [sp, #20]
 800855e:	e7c3      	b.n	80084e8 <_svfiprintf_r+0x130>
 8008560:	fb0c 2101 	mla	r1, ip, r1, r2
 8008564:	4604      	mov	r4, r0
 8008566:	2301      	movs	r3, #1
 8008568:	e7f0      	b.n	800854c <_svfiprintf_r+0x194>
 800856a:	ab03      	add	r3, sp, #12
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	462a      	mov	r2, r5
 8008570:	4b0f      	ldr	r3, [pc, #60]	; (80085b0 <_svfiprintf_r+0x1f8>)
 8008572:	a904      	add	r1, sp, #16
 8008574:	4638      	mov	r0, r7
 8008576:	f3af 8000 	nop.w
 800857a:	1c42      	adds	r2, r0, #1
 800857c:	4606      	mov	r6, r0
 800857e:	d1d6      	bne.n	800852e <_svfiprintf_r+0x176>
 8008580:	89ab      	ldrh	r3, [r5, #12]
 8008582:	065b      	lsls	r3, r3, #25
 8008584:	f53f af2c 	bmi.w	80083e0 <_svfiprintf_r+0x28>
 8008588:	9809      	ldr	r0, [sp, #36]	; 0x24
 800858a:	b01d      	add	sp, #116	; 0x74
 800858c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008590:	ab03      	add	r3, sp, #12
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	462a      	mov	r2, r5
 8008596:	4b06      	ldr	r3, [pc, #24]	; (80085b0 <_svfiprintf_r+0x1f8>)
 8008598:	a904      	add	r1, sp, #16
 800859a:	4638      	mov	r0, r7
 800859c:	f000 f87a 	bl	8008694 <_printf_i>
 80085a0:	e7eb      	b.n	800857a <_svfiprintf_r+0x1c2>
 80085a2:	bf00      	nop
 80085a4:	080090c0 	.word	0x080090c0
 80085a8:	080090ca 	.word	0x080090ca
 80085ac:	00000000 	.word	0x00000000
 80085b0:	08008301 	.word	0x08008301
 80085b4:	080090c6 	.word	0x080090c6

080085b8 <_printf_common>:
 80085b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085bc:	4616      	mov	r6, r2
 80085be:	4699      	mov	r9, r3
 80085c0:	688a      	ldr	r2, [r1, #8]
 80085c2:	690b      	ldr	r3, [r1, #16]
 80085c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085c8:	4293      	cmp	r3, r2
 80085ca:	bfb8      	it	lt
 80085cc:	4613      	movlt	r3, r2
 80085ce:	6033      	str	r3, [r6, #0]
 80085d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085d4:	4607      	mov	r7, r0
 80085d6:	460c      	mov	r4, r1
 80085d8:	b10a      	cbz	r2, 80085de <_printf_common+0x26>
 80085da:	3301      	adds	r3, #1
 80085dc:	6033      	str	r3, [r6, #0]
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	0699      	lsls	r1, r3, #26
 80085e2:	bf42      	ittt	mi
 80085e4:	6833      	ldrmi	r3, [r6, #0]
 80085e6:	3302      	addmi	r3, #2
 80085e8:	6033      	strmi	r3, [r6, #0]
 80085ea:	6825      	ldr	r5, [r4, #0]
 80085ec:	f015 0506 	ands.w	r5, r5, #6
 80085f0:	d106      	bne.n	8008600 <_printf_common+0x48>
 80085f2:	f104 0a19 	add.w	sl, r4, #25
 80085f6:	68e3      	ldr	r3, [r4, #12]
 80085f8:	6832      	ldr	r2, [r6, #0]
 80085fa:	1a9b      	subs	r3, r3, r2
 80085fc:	42ab      	cmp	r3, r5
 80085fe:	dc26      	bgt.n	800864e <_printf_common+0x96>
 8008600:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008604:	1e13      	subs	r3, r2, #0
 8008606:	6822      	ldr	r2, [r4, #0]
 8008608:	bf18      	it	ne
 800860a:	2301      	movne	r3, #1
 800860c:	0692      	lsls	r2, r2, #26
 800860e:	d42b      	bmi.n	8008668 <_printf_common+0xb0>
 8008610:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008614:	4649      	mov	r1, r9
 8008616:	4638      	mov	r0, r7
 8008618:	47c0      	blx	r8
 800861a:	3001      	adds	r0, #1
 800861c:	d01e      	beq.n	800865c <_printf_common+0xa4>
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	68e5      	ldr	r5, [r4, #12]
 8008622:	6832      	ldr	r2, [r6, #0]
 8008624:	f003 0306 	and.w	r3, r3, #6
 8008628:	2b04      	cmp	r3, #4
 800862a:	bf08      	it	eq
 800862c:	1aad      	subeq	r5, r5, r2
 800862e:	68a3      	ldr	r3, [r4, #8]
 8008630:	6922      	ldr	r2, [r4, #16]
 8008632:	bf0c      	ite	eq
 8008634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008638:	2500      	movne	r5, #0
 800863a:	4293      	cmp	r3, r2
 800863c:	bfc4      	itt	gt
 800863e:	1a9b      	subgt	r3, r3, r2
 8008640:	18ed      	addgt	r5, r5, r3
 8008642:	2600      	movs	r6, #0
 8008644:	341a      	adds	r4, #26
 8008646:	42b5      	cmp	r5, r6
 8008648:	d11a      	bne.n	8008680 <_printf_common+0xc8>
 800864a:	2000      	movs	r0, #0
 800864c:	e008      	b.n	8008660 <_printf_common+0xa8>
 800864e:	2301      	movs	r3, #1
 8008650:	4652      	mov	r2, sl
 8008652:	4649      	mov	r1, r9
 8008654:	4638      	mov	r0, r7
 8008656:	47c0      	blx	r8
 8008658:	3001      	adds	r0, #1
 800865a:	d103      	bne.n	8008664 <_printf_common+0xac>
 800865c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008664:	3501      	adds	r5, #1
 8008666:	e7c6      	b.n	80085f6 <_printf_common+0x3e>
 8008668:	18e1      	adds	r1, r4, r3
 800866a:	1c5a      	adds	r2, r3, #1
 800866c:	2030      	movs	r0, #48	; 0x30
 800866e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008672:	4422      	add	r2, r4
 8008674:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800867c:	3302      	adds	r3, #2
 800867e:	e7c7      	b.n	8008610 <_printf_common+0x58>
 8008680:	2301      	movs	r3, #1
 8008682:	4622      	mov	r2, r4
 8008684:	4649      	mov	r1, r9
 8008686:	4638      	mov	r0, r7
 8008688:	47c0      	blx	r8
 800868a:	3001      	adds	r0, #1
 800868c:	d0e6      	beq.n	800865c <_printf_common+0xa4>
 800868e:	3601      	adds	r6, #1
 8008690:	e7d9      	b.n	8008646 <_printf_common+0x8e>
	...

08008694 <_printf_i>:
 8008694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008698:	7e0f      	ldrb	r7, [r1, #24]
 800869a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800869c:	2f78      	cmp	r7, #120	; 0x78
 800869e:	4691      	mov	r9, r2
 80086a0:	4680      	mov	r8, r0
 80086a2:	460c      	mov	r4, r1
 80086a4:	469a      	mov	sl, r3
 80086a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086aa:	d807      	bhi.n	80086bc <_printf_i+0x28>
 80086ac:	2f62      	cmp	r7, #98	; 0x62
 80086ae:	d80a      	bhi.n	80086c6 <_printf_i+0x32>
 80086b0:	2f00      	cmp	r7, #0
 80086b2:	f000 80d8 	beq.w	8008866 <_printf_i+0x1d2>
 80086b6:	2f58      	cmp	r7, #88	; 0x58
 80086b8:	f000 80a3 	beq.w	8008802 <_printf_i+0x16e>
 80086bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086c4:	e03a      	b.n	800873c <_printf_i+0xa8>
 80086c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086ca:	2b15      	cmp	r3, #21
 80086cc:	d8f6      	bhi.n	80086bc <_printf_i+0x28>
 80086ce:	a101      	add	r1, pc, #4	; (adr r1, 80086d4 <_printf_i+0x40>)
 80086d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086d4:	0800872d 	.word	0x0800872d
 80086d8:	08008741 	.word	0x08008741
 80086dc:	080086bd 	.word	0x080086bd
 80086e0:	080086bd 	.word	0x080086bd
 80086e4:	080086bd 	.word	0x080086bd
 80086e8:	080086bd 	.word	0x080086bd
 80086ec:	08008741 	.word	0x08008741
 80086f0:	080086bd 	.word	0x080086bd
 80086f4:	080086bd 	.word	0x080086bd
 80086f8:	080086bd 	.word	0x080086bd
 80086fc:	080086bd 	.word	0x080086bd
 8008700:	0800884d 	.word	0x0800884d
 8008704:	08008771 	.word	0x08008771
 8008708:	0800882f 	.word	0x0800882f
 800870c:	080086bd 	.word	0x080086bd
 8008710:	080086bd 	.word	0x080086bd
 8008714:	0800886f 	.word	0x0800886f
 8008718:	080086bd 	.word	0x080086bd
 800871c:	08008771 	.word	0x08008771
 8008720:	080086bd 	.word	0x080086bd
 8008724:	080086bd 	.word	0x080086bd
 8008728:	08008837 	.word	0x08008837
 800872c:	682b      	ldr	r3, [r5, #0]
 800872e:	1d1a      	adds	r2, r3, #4
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	602a      	str	r2, [r5, #0]
 8008734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800873c:	2301      	movs	r3, #1
 800873e:	e0a3      	b.n	8008888 <_printf_i+0x1f4>
 8008740:	6820      	ldr	r0, [r4, #0]
 8008742:	6829      	ldr	r1, [r5, #0]
 8008744:	0606      	lsls	r6, r0, #24
 8008746:	f101 0304 	add.w	r3, r1, #4
 800874a:	d50a      	bpl.n	8008762 <_printf_i+0xce>
 800874c:	680e      	ldr	r6, [r1, #0]
 800874e:	602b      	str	r3, [r5, #0]
 8008750:	2e00      	cmp	r6, #0
 8008752:	da03      	bge.n	800875c <_printf_i+0xc8>
 8008754:	232d      	movs	r3, #45	; 0x2d
 8008756:	4276      	negs	r6, r6
 8008758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800875c:	485e      	ldr	r0, [pc, #376]	; (80088d8 <_printf_i+0x244>)
 800875e:	230a      	movs	r3, #10
 8008760:	e019      	b.n	8008796 <_printf_i+0x102>
 8008762:	680e      	ldr	r6, [r1, #0]
 8008764:	602b      	str	r3, [r5, #0]
 8008766:	f010 0f40 	tst.w	r0, #64	; 0x40
 800876a:	bf18      	it	ne
 800876c:	b236      	sxthne	r6, r6
 800876e:	e7ef      	b.n	8008750 <_printf_i+0xbc>
 8008770:	682b      	ldr	r3, [r5, #0]
 8008772:	6820      	ldr	r0, [r4, #0]
 8008774:	1d19      	adds	r1, r3, #4
 8008776:	6029      	str	r1, [r5, #0]
 8008778:	0601      	lsls	r1, r0, #24
 800877a:	d501      	bpl.n	8008780 <_printf_i+0xec>
 800877c:	681e      	ldr	r6, [r3, #0]
 800877e:	e002      	b.n	8008786 <_printf_i+0xf2>
 8008780:	0646      	lsls	r6, r0, #25
 8008782:	d5fb      	bpl.n	800877c <_printf_i+0xe8>
 8008784:	881e      	ldrh	r6, [r3, #0]
 8008786:	4854      	ldr	r0, [pc, #336]	; (80088d8 <_printf_i+0x244>)
 8008788:	2f6f      	cmp	r7, #111	; 0x6f
 800878a:	bf0c      	ite	eq
 800878c:	2308      	moveq	r3, #8
 800878e:	230a      	movne	r3, #10
 8008790:	2100      	movs	r1, #0
 8008792:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008796:	6865      	ldr	r5, [r4, #4]
 8008798:	60a5      	str	r5, [r4, #8]
 800879a:	2d00      	cmp	r5, #0
 800879c:	bfa2      	ittt	ge
 800879e:	6821      	ldrge	r1, [r4, #0]
 80087a0:	f021 0104 	bicge.w	r1, r1, #4
 80087a4:	6021      	strge	r1, [r4, #0]
 80087a6:	b90e      	cbnz	r6, 80087ac <_printf_i+0x118>
 80087a8:	2d00      	cmp	r5, #0
 80087aa:	d04d      	beq.n	8008848 <_printf_i+0x1b4>
 80087ac:	4615      	mov	r5, r2
 80087ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80087b2:	fb03 6711 	mls	r7, r3, r1, r6
 80087b6:	5dc7      	ldrb	r7, [r0, r7]
 80087b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087bc:	4637      	mov	r7, r6
 80087be:	42bb      	cmp	r3, r7
 80087c0:	460e      	mov	r6, r1
 80087c2:	d9f4      	bls.n	80087ae <_printf_i+0x11a>
 80087c4:	2b08      	cmp	r3, #8
 80087c6:	d10b      	bne.n	80087e0 <_printf_i+0x14c>
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	07de      	lsls	r6, r3, #31
 80087cc:	d508      	bpl.n	80087e0 <_printf_i+0x14c>
 80087ce:	6923      	ldr	r3, [r4, #16]
 80087d0:	6861      	ldr	r1, [r4, #4]
 80087d2:	4299      	cmp	r1, r3
 80087d4:	bfde      	ittt	le
 80087d6:	2330      	movle	r3, #48	; 0x30
 80087d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80087e0:	1b52      	subs	r2, r2, r5
 80087e2:	6122      	str	r2, [r4, #16]
 80087e4:	f8cd a000 	str.w	sl, [sp]
 80087e8:	464b      	mov	r3, r9
 80087ea:	aa03      	add	r2, sp, #12
 80087ec:	4621      	mov	r1, r4
 80087ee:	4640      	mov	r0, r8
 80087f0:	f7ff fee2 	bl	80085b8 <_printf_common>
 80087f4:	3001      	adds	r0, #1
 80087f6:	d14c      	bne.n	8008892 <_printf_i+0x1fe>
 80087f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087fc:	b004      	add	sp, #16
 80087fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008802:	4835      	ldr	r0, [pc, #212]	; (80088d8 <_printf_i+0x244>)
 8008804:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008808:	6829      	ldr	r1, [r5, #0]
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008810:	6029      	str	r1, [r5, #0]
 8008812:	061d      	lsls	r5, r3, #24
 8008814:	d514      	bpl.n	8008840 <_printf_i+0x1ac>
 8008816:	07df      	lsls	r7, r3, #31
 8008818:	bf44      	itt	mi
 800881a:	f043 0320 	orrmi.w	r3, r3, #32
 800881e:	6023      	strmi	r3, [r4, #0]
 8008820:	b91e      	cbnz	r6, 800882a <_printf_i+0x196>
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	f023 0320 	bic.w	r3, r3, #32
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	2310      	movs	r3, #16
 800882c:	e7b0      	b.n	8008790 <_printf_i+0xfc>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	f043 0320 	orr.w	r3, r3, #32
 8008834:	6023      	str	r3, [r4, #0]
 8008836:	2378      	movs	r3, #120	; 0x78
 8008838:	4828      	ldr	r0, [pc, #160]	; (80088dc <_printf_i+0x248>)
 800883a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800883e:	e7e3      	b.n	8008808 <_printf_i+0x174>
 8008840:	0659      	lsls	r1, r3, #25
 8008842:	bf48      	it	mi
 8008844:	b2b6      	uxthmi	r6, r6
 8008846:	e7e6      	b.n	8008816 <_printf_i+0x182>
 8008848:	4615      	mov	r5, r2
 800884a:	e7bb      	b.n	80087c4 <_printf_i+0x130>
 800884c:	682b      	ldr	r3, [r5, #0]
 800884e:	6826      	ldr	r6, [r4, #0]
 8008850:	6961      	ldr	r1, [r4, #20]
 8008852:	1d18      	adds	r0, r3, #4
 8008854:	6028      	str	r0, [r5, #0]
 8008856:	0635      	lsls	r5, r6, #24
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	d501      	bpl.n	8008860 <_printf_i+0x1cc>
 800885c:	6019      	str	r1, [r3, #0]
 800885e:	e002      	b.n	8008866 <_printf_i+0x1d2>
 8008860:	0670      	lsls	r0, r6, #25
 8008862:	d5fb      	bpl.n	800885c <_printf_i+0x1c8>
 8008864:	8019      	strh	r1, [r3, #0]
 8008866:	2300      	movs	r3, #0
 8008868:	6123      	str	r3, [r4, #16]
 800886a:	4615      	mov	r5, r2
 800886c:	e7ba      	b.n	80087e4 <_printf_i+0x150>
 800886e:	682b      	ldr	r3, [r5, #0]
 8008870:	1d1a      	adds	r2, r3, #4
 8008872:	602a      	str	r2, [r5, #0]
 8008874:	681d      	ldr	r5, [r3, #0]
 8008876:	6862      	ldr	r2, [r4, #4]
 8008878:	2100      	movs	r1, #0
 800887a:	4628      	mov	r0, r5
 800887c:	f7f7 fcb0 	bl	80001e0 <memchr>
 8008880:	b108      	cbz	r0, 8008886 <_printf_i+0x1f2>
 8008882:	1b40      	subs	r0, r0, r5
 8008884:	6060      	str	r0, [r4, #4]
 8008886:	6863      	ldr	r3, [r4, #4]
 8008888:	6123      	str	r3, [r4, #16]
 800888a:	2300      	movs	r3, #0
 800888c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008890:	e7a8      	b.n	80087e4 <_printf_i+0x150>
 8008892:	6923      	ldr	r3, [r4, #16]
 8008894:	462a      	mov	r2, r5
 8008896:	4649      	mov	r1, r9
 8008898:	4640      	mov	r0, r8
 800889a:	47d0      	blx	sl
 800889c:	3001      	adds	r0, #1
 800889e:	d0ab      	beq.n	80087f8 <_printf_i+0x164>
 80088a0:	6823      	ldr	r3, [r4, #0]
 80088a2:	079b      	lsls	r3, r3, #30
 80088a4:	d413      	bmi.n	80088ce <_printf_i+0x23a>
 80088a6:	68e0      	ldr	r0, [r4, #12]
 80088a8:	9b03      	ldr	r3, [sp, #12]
 80088aa:	4298      	cmp	r0, r3
 80088ac:	bfb8      	it	lt
 80088ae:	4618      	movlt	r0, r3
 80088b0:	e7a4      	b.n	80087fc <_printf_i+0x168>
 80088b2:	2301      	movs	r3, #1
 80088b4:	4632      	mov	r2, r6
 80088b6:	4649      	mov	r1, r9
 80088b8:	4640      	mov	r0, r8
 80088ba:	47d0      	blx	sl
 80088bc:	3001      	adds	r0, #1
 80088be:	d09b      	beq.n	80087f8 <_printf_i+0x164>
 80088c0:	3501      	adds	r5, #1
 80088c2:	68e3      	ldr	r3, [r4, #12]
 80088c4:	9903      	ldr	r1, [sp, #12]
 80088c6:	1a5b      	subs	r3, r3, r1
 80088c8:	42ab      	cmp	r3, r5
 80088ca:	dcf2      	bgt.n	80088b2 <_printf_i+0x21e>
 80088cc:	e7eb      	b.n	80088a6 <_printf_i+0x212>
 80088ce:	2500      	movs	r5, #0
 80088d0:	f104 0619 	add.w	r6, r4, #25
 80088d4:	e7f5      	b.n	80088c2 <_printf_i+0x22e>
 80088d6:	bf00      	nop
 80088d8:	080090d1 	.word	0x080090d1
 80088dc:	080090e2 	.word	0x080090e2

080088e0 <memmove>:
 80088e0:	4288      	cmp	r0, r1
 80088e2:	b510      	push	{r4, lr}
 80088e4:	eb01 0402 	add.w	r4, r1, r2
 80088e8:	d902      	bls.n	80088f0 <memmove+0x10>
 80088ea:	4284      	cmp	r4, r0
 80088ec:	4623      	mov	r3, r4
 80088ee:	d807      	bhi.n	8008900 <memmove+0x20>
 80088f0:	1e43      	subs	r3, r0, #1
 80088f2:	42a1      	cmp	r1, r4
 80088f4:	d008      	beq.n	8008908 <memmove+0x28>
 80088f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088fe:	e7f8      	b.n	80088f2 <memmove+0x12>
 8008900:	4402      	add	r2, r0
 8008902:	4601      	mov	r1, r0
 8008904:	428a      	cmp	r2, r1
 8008906:	d100      	bne.n	800890a <memmove+0x2a>
 8008908:	bd10      	pop	{r4, pc}
 800890a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800890e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008912:	e7f7      	b.n	8008904 <memmove+0x24>

08008914 <_realloc_r>:
 8008914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008918:	4680      	mov	r8, r0
 800891a:	4614      	mov	r4, r2
 800891c:	460e      	mov	r6, r1
 800891e:	b921      	cbnz	r1, 800892a <_realloc_r+0x16>
 8008920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008924:	4611      	mov	r1, r2
 8008926:	f7ff bc3b 	b.w	80081a0 <_malloc_r>
 800892a:	b92a      	cbnz	r2, 8008938 <_realloc_r+0x24>
 800892c:	f7ff fbcc 	bl	80080c8 <_free_r>
 8008930:	4625      	mov	r5, r4
 8008932:	4628      	mov	r0, r5
 8008934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008938:	f000 f81b 	bl	8008972 <_malloc_usable_size_r>
 800893c:	4284      	cmp	r4, r0
 800893e:	4607      	mov	r7, r0
 8008940:	d802      	bhi.n	8008948 <_realloc_r+0x34>
 8008942:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008946:	d812      	bhi.n	800896e <_realloc_r+0x5a>
 8008948:	4621      	mov	r1, r4
 800894a:	4640      	mov	r0, r8
 800894c:	f7ff fc28 	bl	80081a0 <_malloc_r>
 8008950:	4605      	mov	r5, r0
 8008952:	2800      	cmp	r0, #0
 8008954:	d0ed      	beq.n	8008932 <_realloc_r+0x1e>
 8008956:	42bc      	cmp	r4, r7
 8008958:	4622      	mov	r2, r4
 800895a:	4631      	mov	r1, r6
 800895c:	bf28      	it	cs
 800895e:	463a      	movcs	r2, r7
 8008960:	f7ff fb9c 	bl	800809c <memcpy>
 8008964:	4631      	mov	r1, r6
 8008966:	4640      	mov	r0, r8
 8008968:	f7ff fbae 	bl	80080c8 <_free_r>
 800896c:	e7e1      	b.n	8008932 <_realloc_r+0x1e>
 800896e:	4635      	mov	r5, r6
 8008970:	e7df      	b.n	8008932 <_realloc_r+0x1e>

08008972 <_malloc_usable_size_r>:
 8008972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008976:	1f18      	subs	r0, r3, #4
 8008978:	2b00      	cmp	r3, #0
 800897a:	bfbc      	itt	lt
 800897c:	580b      	ldrlt	r3, [r1, r0]
 800897e:	18c0      	addlt	r0, r0, r3
 8008980:	4770      	bx	lr
	...

08008984 <_init>:
 8008984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008986:	bf00      	nop
 8008988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898a:	bc08      	pop	{r3}
 800898c:	469e      	mov	lr, r3
 800898e:	4770      	bx	lr

08008990 <_fini>:
 8008990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008992:	bf00      	nop
 8008994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008996:	bc08      	pop	{r3}
 8008998:	469e      	mov	lr, r3
 800899a:	4770      	bx	lr
