
F407_start.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dbc  0800bdb0  0800bdb0  0001bdb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb6c  0800cb6c  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb6c  0800cb6c  0001cb6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb74  0800cb74  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb74  0800cb74  0001cb74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb78  0800cb78  0001cb78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  0800cb7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020108  2**0
                  CONTENTS
 10 .bss          00017590  20000108  20000108  00020108  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20017698  20017698  00020108  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d228  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044eb  00000000  00000000  0003d360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001928  00000000  00000000  00041850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001778  00000000  00000000  00043178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006dbd  00000000  00000000  000448f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021eb3  00000000  00000000  0004b6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d393a  00000000  00000000  0006d560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140e9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007464  00000000  00000000  00140eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000108 	.word	0x20000108
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bd98 	.word	0x0800bd98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000010c 	.word	0x2000010c
 80001cc:	0800bd98 	.word	0x0800bd98

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <transmit_string_at>:
	if(!strstr(buf_rx, "OK"))	return 0;

	return 1;
}

void transmit_string_at(char* buf_tx) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	transmit_at((uint8_t*)buf_tx, strlen(buf_tx));
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f7ff fe19 	bl	80001e4 <strlen>
 80005b2:	4603      	mov	r3, r0
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	4619      	mov	r1, r3
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f000 f805 	bl	80005c8 <transmit_at>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <transmit_at>:

void transmit_at(uint8_t* buf_tx, uint16_t size)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart3, buf_tx, size, -1);
 80005d4:	887a      	ldrh	r2, [r7, #2]
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <transmit_at+0x30>)
 80005de:	f005 fc4a 	bl	8005e76 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, buf_tx, size, -1);
 80005e2:	887a      	ldrh	r2, [r7, #2]
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	4804      	ldr	r0, [pc, #16]	; (80005fc <transmit_at+0x34>)
 80005ec:	f005 fc43 	bl	8005e76 <HAL_UART_Transmit>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20014bb0 	.word	0x20014bb0
 80005fc:	20014b6c 	.word	0x20014b6c

08000600 <receive_at_answer>:

void receive_at_answer(char* buf_rx, uint16_t len, uint16_t wait_ms)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	807b      	strh	r3, [r7, #2]
 800060c:	4613      	mov	r3, r2
 800060e:	803b      	strh	r3, [r7, #0]
	memset(buf_rx, 0, len);
 8000610:	887b      	ldrh	r3, [r7, #2]
 8000612:	461a      	mov	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f009 fcfe 	bl	800a018 <memset>
	HAL_UART_Receive(&huart3,(uint8_t *)buf_rx, len, wait_ms);
 800061c:	883b      	ldrh	r3, [r7, #0]
 800061e:	887a      	ldrh	r2, [r7, #2]
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	4809      	ldr	r0, [pc, #36]	; (8000648 <receive_at_answer+0x48>)
 8000624:	f005 fcb9 	bl	8005f9a <HAL_UART_Receive>
	HAL_UART_Transmit(&huart4, (uint8_t *)buf_rx, strlen(buf_rx), -1);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff fddb 	bl	80001e4 <strlen>
 800062e:	4603      	mov	r3, r0
 8000630:	b29a      	uxth	r2, r3
 8000632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <receive_at_answer+0x4c>)
 800063a:	f005 fc1c 	bl	8005e76 <HAL_UART_Transmit>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20014bb0 	.word	0x20014bb0
 800064c:	20014b6c 	.word	0x20014b6c

08000650 <transmit_to_client>:
	transmit_string_at("AT+CIPCLOSE=0\r\n");
	receive_at_answer(buf_rx, 30, 100);
}

void transmit_to_client(List* bytes, uint8_t client)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000656:	af00      	add	r7, sp, #0
 8000658:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800065c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8000660:	6018      	str	r0, [r3, #0]
 8000662:	460a      	mov	r2, r1
 8000664:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000668:	f2a3 431d 	subw	r3, r3, #1053	; 0x41d
 800066c:	701a      	strb	r2, [r3, #0]
	char buf_rx[BUF_LEN] = "";
 800066e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000672:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	3304      	adds	r3, #4
 800067c:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f009 fcc8 	bl	800a018 <memset>
	char tmp_str[20] = {0,};
 8000688:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800068c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	3304      	adds	r3, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]

	sprintf(tmp_str,"AT+CIPSEND=%u,%u\r\n", client, bytes->length);
 80006a0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80006a4:	f2a3 431d 	subw	r3, r3, #1053	; 0x41d
 80006a8:	781a      	ldrb	r2, [r3, #0]
 80006aa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80006ae:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80006b8:	f107 000c 	add.w	r0, r7, #12
 80006bc:	4916      	ldr	r1, [pc, #88]	; (8000718 <transmit_to_client+0xc8>)
 80006be:	f009 ffa1 	bl	800a604 <siprintf>
	transmit_string_at(tmp_str);
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff6c 	bl	80005a4 <transmit_string_at>
	receive_at_answer(buf_rx, BUF_LEN, 100);
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	2264      	movs	r2, #100	; 0x64
 80006d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff92 	bl	8000600 <receive_at_answer>
	transmit_at(bytes->items, bytes->length);
 80006dc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80006e0:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80006ea:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	4610      	mov	r0, r2
 80006fa:	f7ff ff65 	bl	80005c8 <transmit_at>
	receive_at_answer(buf_rx, BUF_LEN, 100);
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2264      	movs	r2, #100	; 0x64
 8000704:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff79 	bl	8000600 <receive_at_answer>
}
 800070e:	bf00      	nop
 8000710:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	0800be78 	.word	0x0800be78

0800071c <get_next_list>:

#define LISTS_COUNT 150
List lists[LISTS_COUNT];
uint8_t next_list = 0;

List* get_next_list(uint32_t item_size) {
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	List* res = &lists[next_list++];
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <get_next_list+0x50>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	1c5a      	adds	r2, r3, #1
 800072a:	b2d1      	uxtb	r1, r2
 800072c:	4a0f      	ldr	r2, [pc, #60]	; (800076c <get_next_list+0x50>)
 800072e:	7011      	strb	r1, [r2, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4613      	mov	r3, r2
 8000734:	019b      	lsls	r3, r3, #6
 8000736:	4413      	add	r3, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <get_next_list+0x54>)
 800073c:	4413      	add	r3, r2
 800073e:	60fb      	str	r3, [r7, #12]
	res->item_size = item_size;
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	res->length = 0;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	2200      	movs	r2, #0
 800074c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	if (next_list == LISTS_COUNT) next_list = 0;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <get_next_list+0x50>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b96      	cmp	r3, #150	; 0x96
 8000756:	d102      	bne.n	800075e <get_next_list+0x42>
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <get_next_list+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
	return res;
 800075e:	68fb      	ldr	r3, [r7, #12]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	200131d4 	.word	0x200131d4
 8000770:	20000124 	.word	0x20000124

08000774 <free_list>:

void free_list(List* list) {
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	list->length = 0;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <list_add>:

void list_add(List* list, const void* item) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
	list_copy_to(list, list->length, item, 1);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80007a0:	2301      	movs	r3, #1
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 f816 	bl	80007d6 <list_copy_to>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <list_list_copy_to>:

void list_list_copy_to(List* list, uint32_t index, const List* items) {
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b084      	sub	sp, #16
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	60f8      	str	r0, [r7, #12]
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
	list_copy_to(list, index, items->items, items->length);
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80007c6:	68b9      	ldr	r1, [r7, #8]
 80007c8:	68f8      	ldr	r0, [r7, #12]
 80007ca:	f000 f804 	bl	80007d6 <list_copy_to>
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <list_copy_to>:

void list_copy_to(List* list, uint32_t index, const void* items, uint32_t items_length) {
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b086      	sub	sp, #24
 80007da:	af00      	add	r7, sp, #0
 80007dc:	60f8      	str	r0, [r7, #12]
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
 80007e2:	603b      	str	r3, [r7, #0]
	uint32_t required = index + items_length;
 80007e4:	68ba      	ldr	r2, [r7, #8]
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	4413      	add	r3, r2
 80007ea:	617b      	str	r3, [r7, #20]

	void* target = (void*)list_get(list, index);
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80007f4:	68b9      	ldr	r1, [r7, #8]
 80007f6:	fb01 f303 	mul.w	r3, r1, r3
 80007fa:	4413      	add	r3, r2
 80007fc:	613b      	str	r3, [r7, #16]
	memcpy(target, items, list->item_size * items_length);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000804:	683a      	ldr	r2, [r7, #0]
 8000806:	fb02 f303 	mul.w	r3, r2, r3
 800080a:	461a      	mov	r2, r3
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	6938      	ldr	r0, [r7, #16]
 8000810:	f009 fbf4 	bl	8009ffc <memcpy>
	if (required > list->length) list->length = required;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800081a:	697a      	ldr	r2, [r7, #20]
 800081c:	429a      	cmp	r2, r3
 800081e:	d903      	bls.n	8000828 <list_copy_to+0x52>
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8000828:	bf00      	nop
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <free_packet>:
#include "packet.h"

void free_packet(Packet* packet) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	if (packet->payload) {
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d004      	beq.n	800084a <free_packet+0x1a>
		free_list(packet->payload);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff95 	bl	8000774 <free_list>
	}
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <get_packet_bytes>:

		buffer_drop_first(bytes, 5 + packet->payload->length);
	}
}

List* get_packet_bytes(Packet* packet) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	uint32_t index = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
	List* res = get_next_list(sizeof(uint8_t));
 8000860:	2001      	movs	r0, #1
 8000862:	f7ff ff5b 	bl	800071c <get_next_list>
 8000866:	60b8      	str	r0, [r7, #8]

	index += serialize_concat_helper(res, index, &packet->request, (Serializer)serialize_uint8);
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <get_packet_bytes+0x60>)
 800086c:	68f9      	ldr	r1, [r7, #12]
 800086e:	68b8      	ldr	r0, [r7, #8]
 8000870:	f000 f9c5 	bl	8000bfe <serialize_concat_helper>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	4413      	add	r3, r2
 800087c:	60fb      	str	r3, [r7, #12]
	index += serialize_concat_helper(res, index, &packet->payload->length, (Serializer)serialize_uint32);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <get_packet_bytes+0x64>)
 8000888:	68f9      	ldr	r1, [r7, #12]
 800088a:	68b8      	ldr	r0, [r7, #8]
 800088c:	f000 f9b7 	bl	8000bfe <serialize_concat_helper>
 8000890:	4603      	mov	r3, r0
 8000892:	461a      	mov	r2, r3
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4413      	add	r3, r2
 8000898:	60fb      	str	r3, [r7, #12]
	list_list_copy_to(res, index, packet->payload);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	461a      	mov	r2, r3
 80008a0:	68f9      	ldr	r1, [r7, #12]
 80008a2:	68b8      	ldr	r0, [r7, #8]
 80008a4:	f7ff ff85 	bl	80007b2 <list_list_copy_to>

	return res;
 80008a8:	68bb      	ldr	r3, [r7, #8]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	08000bdf 	.word	0x08000bdf
 80008b8:	08000bbf 	.word	0x08000bbf

080008bc <parse_send_data>:
#include "parse_at.h"

uint8_t parse_send_data(const uint8_t* input, CommandMeta* meta) {
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	uint8_t res = strncmp((const char*)input, ">", 1) == 0;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	781a      	ldrb	r2, [r3, #0]
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <parse_send_data+0x3c>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	bf0c      	ite	eq
 80008d4:	2301      	moveq	r3, #1
 80008d6:	2300      	movne	r3, #0
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	73fb      	strb	r3, [r7, #15]
	if (res) meta->command = CMD_SEND_DATA;
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <parse_send_data+0x2c>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	2204      	movs	r2, #4
 80008e6:	701a      	strb	r2, [r3, #0]
	return res;
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	0800be8c 	.word	0x0800be8c

080008fc <parse_ok>:

uint8_t parse_ok(const uint8_t* input, CommandMeta* meta) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
	uint8_t res = strncmp((const char*)input, "OK", 2) == 0;
 8000906:	2202      	movs	r2, #2
 8000908:	490a      	ldr	r1, [pc, #40]	; (8000934 <parse_ok+0x38>)
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f009 ff0b 	bl	800a726 <strncmp>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	bf0c      	ite	eq
 8000916:	2301      	moveq	r3, #1
 8000918:	2300      	movne	r3, #0
 800091a:	b2db      	uxtb	r3, r3
 800091c:	73fb      	strb	r3, [r7, #15]
	if (res) meta->command = CMD_OK;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d002      	beq.n	800092a <parse_ok+0x2e>
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	2205      	movs	r2, #5
 8000928:	701a      	strb	r2, [r3, #0]
	return res;
 800092a:	7bfb      	ldrb	r3, [r7, #15]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	0800be90 	.word	0x0800be90

08000938 <parse_connect>:

uint8_t parse_connect(const uint8_t* input, CommandMeta* meta) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
    char command[8];
    unsigned int client_id;
    uint8_t res = sscanf((const char*)input, "%u,%7s", &client_id, command) == 2;
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	f107 0208 	add.w	r2, r7, #8
 800094a:	4915      	ldr	r1, [pc, #84]	; (80009a0 <parse_connect+0x68>)
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f009 fe79 	bl	800a644 <siscanf>
 8000952:	4603      	mov	r3, r0
 8000954:	2b02      	cmp	r3, #2
 8000956:	bf0c      	ite	eq
 8000958:	2301      	moveq	r3, #1
 800095a:	2300      	movne	r3, #0
 800095c:	b2db      	uxtb	r3, r3
 800095e:	75fb      	strb	r3, [r7, #23]
    res = res && strcmp(command, "CONNECT") == 0;
 8000960:	7dfb      	ldrb	r3, [r7, #23]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d00a      	beq.n	800097c <parse_connect+0x44>
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	490e      	ldr	r1, [pc, #56]	; (80009a4 <parse_connect+0x6c>)
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fc2f 	bl	80001d0 <strcmp>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d101      	bne.n	800097c <parse_connect+0x44>
 8000978:	2301      	movs	r3, #1
 800097a:	e000      	b.n	800097e <parse_connect+0x46>
 800097c:	2300      	movs	r3, #0
 800097e:	75fb      	strb	r3, [r7, #23]
    if (res) {
 8000980:	7dfb      	ldrb	r3, [r7, #23]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d006      	beq.n	8000994 <parse_connect+0x5c>
    	meta->client_id = client_id;
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	705a      	strb	r2, [r3, #1]
    	meta->command = CMD_CONNECT;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	2201      	movs	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]
    }
    return res;
 8000994:	7dfb      	ldrb	r3, [r7, #23]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	0800be94 	.word	0x0800be94
 80009a4:	0800be9c 	.word	0x0800be9c

080009a8 <parse_disconnect>:

uint8_t parse_disconnect(const uint8_t* input, CommandMeta* meta) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
    char command[7];
    unsigned int client_id;
    uint8_t res = sscanf((const char*)input, "%u,%6s", &client_id, command) == 2;
 80009b2:	f107 0310 	add.w	r3, r7, #16
 80009b6:	f107 020c 	add.w	r2, r7, #12
 80009ba:	4915      	ldr	r1, [pc, #84]	; (8000a10 <parse_disconnect+0x68>)
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f009 fe41 	bl	800a644 <siscanf>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	bf0c      	ite	eq
 80009c8:	2301      	moveq	r3, #1
 80009ca:	2300      	movne	r3, #0
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	75fb      	strb	r3, [r7, #23]
    res = res && strcmp(command, "CLOSED") == 0;
 80009d0:	7dfb      	ldrb	r3, [r7, #23]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d00a      	beq.n	80009ec <parse_disconnect+0x44>
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	490e      	ldr	r1, [pc, #56]	; (8000a14 <parse_disconnect+0x6c>)
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fbf7 	bl	80001d0 <strcmp>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d101      	bne.n	80009ec <parse_disconnect+0x44>
 80009e8:	2301      	movs	r3, #1
 80009ea:	e000      	b.n	80009ee <parse_disconnect+0x46>
 80009ec:	2300      	movs	r3, #0
 80009ee:	75fb      	strb	r3, [r7, #23]
    if (res) {
 80009f0:	7dfb      	ldrb	r3, [r7, #23]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d006      	beq.n	8000a04 <parse_disconnect+0x5c>
    	meta->client_id = client_id;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	705a      	strb	r2, [r3, #1]
    	meta->command = CMD_DISCONNECT;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	2203      	movs	r2, #3
 8000a02:	701a      	strb	r2, [r3, #0]
    }
    return res;
 8000a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	0800bea4 	.word	0x0800bea4
 8000a14:	0800beac 	.word	0x0800beac

08000a18 <parse_data>:

uint8_t parse_data(const uint8_t* input, uint16_t input_len, CommandMeta* meta) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	460b      	mov	r3, r1
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	817b      	strh	r3, [r7, #10]
    unsigned int client_id, data_len;
    int last_read_index;
    uint8_t res = sscanf((char*)input, "+IPD,%u,%u:%n", &client_id, &data_len, &last_read_index) == 2;
 8000a26:	f107 0114 	add.w	r1, r7, #20
 8000a2a:	f107 0218 	add.w	r2, r7, #24
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	460b      	mov	r3, r1
 8000a36:	491a      	ldr	r1, [pc, #104]	; (8000aa0 <parse_data+0x88>)
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	f009 fe03 	bl	800a644 <siscanf>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	bf0c      	ite	eq
 8000a44:	2301      	moveq	r3, #1
 8000a46:	2300      	movne	r3, #0
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	77fb      	strb	r3, [r7, #31]
    if (!res || data_len == 0) return 0;
 8000a4c:	7ffb      	ldrb	r3, [r7, #31]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d002      	beq.n	8000a58 <parse_data+0x40>
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <parse_data+0x44>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e01d      	b.n	8000a98 <parse_data+0x80>
    meta->client_id = client_id;
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	705a      	strb	r2, [r3, #1]

    meta->data = get_next_list(sizeof(uint8_t));
 8000a64:	2001      	movs	r0, #1
 8000a66:	f7ff fe59 	bl	800071c <get_next_list>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	605a      	str	r2, [r3, #4]
    if (!meta->data) return 0;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d101      	bne.n	8000a7c <parse_data+0x64>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	e00d      	b.n	8000a98 <parse_data+0x80>

    list_copy_to(meta->data, 0, input + last_read_index, data_len);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6858      	ldr	r0, [r3, #4]
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	461a      	mov	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	441a      	add	r2, r3
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f7ff fea3 	bl	80007d6 <list_copy_to>

    meta->command = CMD_DATA;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2202      	movs	r2, #2
 8000a94:	701a      	strb	r2, [r3, #0]
    return 1;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3720      	adds	r7, #32
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	0800beb4 	.word	0x0800beb4

08000aa4 <reset_command_meta>:

void reset_command_meta(CommandMeta* meta) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
    meta->command = CMD_NONE;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
    meta->client_id = 0;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	705a      	strb	r2, [r3, #1]
    if (meta->data) {
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d007      	beq.n	8000ad0 <reset_command_meta+0x2c>
    	free_list(meta->data);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fe55 	bl	8000774 <free_list>
    	meta->data = NULL;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
    }
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <parse>:

uint8_t parse(const uint8_t* input, uint16_t input_len, CommandMeta* meta) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	607a      	str	r2, [r7, #4]
 8000ae4:	817b      	strh	r3, [r7, #10]
    reset_command_meta(meta);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ffdc 	bl	8000aa4 <reset_command_meta>
    while (*input == '\r' || *input == '\n') {
 8000aec:	e005      	b.n	8000afa <parse+0x22>
        input++;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3301      	adds	r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
        input_len--;
 8000af4:	897b      	ldrh	r3, [r7, #10]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	817b      	strh	r3, [r7, #10]
    while (*input == '\r' || *input == '\n') {
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b0d      	cmp	r3, #13
 8000b00:	d0f5      	beq.n	8000aee <parse+0x16>
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b0a      	cmp	r3, #10
 8000b08:	d0f1      	beq.n	8000aee <parse+0x16>
    }

    if (parse_send_data(input, meta)) return 1;
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f7ff fed5 	bl	80008bc <parse_send_data>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <parse+0x44>
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e026      	b.n	8000b6a <parse+0x92>
    if (parse_ok(input, meta)) return 1;
 8000b1c:	6879      	ldr	r1, [r7, #4]
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f7ff feec 	bl	80008fc <parse_ok>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <parse+0x56>
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e01d      	b.n	8000b6a <parse+0x92>
    if (parse_connect(input, meta)) return 1;
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	68f8      	ldr	r0, [r7, #12]
 8000b32:	f7ff ff01 	bl	8000938 <parse_connect>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <parse+0x68>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e014      	b.n	8000b6a <parse+0x92>
    if (parse_disconnect(input, meta)) return 1;
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	f7ff ff30 	bl	80009a8 <parse_disconnect>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <parse+0x7a>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00b      	b.n	8000b6a <parse+0x92>
    if (parse_data(input, input_len, meta)) return 1;
 8000b52:	897b      	ldrh	r3, [r7, #10]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	4619      	mov	r1, r3
 8000b58:	68f8      	ldr	r0, [r7, #12]
 8000b5a:	f7ff ff5d 	bl	8000a18 <parse_data>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <parse+0x90>
 8000b64:	2301      	movs	r3, #1
 8000b66:	e000      	b.n	8000b6a <parse+0x92>

    return 0;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <serialize_uint>:
	res[t->length] = 0;
	free_list(t);
}


void serialize_uint(List* res, uint32_t val, uint8_t count) {
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < count; i++) {
 8000b80:	2300      	movs	r3, #0
 8000b82:	75fb      	strb	r3, [r7, #23]
 8000b84:	e012      	b.n	8000bac <serialize_uint+0x3a>
		uint8_t cur = (val >> (8 * (count - 1 - i))) & 0xff;
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	1e5a      	subs	r2, r3, #1
 8000b8a:	7dfb      	ldrb	r3, [r7, #23]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	68ba      	ldr	r2, [r7, #8]
 8000b92:	fa22 f303 	lsr.w	r3, r2, r3
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	75bb      	strb	r3, [r7, #22]
		list_add(res, &cur);
 8000b9a:	f107 0316 	add.w	r3, r7, #22
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	68f8      	ldr	r0, [r7, #12]
 8000ba2:	f7ff fdf5 	bl	8000790 <list_add>
	for (uint8_t i = 0; i < count; i++) {
 8000ba6:	7dfb      	ldrb	r3, [r7, #23]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	75fb      	strb	r3, [r7, #23]
 8000bac:	7dfa      	ldrb	r2, [r7, #23]
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d3e8      	bcc.n	8000b86 <serialize_uint+0x14>
	}
}
 8000bb4:	bf00      	nop
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <serialize_uint32>:

void serialize_uint32(List* res, const uint32_t* val) {
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	6039      	str	r1, [r7, #0]
	serialize_uint(res, *val, sizeof(uint32_t));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2204      	movs	r2, #4
 8000bce:	4619      	mov	r1, r3
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ffce 	bl	8000b72 <serialize_uint>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <serialize_uint8>:
void serialize_uint16(List* res, const uint16_t* val) {
	serialize_uint(res, *val, sizeof(uint16_t));
}
void serialize_uint8(List* res, const uint8_t* val) {
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
	serialize_uint(res, *val, sizeof(uint8_t));
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2201      	movs	r2, #1
 8000bee:	4619      	mov	r1, r3
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ffbe 	bl	8000b72 <serialize_uint>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <serialize_concat_helper>:

int serialize_concat_helper(List* dest, uint32_t index, const void* ptr, Serializer serializer) {
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	60f8      	str	r0, [r7, #12]
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	603b      	str	r3, [r7, #0]
	List* res = get_next_list(sizeof(uint8_t));
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f7ff fd85 	bl	800071c <get_next_list>
 8000c12:	6178      	str	r0, [r7, #20]
	serializer(res, ptr);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	6978      	ldr	r0, [r7, #20]
 8000c1a:	4798      	blx	r3
	list_list_copy_to(dest, index, res);
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	68b9      	ldr	r1, [r7, #8]
 8000c20:	68f8      	ldr	r0, [r7, #12]
 8000c22:	f7ff fdc6 	bl	80007b2 <list_list_copy_to>
	index = res->length;
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c2c:	60bb      	str	r3, [r7, #8]
	free_list(res);
 8000c2e:	6978      	ldr	r0, [r7, #20]
 8000c30:	f7ff fda0 	bl	8000774 <free_list>
	return index;
 8000c34:	68bb      	ldr	r3, [r7, #8]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <get_endpoint_meta>:
	endpoint_meta->handler = handler;

	list_add(&endpoints, endpoint_meta);
}

const EndpointMeta* get_endpoint_meta(ServerEndpoint endpoint) {
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
	EndpointMeta* cur;
	list_foreach((&endpoints), cur)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	e004      	b.n	8000c5a <get_endpoint_meta+0x1a>
		if (cur->endpoint == endpoint)
			return cur;
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	e018      	b.n	8000c86 <get_endpoint_meta+0x46>
	list_foreach((&endpoints), cur)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	3301      	adds	r3, #1
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <get_endpoint_meta+0x54>)
 8000c5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d20e      	bcs.n	8000c84 <get_endpoint_meta+0x44>
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <get_endpoint_meta+0x54>)
 8000c68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	fb02 f303 	mul.w	r3, r2, r3
 8000c72:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <get_endpoint_meta+0x54>)
 8000c74:	4413      	add	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
		if (cur->endpoint == endpoint)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	79fa      	ldrb	r2, [r7, #7]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d1e8      	bne.n	8000c54 <get_endpoint_meta+0x14>
 8000c82:	e7e5      	b.n	8000c50 <get_endpoint_meta+0x10>

	return NULL;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	200131d8 	.word	0x200131d8

08000c98 <start_receive>:
// 2КБ + AT-header
#define MAX_DATA_LENGTH 2 * 1024 + 16
uint8_t buf_rx[MAX_DATA_LENGTH];
CommandMeta meta;

void start_receive(UART_HandleTypeDef *huart) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_IT(huart, buf_rx, MAX_DATA_LENGTH);
 8000ca0:	f44f 6201 	mov.w	r2, #2064	; 0x810
 8000ca4:	4903      	ldr	r1, [pc, #12]	; (8000cb4 <start_receive+0x1c>)
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f005 fa19 	bl	80060de <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200133e0 	.word	0x200133e0

08000cb8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <HAL_UARTEx_RxEventCallback+0x30>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d108      	bne.n	8000cde <HAL_UARTEx_RxEventCallback+0x26>
		parse(buf_rx, Size, &meta);
 8000ccc:	887b      	ldrh	r3, [r7, #2]
 8000cce:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_UARTEx_RxEventCallback+0x34>)
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <HAL_UARTEx_RxEventCallback+0x38>)
 8000cd4:	f7ff ff00 	bl	8000ad8 <parse>

		start_receive(&huart3);
 8000cd8:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <HAL_UARTEx_RxEventCallback+0x30>)
 8000cda:	f7ff ffdd 	bl	8000c98 <start_receive>
	}
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20014bb0 	.word	0x20014bb0
 8000cec:	20013bf0 	.word	0x20013bf0
 8000cf0:	200133e0 	.word	0x200133e0

08000cf4 <send_command_by_endpoint_meta_data>:
		buffer_append(bytes, cur);
	}
	parse_packets(bytes, packets);
}

void send_command_by_endpoint_meta_data(EndpointMeta* endpoint_meta, ServerEndpoint endpoint, const void* data) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	72fb      	strb	r3, [r7, #11]
	Packet response_packet;
	response_packet.request = endpoint;
 8000d02:	7afb      	ldrb	r3, [r7, #11]
 8000d04:	753b      	strb	r3, [r7, #20]
	response_packet.payload = get_next_list(sizeof(uint8_t));
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff fd08 	bl	800071c <get_next_list>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	61bb      	str	r3, [r7, #24]
	endpoint_meta->serialize_response(response_packet.payload, data);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	4610      	mov	r0, r2
 8000d1a:	4798      	blx	r3

	List* bytes = get_packet_bytes(&response_packet);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fd97 	bl	8000854 <get_packet_bytes>
 8000d26:	61f8      	str	r0, [r7, #28]
	transmit_to_client(bytes, 0);
 8000d28:	2100      	movs	r1, #0
 8000d2a:	69f8      	ldr	r0, [r7, #28]
 8000d2c:	f7ff fc90 	bl	8000650 <transmit_to_client>
	if (bytes) free_list(bytes);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <send_command_by_endpoint_meta_data+0x48>
 8000d36:	69f8      	ldr	r0, [r7, #28]
 8000d38:	f7ff fd1c 	bl	8000774 <free_list>
	free_packet(&response_packet);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fd75 	bl	8000830 <free_packet>
}
 8000d46:	bf00      	nop
 8000d48:	3720      	adds	r7, #32
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <send_command>:
	}

	free_packet(packet);
}

void send_command(ServerEndpoint endpoint, const void* data) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
	if (currentState != STATE_CONNECTED) return;
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <send_command+0x3c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d10e      	bne.n	8000d82 <send_command+0x32>

	if (endpoint == SEP_SERVER_TIME){

	}

	const EndpointMeta *endpoint_meta = get_endpoint_meta(endpoint);
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff6a 	bl	8000c40 <get_endpoint_meta>
 8000d6c:	60f8      	str	r0, [r7, #12]
	if (endpoint_meta)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d007      	beq.n	8000d84 <send_command+0x34>
		send_command_by_endpoint_meta_data(endpoint_meta, endpoint, data);
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f7ff ffba 	bl	8000cf4 <send_command_by_endpoint_meta_data>
 8000d80:	e000      	b.n	8000d84 <send_command+0x34>
	if (currentState != STATE_CONNECTED) return;
 8000d82:	bf00      	nop
}
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20013bf8 	.word	0x20013bf8

08000d90 <checkAlarmsNonBlocking>:
        currentAlarmCount++;
//        saveAlarmsToSD();
    }
}

void checkAlarmsNonBlocking() {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b09c      	sub	sp, #112	; 0x70
 8000d94:	af00      	add	r7, sp, #0
    static uint32_t lastCheckTick = 0;
    uint32_t currentTick = HAL_GetTick();
 8000d96:	f002 f92f 	bl	8002ff8 <HAL_GetTick>
 8000d9a:	66b8      	str	r0, [r7, #104]	; 0x68
    char output[100];

    if((currentTick - lastCheckTick) >= ALARM_CHECK_INTERVAL) {
 8000d9c:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <checkAlarmsNonBlocking+0xb0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d944      	bls.n	8000e36 <checkAlarmsNonBlocking+0xa6>
		lastCheckTick = currentTick;
 8000dac:	4a24      	ldr	r2, [pc, #144]	; (8000e40 <checkAlarmsNonBlocking+0xb0>)
 8000dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000db0:	6013      	str	r3, [r2, #0]

		for(int i = 0; i < currentAlarmCount; i++) {
 8000db2:	2300      	movs	r3, #0
 8000db4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000db6:	e038      	b.n	8000e2a <checkAlarmsNonBlocking+0x9a>
			if(alarmSchedule[i].isActive &&
 8000db8:	4922      	ldr	r1, [pc, #136]	; (8000e44 <checkAlarmsNonBlocking+0xb4>)
 8000dba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	4413      	add	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	3303      	adds	r3, #3
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d02a      	beq.n	8000e24 <checkAlarmsNonBlocking+0x94>
			   alarmSchedule[i].dayOfWeek == time.dayofweek &&
 8000dce:	491d      	ldr	r1, [pc, #116]	; (8000e44 <checkAlarmsNonBlocking+0xb4>)
 8000dd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	4413      	add	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	440b      	add	r3, r1
 8000ddc:	781a      	ldrb	r2, [r3, #0]
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <checkAlarmsNonBlocking+0xb8>)
 8000de0:	78db      	ldrb	r3, [r3, #3]
			if(alarmSchedule[i].isActive &&
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d11e      	bne.n	8000e24 <checkAlarmsNonBlocking+0x94>
			   alarmSchedule[i].hour == time.hour &&
 8000de6:	4917      	ldr	r1, [pc, #92]	; (8000e44 <checkAlarmsNonBlocking+0xb4>)
 8000de8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000dea:	4613      	mov	r3, r2
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	4413      	add	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	440b      	add	r3, r1
 8000df4:	3301      	adds	r3, #1
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <checkAlarmsNonBlocking+0xb8>)
 8000dfa:	789b      	ldrb	r3, [r3, #2]
			   alarmSchedule[i].dayOfWeek == time.dayofweek &&
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d111      	bne.n	8000e24 <checkAlarmsNonBlocking+0x94>
			   alarmSchedule[i].minute == time.minutes){
 8000e00:	4910      	ldr	r1, [pc, #64]	; (8000e44 <checkAlarmsNonBlocking+0xb4>)
 8000e02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000e04:	4613      	mov	r3, r2
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	4413      	add	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	3302      	adds	r3, #2
 8000e10:	781a      	ldrb	r2, [r3, #0]
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <checkAlarmsNonBlocking+0xb8>)
 8000e14:	785b      	ldrb	r3, [r3, #1]
			   alarmSchedule[i].hour == time.hour &&
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d104      	bne.n	8000e24 <checkAlarmsNonBlocking+0x94>
				   alarmTriggered = 1;
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <checkAlarmsNonBlocking+0xbc>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
				   break;
 8000e20:	bf00      	nop
			}
		}
	}
}
 8000e22:	e008      	b.n	8000e36 <checkAlarmsNonBlocking+0xa6>
		for(int i = 0; i < currentAlarmCount; i++) {
 8000e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e26:	3301      	adds	r3, #1
 8000e28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <checkAlarmsNonBlocking+0xc0>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e32:	4293      	cmp	r3, r2
 8000e34:	dbc0      	blt.n	8000db8 <checkAlarmsNonBlocking+0x28>
}
 8000e36:	bf00      	nop
 8000e38:	3770      	adds	r7, #112	; 0x70
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20014a10 	.word	0x20014a10
 8000e44:	20013bfc 	.word	0x20013bfc
 8000e48:	20014a14 	.word	0x20014a14
 8000e4c:	20014a0e 	.word	0x20014a0e
 8000e50:	20014a0c 	.word	0x20014a0c

08000e54 <processAlarm>:
//        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
//        send_uart("triggered alarm\n\r");
//        HAL_Delay(5000); // Only blocks during actual alarm
//        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);

void processAlarm() {
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
    if(alarmTriggered) {
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <processAlarm+0x1c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d002      	beq.n	8000e66 <processAlarm+0x12>
//    	play_midi(triggeredAlarm->filename);
        alarmTriggered = 0;
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <processAlarm+0x1c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
    }
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	20014a0e 	.word	0x20014a0e

08000e74 <should_send_time>:
 * @return Decoded decimal value.
 */

TIME prev_sent_time = {0,};

uint8_t should_send_time() {
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
  uint8_t res = (time.seconds != prev_sent_time.seconds ||
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <should_send_time+0x80>)
 8000e7c:	781a      	ldrb	r2, [r3, #0]
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <should_send_time+0x84>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
      time.minutes != prev_sent_time.minutes ||
      time.hour != prev_sent_time.hour ||
      time.dayofmonth != prev_sent_time.dayofmonth ||
      time.month != prev_sent_time.month ||
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d11d      	bne.n	8000ec2 <should_send_time+0x4e>
      time.minutes != prev_sent_time.minutes ||
 8000e86:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <should_send_time+0x80>)
 8000e88:	785a      	ldrb	r2, [r3, #1]
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <should_send_time+0x84>)
 8000e8c:	785b      	ldrb	r3, [r3, #1]
  uint8_t res = (time.seconds != prev_sent_time.seconds ||
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d117      	bne.n	8000ec2 <should_send_time+0x4e>
      time.hour != prev_sent_time.hour ||
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <should_send_time+0x80>)
 8000e94:	789a      	ldrb	r2, [r3, #2]
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <should_send_time+0x84>)
 8000e98:	789b      	ldrb	r3, [r3, #2]
      time.minutes != prev_sent_time.minutes ||
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d111      	bne.n	8000ec2 <should_send_time+0x4e>
      time.dayofmonth != prev_sent_time.dayofmonth ||
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <should_send_time+0x80>)
 8000ea0:	791a      	ldrb	r2, [r3, #4]
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <should_send_time+0x84>)
 8000ea4:	791b      	ldrb	r3, [r3, #4]
      time.hour != prev_sent_time.hour ||
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d10b      	bne.n	8000ec2 <should_send_time+0x4e>
      time.month != prev_sent_time.month ||
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <should_send_time+0x80>)
 8000eac:	795a      	ldrb	r2, [r3, #5]
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <should_send_time+0x84>)
 8000eb0:	795b      	ldrb	r3, [r3, #5]
      time.dayofmonth != prev_sent_time.dayofmonth ||
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d105      	bne.n	8000ec2 <should_send_time+0x4e>
      time.year != prev_sent_time.year);
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <should_send_time+0x80>)
 8000eb8:	799a      	ldrb	r2, [r3, #6]
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <should_send_time+0x84>)
 8000ebc:	799b      	ldrb	r3, [r3, #6]
      time.month != prev_sent_time.month ||
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d001      	beq.n	8000ec6 <should_send_time+0x52>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <should_send_time+0x54>
 8000ec6:	2300      	movs	r3, #0
  uint8_t res = (time.seconds != prev_sent_time.seconds ||
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if (res){
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d009      	beq.n	8000ee4 <should_send_time+0x70>
	  prev_sent_time = time;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <should_send_time+0x84>)
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <should_send_time+0x80>)
 8000ed4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed8:	6018      	str	r0, [r3, #0]
 8000eda:	3304      	adds	r3, #4
 8000edc:	8019      	strh	r1, [r3, #0]
 8000ede:	3302      	adds	r3, #2
 8000ee0:	0c0a      	lsrs	r2, r1, #16
 8000ee2:	701a      	strb	r2, [r3, #0]
  }
  return res;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20014a14 	.word	0x20014a14
 8000ef8:	20014a24 	.word	0x20014a24

08000efc <bcdToDec>:
{
  return (uint8_t)( (val/10*16) + (val%10) );
}

int bcdToDec(uint8_t val)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4613      	mov	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	461a      	mov	r2, r3
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	4413      	add	r3, r2
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <DS3231_Get_Time>:

	ret = HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}

void DS3231_Get_Time (void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af04      	add	r7, sp, #16
//	HAL_I2C_Master_Receive_IT(&hi2c1, DS3231_ADDRESS, get_time, 7);
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	9302      	str	r3, [sp, #8]
 8000f38:	2307      	movs	r3, #7
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <DS3231_Get_Time+0x94>)
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2301      	movs	r3, #1
 8000f42:	2200      	movs	r2, #0
 8000f44:	21d0      	movs	r1, #208	; 0xd0
 8000f46:	481f      	ldr	r0, [pc, #124]	; (8000fc4 <DS3231_Get_Time+0x98>)
 8000f48:	f002 fd24 	bl	8003994 <HAL_I2C_Mem_Read>

	time.seconds = bcdToDec(get_time[0]);
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <DS3231_Get_Time+0x94>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ffd3 	bl	8000efc <bcdToDec>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <DS3231_Get_Time+0x9c>)
 8000f5c:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <DS3231_Get_Time+0x94>)
 8000f60:	785b      	ldrb	r3, [r3, #1]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ffca 	bl	8000efc <bcdToDec>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <DS3231_Get_Time+0x9c>)
 8000f6e:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <DS3231_Get_Time+0x94>)
 8000f72:	789b      	ldrb	r3, [r3, #2]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ffc1 	bl	8000efc <bcdToDec>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <DS3231_Get_Time+0x9c>)
 8000f80:	709a      	strb	r2, [r3, #2]
//	stm_mstime.seconds = bcdToDec(get_time[0]);
//	stm_ms.time.minutes = bcdToDec(get_time[1]);
//	stm_ms.time.hour 	= bcdToDec(get_time[2]);

//	time.dayofweek = bcdToDec(get_time[3]);
	time.dayofmonth = bcdToDec(get_time[4]);
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <DS3231_Get_Time+0x94>)
 8000f84:	791b      	ldrb	r3, [r3, #4]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ffb8 	bl	8000efc <bcdToDec>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <DS3231_Get_Time+0x9c>)
 8000f92:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <DS3231_Get_Time+0x94>)
 8000f96:	795b      	ldrb	r3, [r3, #5]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ffaf 	bl	8000efc <bcdToDec>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <DS3231_Get_Time+0x9c>)
 8000fa4:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <DS3231_Get_Time+0x94>)
 8000fa8:	799b      	ldrb	r3, [r3, #6]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ffa6 	bl	8000efc <bcdToDec>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <DS3231_Get_Time+0x9c>)
 8000fb6:	719a      	strb	r2, [r3, #6]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20014a1c 	.word	0x20014a1c
 8000fc4:	20014a30 	.word	0x20014a30
 8000fc8:	20014a14 	.word	0x20014a14

08000fcc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd6:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <SELECT+0x1c>)
 8000fd8:	f002 fb7e 	bl	80036d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f002 f817 	bl	8003010 <HAL_Delay>
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40020000 	.word	0x40020000

08000fec <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff6:	4804      	ldr	r0, [pc, #16]	; (8001008 <DESELECT+0x1c>)
 8000ff8:	f002 fb6e 	bl	80036d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f002 f807 	bl	8003010 <HAL_Delay>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020000 	.word	0x40020000

0800100c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001016:	bf00      	nop
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <SPI_TxByte+0x30>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b02      	cmp	r3, #2
 8001024:	d1f8      	bne.n	8001018 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001026:	1df9      	adds	r1, r7, #7
 8001028:	2364      	movs	r3, #100	; 0x64
 800102a:	2201      	movs	r2, #1
 800102c:	4803      	ldr	r0, [pc, #12]	; (800103c <SPI_TxByte+0x30>)
 800102e:	f003 fe7c 	bl	8004d2a <HAL_SPI_Transmit>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20014a84 	.word	0x20014a84

08001040 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800104c:	bf00      	nop
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <SPI_TxBuffer+0x30>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b02      	cmp	r3, #2
 800105a:	d1f8      	bne.n	800104e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800105c:	887a      	ldrh	r2, [r7, #2]
 800105e:	2364      	movs	r3, #100	; 0x64
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	4803      	ldr	r0, [pc, #12]	; (8001070 <SPI_TxBuffer+0x30>)
 8001064:	f003 fe61 	bl	8004d2a <HAL_SPI_Transmit>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20014a84 	.word	0x20014a84

08001074 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800107a:	23ff      	movs	r3, #255	; 0xff
 800107c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800107e:	bf00      	nop
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <SPI_RxByte+0x34>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b02      	cmp	r3, #2
 800108c:	d1f8      	bne.n	8001080 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800108e:	1dba      	adds	r2, r7, #6
 8001090:	1df9      	adds	r1, r7, #7
 8001092:	2364      	movs	r3, #100	; 0x64
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2301      	movs	r3, #1
 8001098:	4803      	ldr	r0, [pc, #12]	; (80010a8 <SPI_RxByte+0x34>)
 800109a:	f003 ff82 	bl	8004fa2 <HAL_SPI_TransmitReceive>

	return data;
 800109e:	79bb      	ldrb	r3, [r7, #6]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20014a84 	.word	0x20014a84

080010ac <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80010b4:	f7ff ffde 	bl	8001074 <SPI_RxByte>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	701a      	strb	r2, [r3, #0]
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <SD_ReadyWait+0x30>)
 80010d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010d4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80010d6:	f7ff ffcd 	bl	8001074 <SPI_RxByte>
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2bff      	cmp	r3, #255	; 0xff
 80010e2:	d004      	beq.n	80010ee <SD_ReadyWait+0x26>
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SD_ReadyWait+0x30>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f3      	bne.n	80010d6 <SD_ReadyWait+0xe>

	return res;
 80010ee:	79fb      	ldrb	r3, [r7, #7]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20017441 	.word	0x20017441

080010fc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001102:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001106:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001108:	f7ff ff70 	bl	8000fec <DESELECT>
	for(int i = 0; i < 10; i++)
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	e005      	b.n	800111e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001112:	20ff      	movs	r0, #255	; 0xff
 8001114:	f7ff ff7a 	bl	800100c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	3301      	adds	r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	2b09      	cmp	r3, #9
 8001122:	ddf6      	ble.n	8001112 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001124:	f7ff ff52 	bl	8000fcc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001128:	2340      	movs	r3, #64	; 0x40
 800112a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800113c:	2395      	movs	r3, #149	; 0x95
 800113e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001140:	463b      	mov	r3, r7
 8001142:	2106      	movs	r1, #6
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff7b 	bl	8001040 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800114a:	e002      	b.n	8001152 <SD_PowerOn+0x56>
	{
		cnt--;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3b01      	subs	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001152:	f7ff ff8f 	bl	8001074 <SPI_RxByte>
 8001156:	4603      	mov	r3, r0
 8001158:	2b01      	cmp	r3, #1
 800115a:	d002      	beq.n	8001162 <SD_PowerOn+0x66>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f4      	bne.n	800114c <SD_PowerOn+0x50>
	}

	DESELECT();
 8001162:	f7ff ff43 	bl	8000fec <DESELECT>
	SPI_TxByte(0XFF);
 8001166:	20ff      	movs	r0, #255	; 0xff
 8001168:	f7ff ff50 	bl	800100c <SPI_TxByte>

	PowerFlag = 1;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <SD_PowerOn+0x80>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20014a2c 	.word	0x20014a2c

08001180 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <SD_PowerOff+0x14>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	20014a2c 	.word	0x20014a2c

08001198 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <SD_CheckPower+0x14>)
 800119e:	781b      	ldrb	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20014a2c 	.word	0x20014a2c

080011b0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <SD_RxDataBlock+0x5c>)
 80011bc:	22c8      	movs	r2, #200	; 0xc8
 80011be:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80011c0:	f7ff ff58 	bl	8001074 <SPI_RxByte>
 80011c4:	4603      	mov	r3, r0
 80011c6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	2bff      	cmp	r3, #255	; 0xff
 80011cc:	d104      	bne.n	80011d8 <SD_RxDataBlock+0x28>
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <SD_RxDataBlock+0x5c>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1f3      	bne.n	80011c0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2bfe      	cmp	r3, #254	; 0xfe
 80011dc:	d001      	beq.n	80011e2 <SD_RxDataBlock+0x32>
 80011de:	2300      	movs	r3, #0
 80011e0:	e00f      	b.n	8001202 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	1c5a      	adds	r2, r3, #1
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff5f 	bl	80010ac <SPI_RxBytePtr>
	} while(len--);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	1e5a      	subs	r2, r3, #1
 80011f2:	603a      	str	r2, [r7, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1f4      	bne.n	80011e2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80011f8:	f7ff ff3c 	bl	8001074 <SPI_RxByte>
	SPI_RxByte();
 80011fc:	f7ff ff3a 	bl	8001074 <SPI_RxByte>

	return TRUE;
 8001200:	2301      	movs	r3, #1
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20017440 	.word	0x20017440

08001210 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001220:	f7ff ff52 	bl	80010c8 <SD_ReadyWait>
 8001224:	4603      	mov	r3, r0
 8001226:	2bff      	cmp	r3, #255	; 0xff
 8001228:	d001      	beq.n	800122e <SD_TxDataBlock+0x1e>
 800122a:	2300      	movs	r3, #0
 800122c:	e02f      	b.n	800128e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff feeb 	bl	800100c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	2bfd      	cmp	r3, #253	; 0xfd
 800123a:	d020      	beq.n	800127e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800123c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff fefd 	bl	8001040 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001246:	f7ff ff15 	bl	8001074 <SPI_RxByte>
		SPI_RxByte();
 800124a:	f7ff ff13 	bl	8001074 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800124e:	e00b      	b.n	8001268 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001250:	f7ff ff10 	bl	8001074 <SPI_RxByte>
 8001254:	4603      	mov	r3, r0
 8001256:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	f003 031f 	and.w	r3, r3, #31
 800125e:	2b05      	cmp	r3, #5
 8001260:	d006      	beq.n	8001270 <SD_TxDataBlock+0x60>
			i++;
 8001262:	7bbb      	ldrb	r3, [r7, #14]
 8001264:	3301      	adds	r3, #1
 8001266:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	2b40      	cmp	r3, #64	; 0x40
 800126c:	d9f0      	bls.n	8001250 <SD_TxDataBlock+0x40>
 800126e:	e000      	b.n	8001272 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001270:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001272:	bf00      	nop
 8001274:	f7ff fefe 	bl	8001074 <SPI_RxByte>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0fa      	beq.n	8001274 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	f003 031f 	and.w	r3, r3, #31
 8001284:	2b05      	cmp	r3, #5
 8001286:	d101      	bne.n	800128c <SD_TxDataBlock+0x7c>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <SD_TxDataBlock+0x7e>

	return FALSE;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b084      	sub	sp, #16
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	6039      	str	r1, [r7, #0]
 80012a0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80012a2:	f7ff ff11 	bl	80010c8 <SD_ReadyWait>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2bff      	cmp	r3, #255	; 0xff
 80012aa:	d001      	beq.n	80012b0 <SD_SendCmd+0x1a>
 80012ac:	23ff      	movs	r3, #255	; 0xff
 80012ae:	e042      	b.n	8001336 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff feaa 	bl	800100c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	0e1b      	lsrs	r3, r3, #24
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fea4 	bl	800100c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	0c1b      	lsrs	r3, r3, #16
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fe9e 	bl	800100c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	0a1b      	lsrs	r3, r3, #8
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fe98 	bl	800100c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fe93 	bl	800100c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2b40      	cmp	r3, #64	; 0x40
 80012ea:	d102      	bne.n	80012f2 <SD_SendCmd+0x5c>
 80012ec:	2395      	movs	r3, #149	; 0x95
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	e007      	b.n	8001302 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b48      	cmp	r3, #72	; 0x48
 80012f6:	d102      	bne.n	80012fe <SD_SendCmd+0x68>
 80012f8:	2387      	movs	r3, #135	; 0x87
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	e001      	b.n	8001302 <SD_SendCmd+0x6c>
	else crc = 1;
 80012fe:	2301      	movs	r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fe81 	bl	800100c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2b4c      	cmp	r3, #76	; 0x4c
 800130e:	d101      	bne.n	8001314 <SD_SendCmd+0x7e>
 8001310:	f7ff feb0 	bl	8001074 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001314:	230a      	movs	r3, #10
 8001316:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001318:	f7ff feac 	bl	8001074 <SPI_RxByte>
 800131c:	4603      	mov	r3, r0
 800131e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001320:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001324:	2b00      	cmp	r3, #0
 8001326:	da05      	bge.n	8001334 <SD_SendCmd+0x9e>
 8001328:	7bbb      	ldrb	r3, [r7, #14]
 800132a:	3b01      	subs	r3, #1
 800132c:	73bb      	strb	r3, [r7, #14]
 800132e:	7bbb      	ldrb	r3, [r7, #14]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1f1      	bne.n	8001318 <SD_SendCmd+0x82>

	return res;
 8001334:	7b7b      	ldrb	r3, [r7, #13]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SD_disk_initialize+0x14>
 8001350:	2301      	movs	r3, #1
 8001352:	e0d6      	b.n	8001502 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001354:	4b6d      	ldr	r3, [pc, #436]	; (800150c <SD_disk_initialize+0x1cc>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <SD_disk_initialize+0x2a>
 8001362:	4b6a      	ldr	r3, [pc, #424]	; (800150c <SD_disk_initialize+0x1cc>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	e0cb      	b.n	8001502 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800136a:	f7ff fec7 	bl	80010fc <SD_PowerOn>

	/* slave select */
	SELECT();
 800136e:	f7ff fe2d 	bl	8000fcc <SELECT>

	/* check disk type */
	type = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001376:	2100      	movs	r1, #0
 8001378:	2040      	movs	r0, #64	; 0x40
 800137a:	f7ff ff8c 	bl	8001296 <SD_SendCmd>
 800137e:	4603      	mov	r3, r0
 8001380:	2b01      	cmp	r3, #1
 8001382:	f040 80a6 	bne.w	80014d2 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001386:	4b62      	ldr	r3, [pc, #392]	; (8001510 <SD_disk_initialize+0x1d0>)
 8001388:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800138c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800138e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001392:	2048      	movs	r0, #72	; 0x48
 8001394:	f7ff ff7f 	bl	8001296 <SD_SendCmd>
 8001398:	4603      	mov	r3, r0
 800139a:	2b01      	cmp	r3, #1
 800139c:	d158      	bne.n	8001450 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800139e:	2300      	movs	r3, #0
 80013a0:	73fb      	strb	r3, [r7, #15]
 80013a2:	e00c      	b.n	80013be <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80013a4:	7bfc      	ldrb	r4, [r7, #15]
 80013a6:	f7ff fe65 	bl	8001074 <SPI_RxByte>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	f104 0310 	add.w	r3, r4, #16
 80013b2:	443b      	add	r3, r7
 80013b4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	3301      	adds	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d9ef      	bls.n	80013a4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80013c4:	7abb      	ldrb	r3, [r7, #10]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	f040 8083 	bne.w	80014d2 <SD_disk_initialize+0x192>
 80013cc:	7afb      	ldrb	r3, [r7, #11]
 80013ce:	2baa      	cmp	r3, #170	; 0xaa
 80013d0:	d17f      	bne.n	80014d2 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80013d2:	2100      	movs	r1, #0
 80013d4:	2077      	movs	r0, #119	; 0x77
 80013d6:	f7ff ff5e 	bl	8001296 <SD_SendCmd>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d807      	bhi.n	80013f0 <SD_disk_initialize+0xb0>
 80013e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80013e4:	2069      	movs	r0, #105	; 0x69
 80013e6:	f7ff ff56 	bl	8001296 <SD_SendCmd>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <SD_disk_initialize+0xbc>
				} while (Timer1);
 80013f0:	4b47      	ldr	r3, [pc, #284]	; (8001510 <SD_disk_initialize+0x1d0>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1eb      	bne.n	80013d2 <SD_disk_initialize+0x92>
 80013fa:	e000      	b.n	80013fe <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80013fc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80013fe:	4b44      	ldr	r3, [pc, #272]	; (8001510 <SD_disk_initialize+0x1d0>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	d064      	beq.n	80014d2 <SD_disk_initialize+0x192>
 8001408:	2100      	movs	r1, #0
 800140a:	207a      	movs	r0, #122	; 0x7a
 800140c:	f7ff ff43 	bl	8001296 <SD_SendCmd>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d15d      	bne.n	80014d2 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001416:	2300      	movs	r3, #0
 8001418:	73fb      	strb	r3, [r7, #15]
 800141a:	e00c      	b.n	8001436 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 800141c:	7bfc      	ldrb	r4, [r7, #15]
 800141e:	f7ff fe29 	bl	8001074 <SPI_RxByte>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	f104 0310 	add.w	r3, r4, #16
 800142a:	443b      	add	r3, r7
 800142c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	3301      	adds	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	2b03      	cmp	r3, #3
 800143a:	d9ef      	bls.n	800141c <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800143c:	7a3b      	ldrb	r3, [r7, #8]
 800143e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SD_disk_initialize+0x10a>
 8001446:	230c      	movs	r3, #12
 8001448:	e000      	b.n	800144c <SD_disk_initialize+0x10c>
 800144a:	2304      	movs	r3, #4
 800144c:	73bb      	strb	r3, [r7, #14]
 800144e:	e040      	b.n	80014d2 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001450:	2100      	movs	r1, #0
 8001452:	2077      	movs	r0, #119	; 0x77
 8001454:	f7ff ff1f 	bl	8001296 <SD_SendCmd>
 8001458:	4603      	mov	r3, r0
 800145a:	2b01      	cmp	r3, #1
 800145c:	d808      	bhi.n	8001470 <SD_disk_initialize+0x130>
 800145e:	2100      	movs	r1, #0
 8001460:	2069      	movs	r0, #105	; 0x69
 8001462:	f7ff ff18 	bl	8001296 <SD_SendCmd>
 8001466:	4603      	mov	r3, r0
 8001468:	2b01      	cmp	r3, #1
 800146a:	d801      	bhi.n	8001470 <SD_disk_initialize+0x130>
 800146c:	2302      	movs	r3, #2
 800146e:	e000      	b.n	8001472 <SD_disk_initialize+0x132>
 8001470:	2301      	movs	r3, #1
 8001472:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001474:	7bbb      	ldrb	r3, [r7, #14]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d10e      	bne.n	8001498 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800147a:	2100      	movs	r1, #0
 800147c:	2077      	movs	r0, #119	; 0x77
 800147e:	f7ff ff0a 	bl	8001296 <SD_SendCmd>
 8001482:	4603      	mov	r3, r0
 8001484:	2b01      	cmp	r3, #1
 8001486:	d80e      	bhi.n	80014a6 <SD_disk_initialize+0x166>
 8001488:	2100      	movs	r1, #0
 800148a:	2069      	movs	r0, #105	; 0x69
 800148c:	f7ff ff03 	bl	8001296 <SD_SendCmd>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d107      	bne.n	80014a6 <SD_disk_initialize+0x166>
 8001496:	e00d      	b.n	80014b4 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001498:	2100      	movs	r1, #0
 800149a:	2041      	movs	r0, #65	; 0x41
 800149c:	f7ff fefb 	bl	8001296 <SD_SendCmd>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d005      	beq.n	80014b2 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <SD_disk_initialize+0x1d0>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1e1      	bne.n	8001474 <SD_disk_initialize+0x134>
 80014b0:	e000      	b.n	80014b4 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014b2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <SD_disk_initialize+0x1d0>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d007      	beq.n	80014ce <SD_disk_initialize+0x18e>
 80014be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c2:	2050      	movs	r0, #80	; 0x50
 80014c4:	f7ff fee7 	bl	8001296 <SD_SendCmd>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SD_disk_initialize+0x192>
 80014ce:	2300      	movs	r3, #0
 80014d0:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <SD_disk_initialize+0x1d4>)
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80014d8:	f7ff fd88 	bl	8000fec <DESELECT>
	SPI_RxByte();
 80014dc:	f7ff fdca 	bl	8001074 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80014e0:	7bbb      	ldrb	r3, [r7, #14]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d008      	beq.n	80014f8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <SD_disk_initialize+0x1cc>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <SD_disk_initialize+0x1cc>)
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	e001      	b.n	80014fc <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80014f8:	f7ff fe42 	bl	8001180 <SD_PowerOff>
	}

	return Stat;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <SD_disk_initialize+0x1cc>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
}
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	bd90      	pop	{r4, r7, pc}
 800150a:	bf00      	nop
 800150c:	20000000 	.word	0x20000000
 8001510:	20017440 	.word	0x20017440
 8001514:	20014a2b 	.word	0x20014a2b

08001518 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SD_disk_status+0x14>
 8001528:	2301      	movs	r3, #1
 800152a:	e002      	b.n	8001532 <SD_disk_status+0x1a>
	return Stat;
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <SD_disk_status+0x28>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000000 	.word	0x20000000

08001544 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <SD_disk_read+0x1c>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <SD_disk_read+0x20>
 8001560:	2304      	movs	r3, #4
 8001562:	e051      	b.n	8001608 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001564:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <SD_disk_read+0xcc>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SD_disk_read+0x32>
 8001572:	2303      	movs	r3, #3
 8001574:	e048      	b.n	8001608 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001576:	4b27      	ldr	r3, [pc, #156]	; (8001614 <SD_disk_read+0xd0>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <SD_disk_read+0x44>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	025b      	lsls	r3, r3, #9
 8001586:	607b      	str	r3, [r7, #4]

	SELECT();
 8001588:	f7ff fd20 	bl	8000fcc <SELECT>

	if (count == 1)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d111      	bne.n	80015b6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	2051      	movs	r0, #81	; 0x51
 8001596:	f7ff fe7e 	bl	8001296 <SD_SendCmd>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d129      	bne.n	80015f4 <SD_disk_read+0xb0>
 80015a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a4:	68b8      	ldr	r0, [r7, #8]
 80015a6:	f7ff fe03 	bl	80011b0 <SD_RxDataBlock>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d021      	beq.n	80015f4 <SD_disk_read+0xb0>
 80015b0:	2300      	movs	r3, #0
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	e01e      	b.n	80015f4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	2052      	movs	r0, #82	; 0x52
 80015ba:	f7ff fe6c 	bl	8001296 <SD_SendCmd>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d117      	bne.n	80015f4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80015c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c8:	68b8      	ldr	r0, [r7, #8]
 80015ca:	f7ff fdf1 	bl	80011b0 <SD_RxDataBlock>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00a      	beq.n	80015ea <SD_disk_read+0xa6>
				buff += 512;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015da:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	3b01      	subs	r3, #1
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1ed      	bne.n	80015c4 <SD_disk_read+0x80>
 80015e8:	e000      	b.n	80015ec <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80015ea:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80015ec:	2100      	movs	r1, #0
 80015ee:	204c      	movs	r0, #76	; 0x4c
 80015f0:	f7ff fe51 	bl	8001296 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80015f4:	f7ff fcfa 	bl	8000fec <DESELECT>
	SPI_RxByte();
 80015f8:	f7ff fd3c 	bl	8001074 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bf14      	ite	ne
 8001602:	2301      	movne	r3, #1
 8001604:	2300      	moveq	r3, #0
 8001606:	b2db      	uxtb	r3, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000000 	.word	0x20000000
 8001614:	20014a2b 	.word	0x20014a2b

08001618 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	4603      	mov	r3, r0
 8001626:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <SD_disk_write+0x1c>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <SD_disk_write+0x20>
 8001634:	2304      	movs	r3, #4
 8001636:	e06b      	b.n	8001710 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001638:	4b37      	ldr	r3, [pc, #220]	; (8001718 <SD_disk_write+0x100>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SD_disk_write+0x32>
 8001646:	2303      	movs	r3, #3
 8001648:	e062      	b.n	8001710 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800164a:	4b33      	ldr	r3, [pc, #204]	; (8001718 <SD_disk_write+0x100>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <SD_disk_write+0x44>
 8001658:	2302      	movs	r3, #2
 800165a:	e059      	b.n	8001710 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800165c:	4b2f      	ldr	r3, [pc, #188]	; (800171c <SD_disk_write+0x104>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <SD_disk_write+0x56>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	025b      	lsls	r3, r3, #9
 800166c:	607b      	str	r3, [r7, #4]

	SELECT();
 800166e:	f7ff fcad 	bl	8000fcc <SELECT>

	if (count == 1)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d110      	bne.n	800169a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	2058      	movs	r0, #88	; 0x58
 800167c:	f7ff fe0b 	bl	8001296 <SD_SendCmd>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d13a      	bne.n	80016fc <SD_disk_write+0xe4>
 8001686:	21fe      	movs	r1, #254	; 0xfe
 8001688:	68b8      	ldr	r0, [r7, #8]
 800168a:	f7ff fdc1 	bl	8001210 <SD_TxDataBlock>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d033      	beq.n	80016fc <SD_disk_write+0xe4>
			count = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	e030      	b.n	80016fc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <SD_disk_write+0x104>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d007      	beq.n	80016b6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80016a6:	2100      	movs	r1, #0
 80016a8:	2077      	movs	r0, #119	; 0x77
 80016aa:	f7ff fdf4 	bl	8001296 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80016ae:	6839      	ldr	r1, [r7, #0]
 80016b0:	2057      	movs	r0, #87	; 0x57
 80016b2:	f7ff fdf0 	bl	8001296 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	2059      	movs	r0, #89	; 0x59
 80016ba:	f7ff fdec 	bl	8001296 <SD_SendCmd>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d11b      	bne.n	80016fc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016c4:	21fc      	movs	r1, #252	; 0xfc
 80016c6:	68b8      	ldr	r0, [r7, #8]
 80016c8:	f7ff fda2 	bl	8001210 <SD_TxDataBlock>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00a      	beq.n	80016e8 <SD_disk_write+0xd0>
				buff += 512;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016d8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	3b01      	subs	r3, #1
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1ee      	bne.n	80016c4 <SD_disk_write+0xac>
 80016e6:	e000      	b.n	80016ea <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016e8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80016ea:	21fd      	movs	r1, #253	; 0xfd
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff fd8f 	bl	8001210 <SD_TxDataBlock>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <SD_disk_write+0xe4>
			{
				count = 1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80016fc:	f7ff fc76 	bl	8000fec <DESELECT>
	SPI_RxByte();
 8001700:	f7ff fcb8 	bl	8001074 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	bf14      	ite	ne
 800170a:	2301      	movne	r3, #1
 800170c:	2300      	moveq	r3, #0
 800170e:	b2db      	uxtb	r3, r3
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000000 	.word	0x20000000
 800171c:	20014a2b 	.word	0x20014a2b

08001720 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b08b      	sub	sp, #44	; 0x2c
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	603a      	str	r2, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
 800172c:	460b      	mov	r3, r1
 800172e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SD_disk_ioctl+0x1e>
 800173a:	2304      	movs	r3, #4
 800173c:	e115      	b.n	800196a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001744:	79bb      	ldrb	r3, [r7, #6]
 8001746:	2b05      	cmp	r3, #5
 8001748:	d124      	bne.n	8001794 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d012      	beq.n	8001778 <SD_disk_ioctl+0x58>
 8001752:	2b02      	cmp	r3, #2
 8001754:	dc1a      	bgt.n	800178c <SD_disk_ioctl+0x6c>
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <SD_disk_ioctl+0x40>
 800175a:	2b01      	cmp	r3, #1
 800175c:	d006      	beq.n	800176c <SD_disk_ioctl+0x4c>
 800175e:	e015      	b.n	800178c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001760:	f7ff fd0e 	bl	8001180 <SD_PowerOff>
			res = RES_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800176a:	e0fc      	b.n	8001966 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800176c:	f7ff fcc6 	bl	80010fc <SD_PowerOn>
			res = RES_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001776:	e0f6      	b.n	8001966 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	1c5c      	adds	r4, r3, #1
 800177c:	f7ff fd0c 	bl	8001198 <SD_CheckPower>
 8001780:	4603      	mov	r3, r0
 8001782:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001784:	2300      	movs	r3, #0
 8001786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800178a:	e0ec      	b.n	8001966 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800178c:	2304      	movs	r3, #4
 800178e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001792:	e0e8      	b.n	8001966 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001794:	4b77      	ldr	r3, [pc, #476]	; (8001974 <SD_disk_ioctl+0x254>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SD_disk_ioctl+0x86>
 80017a2:	2303      	movs	r3, #3
 80017a4:	e0e1      	b.n	800196a <SD_disk_ioctl+0x24a>

		SELECT();
 80017a6:	f7ff fc11 	bl	8000fcc <SELECT>

		switch (ctrl)
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	2b0d      	cmp	r3, #13
 80017ae:	f200 80cb 	bhi.w	8001948 <SD_disk_ioctl+0x228>
 80017b2:	a201      	add	r2, pc, #4	; (adr r2, 80017b8 <SD_disk_ioctl+0x98>)
 80017b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b8:	080018b3 	.word	0x080018b3
 80017bc:	080017f1 	.word	0x080017f1
 80017c0:	080018a3 	.word	0x080018a3
 80017c4:	08001949 	.word	0x08001949
 80017c8:	08001949 	.word	0x08001949
 80017cc:	08001949 	.word	0x08001949
 80017d0:	08001949 	.word	0x08001949
 80017d4:	08001949 	.word	0x08001949
 80017d8:	08001949 	.word	0x08001949
 80017dc:	08001949 	.word	0x08001949
 80017e0:	08001949 	.word	0x08001949
 80017e4:	080018c5 	.word	0x080018c5
 80017e8:	080018e9 	.word	0x080018e9
 80017ec:	0800190d 	.word	0x0800190d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80017f0:	2100      	movs	r1, #0
 80017f2:	2049      	movs	r0, #73	; 0x49
 80017f4:	f7ff fd4f 	bl	8001296 <SD_SendCmd>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 80a8 	bne.w	8001950 <SD_disk_ioctl+0x230>
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	2110      	movs	r1, #16
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fcd2 	bl	80011b0 <SD_RxDataBlock>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 809e 	beq.w	8001950 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001814:	7b3b      	ldrb	r3, [r7, #12]
 8001816:	099b      	lsrs	r3, r3, #6
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d10e      	bne.n	800183c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800181e:	7d7b      	ldrb	r3, [r7, #21]
 8001820:	b29a      	uxth	r2, r3
 8001822:	7d3b      	ldrb	r3, [r7, #20]
 8001824:	b29b      	uxth	r3, r3
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	b29b      	uxth	r3, r3
 800182a:	4413      	add	r3, r2
 800182c:	b29b      	uxth	r3, r3
 800182e:	3301      	adds	r3, #1
 8001830:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001832:	8bfb      	ldrh	r3, [r7, #30]
 8001834:	029a      	lsls	r2, r3, #10
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	e02e      	b.n	800189a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800183c:	7c7b      	ldrb	r3, [r7, #17]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	b2da      	uxtb	r2, r3
 8001844:	7dbb      	ldrb	r3, [r7, #22]
 8001846:	09db      	lsrs	r3, r3, #7
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4413      	add	r3, r2
 800184c:	b2da      	uxtb	r2, r3
 800184e:	7d7b      	ldrb	r3, [r7, #21]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f003 0306 	and.w	r3, r3, #6
 8001858:	b2db      	uxtb	r3, r3
 800185a:	4413      	add	r3, r2
 800185c:	b2db      	uxtb	r3, r3
 800185e:	3302      	adds	r3, #2
 8001860:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001864:	7d3b      	ldrb	r3, [r7, #20]
 8001866:	099b      	lsrs	r3, r3, #6
 8001868:	b2db      	uxtb	r3, r3
 800186a:	b29a      	uxth	r2, r3
 800186c:	7cfb      	ldrb	r3, [r7, #19]
 800186e:	b29b      	uxth	r3, r3
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	b29b      	uxth	r3, r3
 8001874:	4413      	add	r3, r2
 8001876:	b29a      	uxth	r2, r3
 8001878:	7cbb      	ldrb	r3, [r7, #18]
 800187a:	029b      	lsls	r3, r3, #10
 800187c:	b29b      	uxth	r3, r3
 800187e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001882:	b29b      	uxth	r3, r3
 8001884:	4413      	add	r3, r2
 8001886:	b29b      	uxth	r3, r3
 8001888:	3301      	adds	r3, #1
 800188a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800188c:	8bfa      	ldrh	r2, [r7, #30]
 800188e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001892:	3b09      	subs	r3, #9
 8001894:	409a      	lsls	r2, r3
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80018a0:	e056      	b.n	8001950 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018b0:	e055      	b.n	800195e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80018b2:	f7ff fc09 	bl	80010c8 <SD_ReadyWait>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2bff      	cmp	r3, #255	; 0xff
 80018ba:	d14b      	bne.n	8001954 <SD_disk_ioctl+0x234>
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018c2:	e047      	b.n	8001954 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80018c4:	2100      	movs	r1, #0
 80018c6:	2049      	movs	r0, #73	; 0x49
 80018c8:	f7ff fce5 	bl	8001296 <SD_SendCmd>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d142      	bne.n	8001958 <SD_disk_ioctl+0x238>
 80018d2:	2110      	movs	r1, #16
 80018d4:	6a38      	ldr	r0, [r7, #32]
 80018d6:	f7ff fc6b 	bl	80011b0 <SD_RxDataBlock>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d03b      	beq.n	8001958 <SD_disk_ioctl+0x238>
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018e6:	e037      	b.n	8001958 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80018e8:	2100      	movs	r1, #0
 80018ea:	204a      	movs	r0, #74	; 0x4a
 80018ec:	f7ff fcd3 	bl	8001296 <SD_SendCmd>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d132      	bne.n	800195c <SD_disk_ioctl+0x23c>
 80018f6:	2110      	movs	r1, #16
 80018f8:	6a38      	ldr	r0, [r7, #32]
 80018fa:	f7ff fc59 	bl	80011b0 <SD_RxDataBlock>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d02b      	beq.n	800195c <SD_disk_ioctl+0x23c>
 8001904:	2300      	movs	r3, #0
 8001906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800190a:	e027      	b.n	800195c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800190c:	2100      	movs	r1, #0
 800190e:	207a      	movs	r0, #122	; 0x7a
 8001910:	f7ff fcc1 	bl	8001296 <SD_SendCmd>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d116      	bne.n	8001948 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800191a:	2300      	movs	r3, #0
 800191c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001920:	e00b      	b.n	800193a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001922:	6a3c      	ldr	r4, [r7, #32]
 8001924:	1c63      	adds	r3, r4, #1
 8001926:	623b      	str	r3, [r7, #32]
 8001928:	f7ff fba4 	bl	8001074 <SPI_RxByte>
 800192c:	4603      	mov	r3, r0
 800192e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001930:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001934:	3301      	adds	r3, #1
 8001936:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800193a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800193e:	2b03      	cmp	r3, #3
 8001940:	d9ef      	bls.n	8001922 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001948:	2304      	movs	r3, #4
 800194a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800194e:	e006      	b.n	800195e <SD_disk_ioctl+0x23e>
			break;
 8001950:	bf00      	nop
 8001952:	e004      	b.n	800195e <SD_disk_ioctl+0x23e>
			break;
 8001954:	bf00      	nop
 8001956:	e002      	b.n	800195e <SD_disk_ioctl+0x23e>
			break;
 8001958:	bf00      	nop
 800195a:	e000      	b.n	800195e <SD_disk_ioctl+0x23e>
			break;
 800195c:	bf00      	nop
		}

		DESELECT();
 800195e:	f7ff fb45 	bl	8000fec <DESELECT>
		SPI_RxByte();
 8001962:	f7ff fb87 	bl	8001074 <SPI_RxByte>
	}

	return res;
 8001966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800196a:	4618      	mov	r0, r3
 800196c:	372c      	adds	r7, #44	; 0x2c
 800196e:	46bd      	mov	sp, r7
 8001970:	bd90      	pop	{r4, r7, pc}
 8001972:	bf00      	nop
 8001974:	20000000 	.word	0x20000000

08001978 <shift_reg_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void shift_reg_init(){
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, 1);
 800197c:	2201      	movs	r2, #1
 800197e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <shift_reg_init+0x20>)
 8001984:	f001 fea8 	bl	80036d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800198e:	4803      	ldr	r0, [pc, #12]	; (800199c <shift_reg_init+0x24>)
 8001990:	f001 fea2 	bl	80036d8 <HAL_GPIO_WritePin>
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40020800 	.word	0x40020800
 800199c:	40020c00 	.word	0x40020c00

080019a0 <put_val_to_shift_reg>:

void put_val_to_shift_reg(uint16_t val){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	80fb      	strh	r3, [r7, #6]
	int c = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
	while(c < 16){
 80019ae:	e01a      	b.n	80019e6 <put_val_to_shift_reg+0x46>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, val & 1);
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	461a      	mov	r2, r3
 80019bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019c0:	4811      	ldr	r0, [pc, #68]	; (8001a08 <put_val_to_shift_reg+0x68>)
 80019c2:	f001 fe89 	bl	80036d8 <HAL_GPIO_WritePin>
		val >>= 1;
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	085b      	lsrs	r3, r3, #1
 80019ca:	80fb      	strh	r3, [r7, #6]
		HAL_GPIO_WritePin(CLK1_GPIO_Port, CLK1_Pin, 1);
 80019cc:	2201      	movs	r2, #1
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	480d      	ldr	r0, [pc, #52]	; (8001a08 <put_val_to_shift_reg+0x68>)
 80019d2:	f001 fe81 	bl	80036d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLK1_GPIO_Port, CLK1_Pin, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2180      	movs	r1, #128	; 0x80
 80019da:	480b      	ldr	r0, [pc, #44]	; (8001a08 <put_val_to_shift_reg+0x68>)
 80019dc:	f001 fe7c 	bl	80036d8 <HAL_GPIO_WritePin>
		c++;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3301      	adds	r3, #1
 80019e4:	60fb      	str	r3, [r7, #12]
	while(c < 16){
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b0f      	cmp	r3, #15
 80019ea:	dde1      	ble.n	80019b0 <put_val_to_shift_reg+0x10>
	}
	HAL_GPIO_WritePin(CLK2_GPIO_Port, CLK2_Pin, 1);
 80019ec:	2201      	movs	r2, #1
 80019ee:	2140      	movs	r1, #64	; 0x40
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <put_val_to_shift_reg+0x68>)
 80019f2:	f001 fe71 	bl	80036d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLK2_GPIO_Port, CLK2_Pin, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2140      	movs	r1, #64	; 0x40
 80019fa:	4803      	ldr	r0, [pc, #12]	; (8001a08 <put_val_to_shift_reg+0x68>)
 80019fc:	f001 fe6c 	bl	80036d8 <HAL_GPIO_WritePin>
}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40020800 	.word	0x40020800

08001a0c <clear_shift_reg>:

void clear_shift_reg(){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a16:	480a      	ldr	r0, [pc, #40]	; (8001a40 <clear_shift_reg+0x34>)
 8001a18:	f001 fe5e 	bl	80036d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MR_GPIO_Port, MR_Pin, 1);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a22:	4807      	ldr	r0, [pc, #28]	; (8001a40 <clear_shift_reg+0x34>)
 8001a24:	f001 fe58 	bl	80036d8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CLK2_GPIO_Port, CLK2_Pin, 1);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2140      	movs	r1, #64	; 0x40
 8001a2c:	4804      	ldr	r0, [pc, #16]	; (8001a40 <clear_shift_reg+0x34>)
 8001a2e:	f001 fe53 	bl	80036d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLK2_GPIO_Port, CLK2_Pin, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2140      	movs	r1, #64	; 0x40
 8001a36:	4802      	ldr	r0, [pc, #8]	; (8001a40 <clear_shift_reg+0x34>)
 8001a38:	f001 fe4e 	bl	80036d8 <HAL_GPIO_WritePin>
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40020800 	.word	0x40020800

08001a44 <HAL_TIM_PeriodElapsedCallback>:
UINT br, bw;

MidiPlaybackContext playback_ctx;
extern TIME time;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	if (htim == &htim3){
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d107      	bne.n	8001a64 <HAL_TIM_PeriodElapsedCallback+0x20>
        DS3231_Get_Time();
 8001a54:	f7ff fa6a 	bl	8000f2c <DS3231_Get_Time>
        send_time();
 8001a58:	f000 f82e 	bl	8001ab8 <send_time>
        checkAlarmsNonBlocking();
 8001a5c:	f7ff f998 	bl	8000d90 <checkAlarmsNonBlocking>
        processAlarm();
 8001a60:	f7ff f9f8 	bl	8000e54 <processAlarm>
	}
    if (htim == &htim2) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d102      	bne.n	8001a72 <HAL_TIM_PeriodElapsedCallback+0x2e>
//    	static uint32_t last_time = 0;
//    	uint32_t now = HAL_GetTick();  // in ms
//    	sprintf(dbg, "Time last callback: %lu ms\r\n", now - last_time);
//    	last_time = now;
//		send_uart(dbg);
		process_midi_event(&playback_ctx);
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001a6e:	f000 fbef 	bl	8002250 <process_midi_event>
    }
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20014b24 	.word	0x20014b24
 8001a80:	20014adc 	.word	0x20014adc
 8001a84:	20015c30 	.word	0x20015c30

08001a88 <send_uart>:

void send_uart (char *string){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7fe fba7 	bl	80001e4 <strlen>
 8001a96:	4603      	mov	r3, r0
 8001a98:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart4, (uint8_t *) string , len, -1);
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <send_uart+0x2c>)
 8001aa6:	f004 f9e6 	bl	8005e76 <HAL_UART_Transmit>
}
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20014b6c 	.word	0x20014b6c

08001ab8 <send_time>:
		send_uart(string);
	  }
	}
}

void send_time() {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
  if (should_send_time()) {
 8001abe:	f7ff f9d9 	bl	8000e74 <should_send_time>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01a      	beq.n	8001afe <send_time+0x46>
//	  send_uart("send time\r\n");
	SyncTime cur;
	cur.day = time.dayofmonth;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <send_time+0x50>)
 8001aca:	791b      	ldrb	r3, [r3, #4]
 8001acc:	703b      	strb	r3, [r7, #0]
	cur.month = time.month;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <send_time+0x50>)
 8001ad0:	795b      	ldrb	r3, [r3, #5]
 8001ad2:	707b      	strb	r3, [r7, #1]
	cur.year = time.year + 2000; // Точно проверь пж
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <send_time+0x50>)
 8001ad6:	799b      	ldrb	r3, [r3, #6]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	807b      	strh	r3, [r7, #2]
	cur.hours = time.hour;
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <send_time+0x50>)
 8001ae4:	789b      	ldrb	r3, [r3, #2]
 8001ae6:	713b      	strb	r3, [r7, #4]
	cur.minutes = time.minutes;
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <send_time+0x50>)
 8001aea:	785b      	ldrb	r3, [r3, #1]
 8001aec:	717b      	strb	r3, [r7, #5]
	cur.seconds = time.seconds;
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <send_time+0x50>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	71bb      	strb	r3, [r7, #6]
	send_command(SEP_SERVER_TIME, &cur);
 8001af4:	463b      	mov	r3, r7
 8001af6:	4619      	mov	r1, r3
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7ff f929 	bl	8000d50 <send_command>
  }
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20014a14 	.word	0x20014a14

08001b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b092      	sub	sp, #72	; 0x48
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b12:	f001 fa0b 	bl	8002f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b16:	f000 f84b 	bl	8001bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b1a:	f000 fa05 	bl	8001f28 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001b1e:	f000 f915 	bl	8001d4c <MX_TIM2_Init>
  MX_FATFS_Init();
 8001b22:	f005 faa7 	bl	8007074 <MX_FATFS_Init>
  MX_SPI3_Init();
 8001b26:	f000 f8db 	bl	8001ce0 <MX_SPI3_Init>
  MX_UART4_Init();
 8001b2a:	f000 f9a9 	bl	8001e80 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8001b2e:	f000 f9d1 	bl	8001ed4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001b32:	f000 f8a7 	bl	8001c84 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001b36:	f000 f955 	bl	8001de4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 8001b3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b3e:	f001 fa67 	bl	8003010 <HAL_Delay>
  send_uart ("Lift off\n\r");
 8001b42:	4813      	ldr	r0, [pc, #76]	; (8001b90 <main+0x84>)
 8001b44:	f7ff ffa0 	bl	8001a88 <send_uart>
  shift_reg_init();
 8001b48:	f7ff ff16 	bl	8001978 <shift_reg_init>

  fresult = f_mount(&fs, "", 0);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	4911      	ldr	r1, [pc, #68]	; (8001b94 <main+0x88>)
 8001b50:	4811      	ldr	r0, [pc, #68]	; (8001b98 <main+0x8c>)
 8001b52:	f007 fcdd 	bl	8009510 <f_mount>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <main+0x90>)
 8001b5c:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK) send_uart ("error in mounting SD CARD ... \n\r");
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <main+0x90>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <main+0x62>
 8001b66:	480e      	ldr	r0, [pc, #56]	; (8001ba0 <main+0x94>)
 8001b68:	f7ff ff8e 	bl	8001a88 <send_uart>
 8001b6c:	e002      	b.n	8001b74 <main+0x68>
  else send_uart("SD CARD mounted successfully...\n\r");
 8001b6e:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <main+0x98>)
 8001b70:	f7ff ff8a 	bl	8001a88 <send_uart>
  /* USER CODE BEGIN WHILE */

//  init_server();
//  HAL_TIM_Base_Start_IT(&htim3);
//  initAlarm();
  uint signal = 30;
 8001b74:	231e      	movs	r3, #30
 8001b76:	647b      	str	r3, [r7, #68]	; 0x44
  char dbg[64];
  while(1){
	  uint8_t byte;
	  HAL_UART_Receive(&huart4, &byte, 1, -1);
 8001b78:	1cf9      	adds	r1, r7, #3
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b7e:	2201      	movs	r2, #1
 8001b80:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <main+0x9c>)
 8001b82:	f004 fa0a 	bl	8005f9a <HAL_UART_Receive>
//	  HAL_Delay(signal);
//	  clear_shift_reg();
//	  signal+=10;
//	  sprintf(dbg, "signal = %d\n\r", signal);
//	  send_uart(dbg);
	  play_midi("two_bells8.mid");
 8001b86:	4809      	ldr	r0, [pc, #36]	; (8001bac <main+0xa0>)
 8001b88:	f000 fa70 	bl	800206c <play_midi>
  while(1){
 8001b8c:	e7f4      	b.n	8001b78 <main+0x6c>
 8001b8e:	bf00      	nop
 8001b90:	0800bf24 	.word	0x0800bf24
 8001b94:	0800bf30 	.word	0x0800bf30
 8001b98:	20014bf4 	.word	0x20014bf4
 8001b9c:	20015c2c 	.word	0x20015c2c
 8001ba0:	0800bf34 	.word	0x0800bf34
 8001ba4:	0800bf58 	.word	0x0800bf58
 8001ba8:	20014b6c 	.word	0x20014b6c
 8001bac:	0800bf7c 	.word	0x0800bf7c

08001bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b094      	sub	sp, #80	; 0x50
 8001bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb6:	f107 0320 	add.w	r3, r7, #32
 8001bba:	2230      	movs	r2, #48	; 0x30
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f008 fa2a 	bl	800a018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc4:	f107 030c 	add.w	r3, r7, #12
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <SystemClock_Config+0xcc>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	4a27      	ldr	r2, [pc, #156]	; (8001c7c <SystemClock_Config+0xcc>)
 8001bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be2:	6413      	str	r3, [r2, #64]	; 0x40
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <SystemClock_Config+0xcc>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <SystemClock_Config+0xd0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a21      	ldr	r2, [pc, #132]	; (8001c80 <SystemClock_Config+0xd0>)
 8001bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <SystemClock_Config+0xd0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c16:	2302      	movs	r3, #2
 8001c18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c20:	2304      	movs	r3, #4
 8001c22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c24:	23a8      	movs	r3, #168	; 0xa8
 8001c26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c30:	f107 0320 	add.w	r3, r7, #32
 8001c34:	4618      	mov	r0, r3
 8001c36:	f002 fb57 	bl	80042e8 <HAL_RCC_OscConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c40:	f000 fa0e 	bl	8002060 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c44:	230f      	movs	r3, #15
 8001c46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	2105      	movs	r1, #5
 8001c62:	4618      	mov	r0, r3
 8001c64:	f002 fdb8 	bl	80047d8 <HAL_RCC_ClockConfig>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c6e:	f000 f9f7 	bl	8002060 <Error_Handler>
  }
}
 8001c72:	bf00      	nop
 8001c74:	3750      	adds	r7, #80	; 0x50
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40007000 	.word	0x40007000

08001c84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001c8a:	4a13      	ldr	r2, [pc, #76]	; (8001cd8 <MX_I2C1_Init+0x54>)
 8001c8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001c90:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <MX_I2C1_Init+0x58>)
 8001c92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001ca2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ca6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cc0:	4804      	ldr	r0, [pc, #16]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001cc2:	f001 fd23 	bl	800370c <HAL_I2C_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ccc:	f000 f9c8 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20014a30 	.word	0x20014a30
 8001cd8:	40005400 	.word	0x40005400
 8001cdc:	000186a0 	.word	0x000186a0

08001ce0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ce4:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <MX_SPI3_Init+0x64>)
 8001ce6:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <MX_SPI3_Init+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001cea:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <MX_SPI3_Init+0x64>)
 8001cec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cf0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <MX_SPI3_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <MX_SPI3_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_SPI3_Init+0x64>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <MX_SPI3_Init+0x64>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_SPI3_Init+0x64>)
 8001d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d10:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_SPI3_Init+0x64>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <MX_SPI3_Init+0x64>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_SPI3_Init+0x64>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d24:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <MX_SPI3_Init+0x64>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_SPI3_Init+0x64>)
 8001d2c:	220a      	movs	r2, #10
 8001d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d30:	4804      	ldr	r0, [pc, #16]	; (8001d44 <MX_SPI3_Init+0x64>)
 8001d32:	f002 ff71 	bl	8004c18 <HAL_SPI_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001d3c:	f000 f990 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20014a84 	.word	0x20014a84
 8001d48:	40003c00 	.word	0x40003c00

08001d4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d52:	f107 0308 	add.w	r3, r7, #8
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d60:	463b      	mov	r3, r7
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <MX_TIM2_Init+0x94>)
 8001d6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <MX_TIM2_Init+0x94>)
 8001d72:	2253      	movs	r2, #83	; 0x53
 8001d74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <MX_TIM2_Init+0x94>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8001d7c:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <MX_TIM2_Init+0x94>)
 8001d7e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001d82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <MX_TIM2_Init+0x94>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <MX_TIM2_Init+0x94>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d90:	4813      	ldr	r0, [pc, #76]	; (8001de0 <MX_TIM2_Init+0x94>)
 8001d92:	f003 fb73 	bl	800547c <HAL_TIM_Base_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d9c:	f000 f960 	bl	8002060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	4619      	mov	r1, r3
 8001dac:	480c      	ldr	r0, [pc, #48]	; (8001de0 <MX_TIM2_Init+0x94>)
 8001dae:	f003 fd5c 	bl	800586a <HAL_TIM_ConfigClockSource>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001db8:	f000 f952 	bl	8002060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_TIM2_Init+0x94>)
 8001dca:	f003 ff77 	bl	8005cbc <HAL_TIMEx_MasterConfigSynchronization>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001dd4:	f000 f944 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20014adc 	.word	0x20014adc

08001de4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df8:	463b      	mov	r3, r7
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <MX_TIM3_Init+0x94>)
 8001e02:	4a1e      	ldr	r2, [pc, #120]	; (8001e7c <MX_TIM3_Init+0x98>)
 8001e04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1249;
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <MX_TIM3_Init+0x94>)
 8001e08:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001e0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <MX_TIM3_Init+0x94>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e14:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <MX_TIM3_Init+0x94>)
 8001e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <MX_TIM3_Init+0x94>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <MX_TIM3_Init+0x94>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e28:	4813      	ldr	r0, [pc, #76]	; (8001e78 <MX_TIM3_Init+0x94>)
 8001e2a:	f003 fb27 	bl	800547c <HAL_TIM_Base_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001e34:	f000 f914 	bl	8002060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	4619      	mov	r1, r3
 8001e44:	480c      	ldr	r0, [pc, #48]	; (8001e78 <MX_TIM3_Init+0x94>)
 8001e46:	f003 fd10 	bl	800586a <HAL_TIM_ConfigClockSource>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e50:	f000 f906 	bl	8002060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e54:	2300      	movs	r3, #0
 8001e56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_TIM3_Init+0x94>)
 8001e62:	f003 ff2b 	bl	8005cbc <HAL_TIMEx_MasterConfigSynchronization>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e6c:	f000 f8f8 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e70:	bf00      	nop
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20014b24 	.word	0x20014b24
 8001e7c:	40000400 	.word	0x40000400

08001e80 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <MX_UART4_Init+0x4c>)
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <MX_UART4_Init+0x50>)
 8001e88:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <MX_UART4_Init+0x4c>)
 8001e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e90:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <MX_UART4_Init+0x4c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <MX_UART4_Init+0x4c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <MX_UART4_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <MX_UART4_Init+0x4c>)
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <MX_UART4_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <MX_UART4_Init+0x4c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001eb6:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_UART4_Init+0x4c>)
 8001eb8:	f003 ff90 	bl	8005ddc <HAL_UART_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001ec2:	f000 f8cd 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20014b6c 	.word	0x20014b6c
 8001ed0:	40004c00 	.word	0x40004c00

08001ed4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <MX_USART3_UART_Init+0x4c>)
 8001eda:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <MX_USART3_UART_Init+0x50>)
 8001edc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <MX_USART3_UART_Init+0x4c>)
 8001ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ee4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <MX_USART3_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <MX_USART3_UART_Init+0x4c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <MX_USART3_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <MX_USART3_UART_Init+0x4c>)
 8001efa:	220c      	movs	r2, #12
 8001efc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <MX_USART3_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <MX_USART3_UART_Init+0x4c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f0a:	4805      	ldr	r0, [pc, #20]	; (8001f20 <MX_USART3_UART_Init+0x4c>)
 8001f0c:	f003 ff66 	bl	8005ddc <HAL_UART_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f16:	f000 f8a3 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20014bb0 	.word	0x20014bb0
 8001f24:	40004800 	.word	0x40004800

08001f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	4b43      	ldr	r3, [pc, #268]	; (8002050 <MX_GPIO_Init+0x128>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a42      	ldr	r2, [pc, #264]	; (8002050 <MX_GPIO_Init+0x128>)
 8001f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b40      	ldr	r3, [pc, #256]	; (8002050 <MX_GPIO_Init+0x128>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b3c      	ldr	r3, [pc, #240]	; (8002050 <MX_GPIO_Init+0x128>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a3b      	ldr	r2, [pc, #236]	; (8002050 <MX_GPIO_Init+0x128>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b39      	ldr	r3, [pc, #228]	; (8002050 <MX_GPIO_Init+0x128>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	4b35      	ldr	r3, [pc, #212]	; (8002050 <MX_GPIO_Init+0x128>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a34      	ldr	r2, [pc, #208]	; (8002050 <MX_GPIO_Init+0x128>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b32      	ldr	r3, [pc, #200]	; (8002050 <MX_GPIO_Init+0x128>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <MX_GPIO_Init+0x128>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a2d      	ldr	r2, [pc, #180]	; (8002050 <MX_GPIO_Init+0x128>)
 8001f9c:	f043 0308 	orr.w	r3, r3, #8
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <MX_GPIO_Init+0x128>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	4b27      	ldr	r3, [pc, #156]	; (8002050 <MX_GPIO_Init+0x128>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a26      	ldr	r2, [pc, #152]	; (8002050 <MX_GPIO_Init+0x128>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b24      	ldr	r3, [pc, #144]	; (8002050 <MX_GPIO_Init+0x128>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fd0:	4820      	ldr	r0, [pc, #128]	; (8002054 <MX_GPIO_Init+0x12c>)
 8001fd2:	f001 fb81 	bl	80036d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CLK2_Pin|CLK1_Pin|MR_Pin|DS_Pin, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001fdc:	481e      	ldr	r0, [pc, #120]	; (8002058 <MX_GPIO_Init+0x130>)
 8001fde:	f001 fb7b 	bl	80036d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fe8:	481c      	ldr	r0, [pc, #112]	; (800205c <MX_GPIO_Init+0x134>)
 8001fea:	f001 fb75 	bl	80036d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8001fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	4619      	mov	r1, r3
 8002006:	4813      	ldr	r0, [pc, #76]	; (8002054 <MX_GPIO_Init+0x12c>)
 8002008:	f001 f9ca 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK2_Pin CLK1_Pin MR_Pin DS_Pin */
  GPIO_InitStruct.Pin = CLK2_Pin|CLK1_Pin|MR_Pin|DS_Pin;
 800200c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002012:	2301      	movs	r3, #1
 8002014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	4619      	mov	r1, r3
 8002024:	480c      	ldr	r0, [pc, #48]	; (8002058 <MX_GPIO_Init+0x130>)
 8002026:	f001 f9bb 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800202a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800202e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002030:	2301      	movs	r3, #1
 8002032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	4619      	mov	r1, r3
 8002042:	4806      	ldr	r0, [pc, #24]	; (800205c <MX_GPIO_Init+0x134>)
 8002044:	f001 f9ac 	bl	80033a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002048:	bf00      	nop
 800204a:	3728      	adds	r7, #40	; 0x28
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40023800 	.word	0x40023800
 8002054:	40020c00 	.word	0x40020c00
 8002058:	40020800 	.word	0x40020800
 800205c:	40020000 	.word	0x40020000

08002060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002064:	b672      	cpsid	i
}
 8002066:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002068:	e7fe      	b.n	8002068 <Error_Handler+0x8>
	...

0800206c <play_midi>:
    uint64_t result = (uint64_t)delta_ticks * tempo;
    result /= (uint64_t)ppqn * 1000UL;
    return (uint32_t)result;
}

void play_midi(char* filename){
 800206c:	b580      	push	{r7, lr}
 800206e:	f5ad 5d11 	sub.w	sp, sp, #9280	; 0x2440
 8002072:	b082      	sub	sp, #8
 8002074:	af02      	add	r7, sp, #8
 8002076:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800207a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800207e:	6018      	str	r0, [r3, #0]
	sprintf(consoleOutput, "Начинаем считывать конфиг задержек\n\r");
 8002080:	4964      	ldr	r1, [pc, #400]	; (8002214 <play_midi+0x1a8>)
 8002082:	4865      	ldr	r0, [pc, #404]	; (8002218 <play_midi+0x1ac>)
 8002084:	f008 fabe 	bl	800a604 <siprintf>
	send_uart(consoleOutput);
 8002088:	4863      	ldr	r0, [pc, #396]	; (8002218 <play_midi+0x1ac>)
 800208a:	f7ff fcfd 	bl	8001a88 <send_uart>
//	load_note_timing_from_sd(delays, signals, NUM_NOTES);

	sprintf(consoleOutput, "Начинаем открывать MIDI файл\n\r");
 800208e:	4963      	ldr	r1, [pc, #396]	; (800221c <play_midi+0x1b0>)
 8002090:	4861      	ldr	r0, [pc, #388]	; (8002218 <play_midi+0x1ac>)
 8002092:	f008 fab7 	bl	800a604 <siprintf>
	send_uart(consoleOutput);
 8002096:	4860      	ldr	r0, [pc, #384]	; (8002218 <play_midi+0x1ac>)
 8002098:	f7ff fcf6 	bl	8001a88 <send_uart>

	uint8_t fileBuffer[5*1024]; //TODO размеры

	static MidiEvent midiEvents[500]; //TODO размеры

	playback_ctx.events = midiEvents;
 800209c:	4b60      	ldr	r3, [pc, #384]	; (8002220 <play_midi+0x1b4>)
 800209e:	4a61      	ldr	r2, [pc, #388]	; (8002224 <play_midi+0x1b8>)
 80020a0:	601a      	str	r2, [r3, #0]
	playback_ctx.event_count = 0;
 80020a2:	4b5f      	ldr	r3, [pc, #380]	; (8002220 <play_midi+0x1b4>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	809a      	strh	r2, [r3, #4]
	playback_ctx.current_index = 0;
 80020a8:	4b5d      	ldr	r3, [pc, #372]	; (8002220 <play_midi+0x1b4>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	80da      	strh	r2, [r3, #6]
	playback_ctx.output_state = 0;
 80020ae:	4b5c      	ldr	r3, [pc, #368]	; (8002220 <play_midi+0x1b4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	721a      	strb	r2, [r3, #8]
	playback_ctx.current_delta_time = 0;
 80020b4:	4b5a      	ldr	r3, [pc, #360]	; (8002220 <play_midi+0x1b4>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	60da      	str	r2, [r3, #12]
	playback_ctx.htim = &htim2;
 80020ba:	4b59      	ldr	r3, [pc, #356]	; (8002220 <play_midi+0x1b4>)
 80020bc:	4a5a      	ldr	r2, [pc, #360]	; (8002228 <play_midi+0x1bc>)
 80020be:	611a      	str	r2, [r3, #16]

	res = f_open(&file, filename, FA_READ);
 80020c0:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80020c4:	f2a3 413c 	subw	r1, r3, #1084	; 0x43c
 80020c8:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80020cc:	3b14      	subs	r3, #20
 80020ce:	2201      	movs	r2, #1
 80020d0:	6809      	ldr	r1, [r1, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f007 fa62 	bl	800959c <f_open>
 80020d8:	4603      	mov	r3, r0
 80020da:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 80020de:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 80020e2:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK) {
 80020e4:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 80020e8:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00d      	beq.n	800210e <play_midi+0xa2>
		sprintf(consoleOutput, "Ошибка открытия файла: %d\n\r", res);
 80020f2:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 80020f6:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	494b      	ldr	r1, [pc, #300]	; (800222c <play_midi+0x1c0>)
 8002100:	4845      	ldr	r0, [pc, #276]	; (8002218 <play_midi+0x1ac>)
 8002102:	f008 fa7f 	bl	800a604 <siprintf>
		send_uart(consoleOutput);
 8002106:	4844      	ldr	r0, [pc, #272]	; (8002218 <play_midi+0x1ac>)
 8002108:	f7ff fcbe 	bl	8001a88 <send_uart>
		return;
 800210c:	e07d      	b.n	800220a <play_midi+0x19e>
	}
	sprintf(consoleOutput, "Прочитали MIDI файл\n\r");
 800210e:	4948      	ldr	r1, [pc, #288]	; (8002230 <play_midi+0x1c4>)
 8002110:	4841      	ldr	r0, [pc, #260]	; (8002218 <play_midi+0x1ac>)
 8002112:	f008 fa77 	bl	800a604 <siprintf>
	send_uart(consoleOutput);
 8002116:	4840      	ldr	r0, [pc, #256]	; (8002218 <play_midi+0x1ac>)
 8002118:	f7ff fcb6 	bl	8001a88 <send_uart>

    res = f_read(&file, fileBuffer, sizeof(fileBuffer), &bytesRead);
 800211c:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8002120:	3b18      	subs	r3, #24
 8002122:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002126:	3938      	subs	r1, #56	; 0x38
 8002128:	f507 50a1 	add.w	r0, r7, #5152	; 0x1420
 800212c:	3814      	subs	r0, #20
 800212e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8002132:	f007 fbff 	bl	8009934 <f_read>
 8002136:	4603      	mov	r3, r0
 8002138:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 800213c:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8002140:	7013      	strb	r3, [r2, #0]

	f_close(&file);
 8002142:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8002146:	3b14      	subs	r3, #20
 8002148:	4618      	mov	r0, r3
 800214a:	f007 fdd0 	bl	8009cee <f_close>

	if (read_midi_header(fileBuffer, bytesRead) != 0) { //&metadata.format, &metadata.num_tracks, &metadata.division
 800214e:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8002152:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8002156:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800215a:	3b38      	subs	r3, #56	; 0x38
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f000 f944 	bl	80023ec <read_midi_header>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d007      	beq.n	800217a <play_midi+0x10e>
		sprintf(consoleOutput, "У MIDI файла некорректный заголовок\n\r");
 800216a:	4932      	ldr	r1, [pc, #200]	; (8002234 <play_midi+0x1c8>)
 800216c:	482a      	ldr	r0, [pc, #168]	; (8002218 <play_midi+0x1ac>)
 800216e:	f008 fa49 	bl	800a604 <siprintf>
		send_uart(consoleOutput);
 8002172:	4829      	ldr	r0, [pc, #164]	; (8002218 <play_midi+0x1ac>)
 8002174:	f7ff fc88 	bl	8001a88 <send_uart>
		return;
 8002178:	e047      	b.n	800220a <play_midi+0x19e>
	}

	metadata.tempo = 400000;
 800217a:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <play_midi+0x1cc>)
 800217c:	4a2f      	ldr	r2, [pc, #188]	; (800223c <play_midi+0x1d0>)
 800217e:	609a      	str	r2, [r3, #8]

	sprintf(consoleOutput, "Сохранили мета информацию о MIDI файле: Num_tracks = %u, tempo = %u, division = %u, format = %u\n\r", metadata.num_tracks, metadata.tempo, metadata.division, metadata.format);
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <play_midi+0x1cc>)
 8002182:	885b      	ldrh	r3, [r3, #2]
 8002184:	4618      	mov	r0, r3
 8002186:	4b2c      	ldr	r3, [pc, #176]	; (8002238 <play_midi+0x1cc>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	4a2b      	ldr	r2, [pc, #172]	; (8002238 <play_midi+0x1cc>)
 800218c:	8892      	ldrh	r2, [r2, #4]
 800218e:	4611      	mov	r1, r2
 8002190:	4a29      	ldr	r2, [pc, #164]	; (8002238 <play_midi+0x1cc>)
 8002192:	8812      	ldrh	r2, [r2, #0]
 8002194:	9201      	str	r2, [sp, #4]
 8002196:	9100      	str	r1, [sp, #0]
 8002198:	4602      	mov	r2, r0
 800219a:	4929      	ldr	r1, [pc, #164]	; (8002240 <play_midi+0x1d4>)
 800219c:	481e      	ldr	r0, [pc, #120]	; (8002218 <play_midi+0x1ac>)
 800219e:	f008 fa31 	bl	800a604 <siprintf>
	send_uart(consoleOutput);
 80021a2:	481d      	ldr	r0, [pc, #116]	; (8002218 <play_midi+0x1ac>)
 80021a4:	f7ff fc70 	bl	8001a88 <send_uart>

	playback_ctx.event_count = parse_midi(fileBuffer, bytesRead, midiEvents, sizeof(midiEvents)/sizeof(MidiEvent));
 80021a8:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 80021ac:	f853 1c38 	ldr.w	r1, [r3, #-56]
 80021b0:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80021b4:	3838      	subs	r0, #56	; 0x38
 80021b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021ba:	4a1a      	ldr	r2, [pc, #104]	; (8002224 <play_midi+0x1b8>)
 80021bc:	f000 f968 	bl	8002490 <parse_midi>
 80021c0:	4603      	mov	r3, r0
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	4b16      	ldr	r3, [pc, #88]	; (8002220 <play_midi+0x1b4>)
 80021c6:	809a      	strh	r2, [r3, #4]
	if (playback_ctx.event_count == 0) {
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <play_midi+0x1b4>)
 80021ca:	889b      	ldrh	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d107      	bne.n	80021e0 <play_midi+0x174>
		sprintf(consoleOutput, "Нет событий MIDI\n\r");
 80021d0:	491c      	ldr	r1, [pc, #112]	; (8002244 <play_midi+0x1d8>)
 80021d2:	4811      	ldr	r0, [pc, #68]	; (8002218 <play_midi+0x1ac>)
 80021d4:	f008 fa16 	bl	800a604 <siprintf>
		send_uart(consoleOutput);
 80021d8:	480f      	ldr	r0, [pc, #60]	; (8002218 <play_midi+0x1ac>)
 80021da:	f7ff fc55 	bl	8001a88 <send_uart>
		return;
 80021de:	e014      	b.n	800220a <play_midi+0x19e>
	}

	clear_shift_reg();
 80021e0:	f7ff fc14 	bl	8001a0c <clear_shift_reg>
	sprintf(consoleOutput, "Очистили сдвиговые регистры\n\r");
 80021e4:	4918      	ldr	r1, [pc, #96]	; (8002248 <play_midi+0x1dc>)
 80021e6:	480c      	ldr	r0, [pc, #48]	; (8002218 <play_midi+0x1ac>)
 80021e8:	f008 fa0c 	bl	800a604 <siprintf>
	send_uart(consoleOutput);
 80021ec:	480a      	ldr	r0, [pc, #40]	; (8002218 <play_midi+0x1ac>)
 80021ee:	f7ff fc4b 	bl	8001a88 <send_uart>

	sprintf(consoleOutput, "Начинаем воспроизводить MIDI файл\n\r");
 80021f2:	4916      	ldr	r1, [pc, #88]	; (800224c <play_midi+0x1e0>)
 80021f4:	4808      	ldr	r0, [pc, #32]	; (8002218 <play_midi+0x1ac>)
 80021f6:	f008 fa05 	bl	800a604 <siprintf>
	send_uart(consoleOutput);
 80021fa:	4807      	ldr	r0, [pc, #28]	; (8002218 <play_midi+0x1ac>)
 80021fc:	f7ff fc44 	bl	8001a88 <send_uart>
    HAL_TIM_Base_Start_IT(playback_ctx.htim);
 8002200:	4b07      	ldr	r3, [pc, #28]	; (8002220 <play_midi+0x1b4>)
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	4618      	mov	r0, r3
 8002206:	f003 f989 	bl	800551c <HAL_TIM_Base_Start_IT>
}
 800220a:	f507 5711 	add.w	r7, r7, #9280	; 0x2440
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	0800bf8c 	.word	0x0800bf8c
 8002218:	20015c44 	.word	0x20015c44
 800221c:	0800bfd0 	.word	0x0800bfd0
 8002220:	20015c30 	.word	0x20015c30
 8002224:	20015cd0 	.word	0x20015cd0
 8002228:	20014adc 	.word	0x20014adc
 800222c:	0800c004 	.word	0x0800c004
 8002230:	0800c034 	.word	0x0800c034
 8002234:	0800c058 	.word	0x0800c058
 8002238:	20015cc4 	.word	0x20015cc4
 800223c:	00061a80 	.word	0x00061a80
 8002240:	0800c09c 	.word	0x0800c09c
 8002244:	0800c11c 	.word	0x0800c11c
 8002248:	0800c13c 	.word	0x0800c13c
 800224c:	0800c174 	.word	0x0800c174

08002250 <process_midi_event>:

void process_midi_event(MidiPlaybackContext* ctx) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
    MidiEvent* current = &ctx->events[ctx->current_index];
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	88db      	ldrh	r3, [r3, #6]
 8002260:	4619      	mov	r1, r3
 8002262:	460b      	mov	r3, r1
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	440b      	add	r3, r1
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]

	while(current->delta_time <= ctx->current_delta_time){
 800226e:	e080      	b.n	8002372 <process_midi_event+0x122>
		sprintf(consoleOutput, "current ctx delta_time: %d; current note delta_time: %d\n\r", ctx->current_delta_time, current->delta_time);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	494a      	ldr	r1, [pc, #296]	; (80023a4 <process_midi_event+0x154>)
 800227a:	484b      	ldr	r0, [pc, #300]	; (80023a8 <process_midi_event+0x158>)
 800227c:	f008 f9c2 	bl	800a604 <siprintf>
		send_uart(consoleOutput);
 8002280:	4849      	ldr	r0, [pc, #292]	; (80023a8 <process_midi_event+0x158>)
 8002282:	f7ff fc01 	bl	8001a88 <send_uart>
		if (ctx->current_index >= ctx->event_count) {
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	88da      	ldrh	r2, [r3, #6]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	889b      	ldrh	r3, [r3, #4]
 800228e:	429a      	cmp	r2, r3
 8002290:	d30e      	bcc.n	80022b0 <process_midi_event+0x60>
			sprintf(consoleOutput, "Воспроизведение завершено\n\r");
 8002292:	4946      	ldr	r1, [pc, #280]	; (80023ac <process_midi_event+0x15c>)
 8002294:	4844      	ldr	r0, [pc, #272]	; (80023a8 <process_midi_event+0x158>)
 8002296:	f008 f9b5 	bl	800a604 <siprintf>
			send_uart(consoleOutput);
 800229a:	4843      	ldr	r0, [pc, #268]	; (80023a8 <process_midi_event+0x158>)
 800229c:	f7ff fbf4 	bl	8001a88 <send_uart>
			HAL_TIM_Base_Stop_IT(ctx->htim);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f003 f9a9 	bl	80055fc <HAL_TIM_Base_Stop_IT>
			clear_shift_reg();
 80022aa:	f7ff fbaf 	bl	8001a0c <clear_shift_reg>
			return;
 80022ae:	e075      	b.n	800239c <process_midi_event+0x14c>
		}

		switch(current->type) {
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	f64f 7251 	movw	r2, #65361	; 0xff51
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d037      	beq.n	800232c <process_midi_event+0xdc>
 80022bc:	f64f 7251 	movw	r2, #65361	; 0xff51
 80022c0:	4293      	cmp	r3, r2
 80022c2:	dc3b      	bgt.n	800233c <process_midi_event+0xec>
 80022c4:	2b80      	cmp	r3, #128	; 0x80
 80022c6:	d018      	beq.n	80022fa <process_midi_event+0xaa>
 80022c8:	2b90      	cmp	r3, #144	; 0x90
 80022ca:	d137      	bne.n	800233c <process_midi_event+0xec>
			case MIDI_NOTE_ON:
				ctx->output_state |= (1 << (current->data.note.note - BASE_NOTE)); // +6 HARDCODE
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	7a1b      	ldrb	r3, [r3, #8]
 80022d0:	b25a      	sxtb	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	7a5b      	ldrb	r3, [r3, #9]
 80022d6:	3b48      	subs	r3, #72	; 0x48
 80022d8:	2101      	movs	r1, #1
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	b25b      	sxtb	r3, r3
 80022e0:	4313      	orrs	r3, r2
 80022e2:	b25b      	sxtb	r3, r3
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	721a      	strb	r2, [r3, #8]
				sprintf(consoleOutput, "Note on: %d\n\r", current->data.note.note);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	7a5b      	ldrb	r3, [r3, #9]
 80022ee:	461a      	mov	r2, r3
 80022f0:	492f      	ldr	r1, [pc, #188]	; (80023b0 <process_midi_event+0x160>)
 80022f2:	482d      	ldr	r0, [pc, #180]	; (80023a8 <process_midi_event+0x158>)
 80022f4:	f008 f986 	bl	800a604 <siprintf>
				break;
 80022f8:	e027      	b.n	800234a <process_midi_event+0xfa>

			case MIDI_NOTE_OFF:
				ctx->output_state &= ~(1 << (current->data.note.note - BASE_NOTE)); // +6 HARDCODE
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7a1b      	ldrb	r3, [r3, #8]
 80022fe:	b25a      	sxtb	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	7a5b      	ldrb	r3, [r3, #9]
 8002304:	3b48      	subs	r3, #72	; 0x48
 8002306:	2101      	movs	r1, #1
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	b25b      	sxtb	r3, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	b25b      	sxtb	r3, r3
 8002312:	4013      	ands	r3, r2
 8002314:	b25b      	sxtb	r3, r3
 8002316:	b2da      	uxtb	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	721a      	strb	r2, [r3, #8]
				sprintf(consoleOutput, "Note off: %d\n\r", current->data.note.note);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	7a5b      	ldrb	r3, [r3, #9]
 8002320:	461a      	mov	r2, r3
 8002322:	4924      	ldr	r1, [pc, #144]	; (80023b4 <process_midi_event+0x164>)
 8002324:	4820      	ldr	r0, [pc, #128]	; (80023a8 <process_midi_event+0x158>)
 8002326:	f008 f96d 	bl	800a604 <siprintf>
				break;
 800232a:	e00e      	b.n	800234a <process_midi_event+0xfa>

			case MIDI_SET_TEMPO:
				//TODO поддержать смену темпа
				sprintf(consoleOutput, "Tempo: %d\n\r", current->data.tempo.tempo);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	461a      	mov	r2, r3
 8002332:	4921      	ldr	r1, [pc, #132]	; (80023b8 <process_midi_event+0x168>)
 8002334:	481c      	ldr	r0, [pc, #112]	; (80023a8 <process_midi_event+0x158>)
 8002336:	f008 f965 	bl	800a604 <siprintf>
				break;
 800233a:	e006      	b.n	800234a <process_midi_event+0xfa>

			default:
				sprintf(consoleOutput, "Event: %d\n\r", current->type);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	491e      	ldr	r1, [pc, #120]	; (80023bc <process_midi_event+0x16c>)
 8002344:	4818      	ldr	r0, [pc, #96]	; (80023a8 <process_midi_event+0x158>)
 8002346:	f008 f95d 	bl	800a604 <siprintf>
		}
		send_uart(consoleOutput);
 800234a:	4817      	ldr	r0, [pc, #92]	; (80023a8 <process_midi_event+0x158>)
 800234c:	f7ff fb9c 	bl	8001a88 <send_uart>
		ctx->current_index++;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	88db      	ldrh	r3, [r3, #6]
 8002354:	3301      	adds	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	80da      	strh	r2, [r3, #6]
		current = &ctx->events[ctx->current_index];
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	88db      	ldrh	r3, [r3, #6]
 8002364:	4619      	mov	r1, r3
 8002366:	460b      	mov	r3, r1
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	440b      	add	r3, r1
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
	while(current->delta_time <= ctx->current_delta_time){
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	429a      	cmp	r2, r3
 800237c:	f67f af78 	bls.w	8002270 <process_midi_event+0x20>
	}
	put_val_to_shift_reg(ctx->output_state);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7a1b      	ldrb	r3, [r3, #8]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fb0b 	bl	80019a0 <put_val_to_shift_reg>
	ctx->current_delta_time += count_ticks(5); //TODO переводить ARR в мс и передавать как аргумент в count_ticks
 800238a:	2005      	movs	r0, #5
 800238c:	f000 fac6 	bl	800291c <count_ticks>
 8002390:	4602      	mov	r2, r0
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	441a      	add	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	60da      	str	r2, [r3, #12]

//    start_next_event(ctx);
}
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	0800c1b4 	.word	0x0800c1b4
 80023a8:	20015c44 	.word	0x20015c44
 80023ac:	0800c1f0 	.word	0x0800c1f0
 80023b0:	0800c224 	.word	0x0800c224
 80023b4:	0800c234 	.word	0x0800c234
 80023b8:	0800c244 	.word	0x0800c244
 80023bc:	0800c250 	.word	0x0800c250

080023c0 <swap16>:
}


void edit_parser_settings(){}

uint16_t swap16(uint16_t val) {
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	80fb      	strh	r3, [r7, #6]
    return (val >> 8) | (val << 8);
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	b21b      	sxth	r3, r3
 80023d8:	4313      	orrs	r3, r2
 80023da:	b21b      	sxth	r3, r3
 80023dc:	b29b      	uxth	r3, r3
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <read_midi_header>:

int read_midi_header(uint8_t* midi_data, uint32_t data_size){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
	sprintf(consoleOutput, "[in read_midi_header with data_size = %u]\n\r", data_size);
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	491f      	ldr	r1, [pc, #124]	; (8002478 <read_midi_header+0x8c>)
 80023fa:	4820      	ldr	r0, [pc, #128]	; (800247c <read_midi_header+0x90>)
 80023fc:	f008 f902 	bl	800a604 <siprintf>
	send_uart(consoleOutput);
 8002400:	481e      	ldr	r0, [pc, #120]	; (800247c <read_midi_header+0x90>)
 8002402:	f7ff fb41 	bl	8001a88 <send_uart>

	if (data_size < sizeof(MTHD_CHUNK)) {
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b0f      	cmp	r3, #15
 800240a:	d804      	bhi.n	8002416 <read_midi_header+0x2a>
		printf("Error: File too small!\n");
 800240c:	481c      	ldr	r0, [pc, #112]	; (8002480 <read_midi_header+0x94>)
 800240e:	f007 ff59 	bl	800a2c4 <puts>
		return 1;
 8002412:	2301      	movs	r3, #1
 8002414:	e02b      	b.n	800246e <read_midi_header+0x82>
	}

	MTHD_CHUNK *header = (MTHD_CHUNK *)midi_data;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60fb      	str	r3, [r7, #12]

	if (memcmp(header->ID, "MThd", 4) != 0) {
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2204      	movs	r2, #4
 800241e:	4919      	ldr	r1, [pc, #100]	; (8002484 <read_midi_header+0x98>)
 8002420:	4618      	mov	r0, r3
 8002422:	f007 fddb 	bl	8009fdc <memcmp>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <read_midi_header+0x4a>
		printf("Error: Not a MIDI file!\n");
 800242c:	4816      	ldr	r0, [pc, #88]	; (8002488 <read_midi_header+0x9c>)
 800242e:	f007 ff49 	bl	800a2c4 <puts>
		return 1;
 8002432:	2301      	movs	r3, #1
 8002434:	e01b      	b.n	800246e <read_midi_header+0x82>
	}

	metadata.format = swap16(header->Format);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	891b      	ldrh	r3, [r3, #8]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ffc0 	bl	80023c0 <swap16>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <read_midi_header+0xa0>)
 8002446:	801a      	strh	r2, [r3, #0]
	metadata.num_tracks = swap16(header->NumTracks);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	895b      	ldrh	r3, [r3, #10]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ffb7 	bl	80023c0 <swap16>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <read_midi_header+0xa0>)
 8002458:	805a      	strh	r2, [r3, #2]
	metadata.division = swap16(header->Division);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	899b      	ldrh	r3, [r3, #12]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ffae 	bl	80023c0 <swap16>
 8002464:	4603      	mov	r3, r0
 8002466:	461a      	mov	r2, r3
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <read_midi_header+0xa0>)
 800246a:	809a      	strh	r2, [r3, #4]

//	sprintf(consoleOutput, "Спарсили заголовок с format = %u, num_tracks = %u, division = %u]\n\r", metadata->format, metadata->num_tracks, metadata->division);
//	send_uart(consoleOutput);
	return 0;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	0800c25c 	.word	0x0800c25c
 800247c:	20015c44 	.word	0x20015c44
 8002480:	0800c288 	.word	0x0800c288
 8002484:	0800c2a0 	.word	0x0800c2a0
 8002488:	0800c2a8 	.word	0x0800c2a8
 800248c:	20015cc4 	.word	0x20015cc4

08002490 <parse_midi>:

int parse_midi(uint8_t* midi_data, uint32_t data_size, MidiEvent* events, uint32_t max_events) {
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b097      	sub	sp, #92	; 0x5c
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	603b      	str	r3, [r7, #0]
	uint32_t pos = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t event_count = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t delta_time = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	64fb      	str	r3, [r7, #76]	; 0x4c

	while (pos < data_size && event_count < max_events) {
 80024aa:	e0fd      	b.n	80026a8 <parse_midi+0x218>
		uint32_t time = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	64bb      	str	r3, [r7, #72]	; 0x48
		uint8_t byte;
		do {
			byte = midi_data[pos++];
 80024b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	657a      	str	r2, [r7, #84]	; 0x54
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4413      	add	r3, r2
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			time = (time << 7) | (byte & 0x7F);
 80024c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c2:	01da      	lsls	r2, r3, #7
 80024c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024cc:	4313      	orrs	r3, r2
 80024ce:	64bb      	str	r3, [r7, #72]	; 0x48
		} while (byte & 0x80);
 80024d0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	dbeb      	blt.n	80024b0 <parse_midi+0x20>

		delta_time += time;
 80024d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024dc:	4413      	add	r3, r2
 80024de:	64fb      	str	r3, [r7, #76]	; 0x4c

		uint8_t status = midi_data[pos++];
 80024e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	657a      	str	r2, [r7, #84]	; 0x54
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4413      	add	r3, r2
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		uint8_t outputType = -1;
 80024f0:	23ff      	movs	r3, #255	; 0xff
 80024f2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

		if ((status & 0xF0) == MIDI_NOTE_ON) {
 80024f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80024fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024fe:	2b90      	cmp	r3, #144	; 0x90
 8002500:	d150      	bne.n	80025a4 <parse_midi+0x114>
			uint8_t note = midi_data[pos++];
 8002502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	657a      	str	r2, [r7, #84]	; 0x54
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			uint8_t velocity = midi_data[pos++];
 8002512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	657a      	str	r2, [r7, #84]	; 0x54
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

            MidiEvent event;
			event.type = MIDI_NOTE_ON;
 8002522:	2390      	movs	r3, #144	; 0x90
 8002524:	85bb      	strh	r3, [r7, #44]	; 0x2c
            event.data.note.channel = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			event.data.note.note = note; // - '0'
 800252c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002530:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			event.data.note.velocity = velocity;
 8002534:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002538:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

			event.delta_time = delta_time;  // тут стояло time пока я не решил сразу записывать абсолютное время
 800253c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800253e:	633b      	str	r3, [r7, #48]	; 0x30
			events[event_count++] = event;
 8002540:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002542:	1c53      	adds	r3, r2, #1
 8002544:	653b      	str	r3, [r7, #80]	; 0x50
 8002546:	4613      	mov	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	461a      	mov	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4413      	add	r3, r2
 8002554:	461c      	mov	r4, r3
 8002556:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800255a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800255e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

			// генерирую note off событие
			MidiEvent event2;
			event2.type = MIDI_NOTE_OFF;
 8002562:	2380      	movs	r3, #128	; 0x80
 8002564:	843b      	strh	r3, [r7, #32]
			event2.data.note.channel = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			event2.data.note.note = note; // - '0'
 800256c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002570:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			event2.data.note.velocity = velocity;
 8002574:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002578:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

			event2.delta_time = delta_time;
 800257c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
			events[event_count++] = event2;
 8002580:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002582:	1c53      	adds	r3, r2, #1
 8002584:	653b      	str	r3, [r7, #80]	; 0x50
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	461a      	mov	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4413      	add	r3, r2
 8002594:	461c      	mov	r4, r3
 8002596:	f107 0320 	add.w	r3, r7, #32
 800259a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800259e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80025a2:	e081      	b.n	80026a8 <parse_midi+0x218>
		}
		else if (status == 0xFF){
 80025a4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80025a8:	2bff      	cmp	r3, #255	; 0xff
 80025aa:	d15a      	bne.n	8002662 <parse_midi+0x1d2>
			// Мета-событие: Tempo (0xFF 0x51 0x03 <темп 3 байта>)
			uint8_t meta_type = midi_data[pos++];
 80025ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	657a      	str	r2, [r7, #84]	; 0x54
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4413      	add	r3, r2
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

		    // Tempo change
		    if (meta_type == 0x51) {
 80025bc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80025c0:	2b51      	cmp	r3, #81	; 0x51
 80025c2:	d140      	bne.n	8002646 <parse_midi+0x1b6>
		        uint8_t meta_len = midi_data[pos++];
 80025c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	657a      	str	r2, [r7, #84]	; 0x54
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4413      	add	r3, r2
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

		        if (meta_len == 3) {
 80025d4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d12e      	bne.n	800263a <parse_midi+0x1aa>
		            uint32_t tempo = (midi_data[pos] << 16) | (midi_data[pos + 1] << 8) | midi_data[pos + 2];
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e0:	4413      	add	r3, r2
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	041a      	lsls	r2, r3, #16
 80025e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e8:	3301      	adds	r3, #1
 80025ea:	68f9      	ldr	r1, [r7, #12]
 80025ec:	440b      	add	r3, r1
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	4313      	orrs	r3, r2
 80025f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025f6:	3202      	adds	r2, #2
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	440a      	add	r2, r1
 80025fc:	7812      	ldrb	r2, [r2, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	63fb      	str	r3, [r7, #60]	; 0x3c
		            pos += 3;
 8002602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002604:	3303      	adds	r3, #3
 8002606:	657b      	str	r3, [r7, #84]	; 0x54

		            MidiEvent event;
		            event.type = MIDI_SET_TEMPO;
 8002608:	f64f 7351 	movw	r3, #65361	; 0xff51
 800260c:	82bb      	strh	r3, [r7, #20]
		            event.delta_time = time;
 800260e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002610:	61bb      	str	r3, [r7, #24]
		            event.data.tempo.tempo = tempo;
 8002612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002614:	61fb      	str	r3, [r7, #28]

		            events[event_count++] = event;
 8002616:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002618:	1c53      	adds	r3, r2, #1
 800261a:	653b      	str	r3, [r7, #80]	; 0x50
 800261c:	4613      	mov	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	461a      	mov	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	461c      	mov	r4, r3
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002638:	e036      	b.n	80026a8 <parse_midi+0x218>
		        } else {
		            // Skip unexpected length
		            pos += meta_len;
 800263a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800263e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002640:	4413      	add	r3, r2
 8002642:	657b      	str	r3, [r7, #84]	; 0x54
 8002644:	e030      	b.n	80026a8 <parse_midi+0x218>
		        }
		    } else {
		        // Unknown meta event — skip it
		        uint8_t meta_len = midi_data[pos++];
 8002646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	657a      	str	r2, [r7, #84]	; 0x54
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4413      	add	r3, r2
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		        pos += meta_len;
 8002656:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800265a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800265c:	4413      	add	r3, r2
 800265e:	657b      	str	r3, [r7, #84]	; 0x54
 8002660:	e022      	b.n	80026a8 <parse_midi+0x218>
		    }
		}
		else {
			if (status == 0xFF) {
 8002662:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002666:	2bff      	cmp	r3, #255	; 0xff
 8002668:	d115      	bne.n	8002696 <parse_midi+0x206>
				uint8_t meta_type = midi_data[pos++];
 800266a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	657a      	str	r2, [r7, #84]	; 0x54
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				uint8_t meta_len = midi_data[pos++];
 800267a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	657a      	str	r2, [r7, #84]	; 0x54
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				pos += meta_len;
 800268a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800268e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002690:	4413      	add	r3, r2
 8002692:	657b      	str	r3, [r7, #84]	; 0x54
 8002694:	e008      	b.n	80026a8 <parse_midi+0x218>
			}
			else if ((status & 0xF0) >= 0xB0) {
 8002696:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800269a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800269e:	2baf      	cmp	r3, #175	; 0xaf
 80026a0:	dd02      	ble.n	80026a8 <parse_midi+0x218>
				pos += 2;
 80026a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a4:	3302      	adds	r3, #2
 80026a6:	657b      	str	r3, [r7, #84]	; 0x54
	while (pos < data_size && event_count < max_events) {
 80026a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d204      	bcs.n	80026ba <parse_midi+0x22a>
 80026b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	f4ff aef9 	bcc.w	80024ac <parse_midi+0x1c>
			}
		}
	}
	sprintf(consoleOutput, "Спарсили MIDI файл с event_count = %u\n\r", event_count);
 80026ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026bc:	4907      	ldr	r1, [pc, #28]	; (80026dc <parse_midi+0x24c>)
 80026be:	4808      	ldr	r0, [pc, #32]	; (80026e0 <parse_midi+0x250>)
 80026c0:	f007 ffa0 	bl	800a604 <siprintf>
	send_uart(consoleOutput);
 80026c4:	4806      	ldr	r0, [pc, #24]	; (80026e0 <parse_midi+0x250>)
 80026c6:	f7ff f9df 	bl	8001a88 <send_uart>

	events_post_proccessing(events, event_count);
 80026ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f8e9 	bl	80028a4 <events_post_proccessing>

	return event_count;
 80026d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	375c      	adds	r7, #92	; 0x5c
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd90      	pop	{r4, r7, pc}
 80026dc:	0800c2c0 	.word	0x0800c2c0
 80026e0:	20015c44 	.word	0x20015c44

080026e4 <apply_note_timing_modifications>:
        events[i].delta_time = abs_time - last_time;
        last_time = abs_time;
    }
}

void apply_note_timing_modifications(MidiEvent* events, int count) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < count; ++i) {
 80026ee:	2300      	movs	r3, #0
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
 80026f2:	e0ae      	b.n	8002852 <apply_note_timing_modifications+0x16e>
        if (events[i].type == MIDI_NOTE_ON) {
 80026f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f6:	4613      	mov	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	461a      	mov	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4413      	add	r3, r2
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	2b90      	cmp	r3, #144	; 0x90
 8002708:	d13b      	bne.n	8002782 <apply_note_timing_modifications+0x9e>
            int note = events[i].data.note.note;
 800270a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	461a      	mov	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	7a5b      	ldrb	r3, [r3, #9]
 800271c:	617b      	str	r3, [r7, #20]
            int idx = note - BASE_NOTE;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	3b48      	subs	r3, #72	; 0x48
 8002722:	613b      	str	r3, [r7, #16]
            if (idx >= 0 && idx < NUM_NOTES) {
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f2c0 8090 	blt.w	800284c <apply_note_timing_modifications+0x168>
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	2b0f      	cmp	r3, #15
 8002730:	f300 808c 	bgt.w	800284c <apply_note_timing_modifications+0x168>
            	if(delays[idx].value_ms != 0){
 8002734:	4a4c      	ldr	r2, [pc, #304]	; (8002868 <apply_note_timing_modifications+0x184>)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	885b      	ldrh	r3, [r3, #2]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8084 	beq.w	800284c <apply_note_timing_modifications+0x168>
					uint32_t offset = count_ticks(delays[idx].value_ms);
 8002744:	4a48      	ldr	r2, [pc, #288]	; (8002868 <apply_note_timing_modifications+0x184>)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	885b      	ldrh	r3, [r3, #2]
 800274e:	4618      	mov	r0, r3
 8002750:	f000 f8e4 	bl	800291c <count_ticks>
 8002754:	4603      	mov	r3, r0
 8002756:	60fb      	str	r3, [r7, #12]
					events[i].delta_time += offset;
 8002758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275a:	4613      	mov	r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	461a      	mov	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4413      	add	r3, r2
 8002768:	6859      	ldr	r1, [r3, #4]
 800276a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	461a      	mov	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	440a      	add	r2, r1
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	e064      	b.n	800284c <apply_note_timing_modifications+0x168>
            	}
            }

        } else if (events[i].type == MIDI_NOTE_OFF) {
 8002782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	461a      	mov	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	2b80      	cmp	r3, #128	; 0x80
 8002796:	d131      	bne.n	80027fc <apply_note_timing_modifications+0x118>
            int note = events[i].data.note.note;
 8002798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	461a      	mov	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4413      	add	r3, r2
 80027a8:	7a5b      	ldrb	r3, [r3, #9]
 80027aa:	623b      	str	r3, [r7, #32]
            int idx = note - BASE_NOTE;
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	3b48      	subs	r3, #72	; 0x48
 80027b0:	61fb      	str	r3, [r7, #28]
            if (idx >= 0 && idx < NUM_NOTES) {
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	db49      	blt.n	800284c <apply_note_timing_modifications+0x168>
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	2b0f      	cmp	r3, #15
 80027bc:	dc46      	bgt.n	800284c <apply_note_timing_modifications+0x168>
				// Set NOTE OFF time to NOTE ON + delay + signal
				uint32_t signal_ticks = count_ticks(signals[idx].value_ms);
 80027be:	4a2b      	ldr	r2, [pc, #172]	; (800286c <apply_note_timing_modifications+0x188>)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	885b      	ldrh	r3, [r3, #2]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 f8a7 	bl	800291c <count_ticks>
 80027ce:	4603      	mov	r3, r0
 80027d0:	61bb      	str	r3, [r7, #24]
				events[i].delta_time = events[i-1].delta_time + signal_ticks; //
 80027d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	3b0c      	subs	r3, #12
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e6:	4613      	mov	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	461a      	mov	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4413      	add	r3, r2
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	440a      	add	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	e027      	b.n	800284c <apply_note_timing_modifications+0x168>
            }

        } else if (events[i].type == MIDI_SET_TEMPO) { //TODO кажется если ноты будут смещаться а событие SET TEMPO нет, то могут быть приколы.
 80027fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	461a      	mov	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4413      	add	r3, r2
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	f64f 7251 	movw	r2, #65361	; 0xff51
 8002812:	4293      	cmp	r3, r2
 8002814:	d11a      	bne.n	800284c <apply_note_timing_modifications+0x168>
        	sprintf(consoleOutput, "[~~~]MidiMetadata tempo changed to = %d\n\r", events[i].data.tempo);
 8002816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002818:	4613      	mov	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	461a      	mov	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	4911      	ldr	r1, [pc, #68]	; (8002870 <apply_note_timing_modifications+0x18c>)
 800282a:	4812      	ldr	r0, [pc, #72]	; (8002874 <apply_note_timing_modifications+0x190>)
 800282c:	f007 feea 	bl	800a604 <siprintf>
			send_uart(consoleOutput);
 8002830:	4810      	ldr	r0, [pc, #64]	; (8002874 <apply_note_timing_modifications+0x190>)
 8002832:	f7ff f929 	bl	8001a88 <send_uart>
            metadata.tempo = events[i].data.tempo.tempo;
 8002836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002838:	4613      	mov	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	461a      	mov	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <apply_note_timing_modifications+0x194>)
 800284a:	6093      	str	r3, [r2, #8]
    for (int i = 0; i < count; ++i) {
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	3301      	adds	r3, #1
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
 8002852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	f6ff af4c 	blt.w	80026f4 <apply_note_timing_modifications+0x10>
        }
    }
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	3728      	adds	r7, #40	; 0x28
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000004 	.word	0x20000004
 800286c:	20000044 	.word	0x20000044
 8002870:	0800c2f8 	.word	0x0800c2f8
 8002874:	20015c44 	.word	0x20015c44
 8002878:	20015cc4 	.word	0x20015cc4

0800287c <compare_events_by_time>:

int compare_events_by_time(const void* a, const void* b) {
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
    const MidiEvent* ea = (const MidiEvent*)a;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	60fb      	str	r3, [r7, #12]
    const MidiEvent* eb = (const MidiEvent*)b;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	60bb      	str	r3, [r7, #8]
    return (int32_t)(ea->delta_time - eb->delta_time);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	1ad3      	subs	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <events_post_proccessing>:

void events_post_proccessing(MidiEvent* events, uint32_t count) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
	sprintf(consoleOutput, "Начинаем обрабатывать MIDI события\n\r");
 80028ae:	4915      	ldr	r1, [pc, #84]	; (8002904 <events_post_proccessing+0x60>)
 80028b0:	4815      	ldr	r0, [pc, #84]	; (8002908 <events_post_proccessing+0x64>)
 80028b2:	f007 fea7 	bl	800a604 <siprintf>
	send_uart(consoleOutput);
 80028b6:	4814      	ldr	r0, [pc, #80]	; (8002908 <events_post_proccessing+0x64>)
 80028b8:	f7ff f8e6 	bl	8001a88 <send_uart>

//    convert_to_absolute_time(events, count);
//    sprintf(consoleOutput, "Привели события к абсолютному времени\n\r");
//	send_uart(consoleOutput);

    apply_note_timing_modifications(events, count);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4619      	mov	r1, r3
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff ff0f 	bl	80026e4 <apply_note_timing_modifications>
    sprintf(consoleOutput, "Применили задержки и длительности сигналов\n\r");
 80028c6:	4911      	ldr	r1, [pc, #68]	; (800290c <events_post_proccessing+0x68>)
 80028c8:	480f      	ldr	r0, [pc, #60]	; (8002908 <events_post_proccessing+0x64>)
 80028ca:	f007 fe9b 	bl	800a604 <siprintf>
	send_uart(consoleOutput);
 80028ce:	480e      	ldr	r0, [pc, #56]	; (8002908 <events_post_proccessing+0x64>)
 80028d0:	f7ff f8da 	bl	8001a88 <send_uart>

    qsort(events, count, sizeof(MidiEvent), compare_events_by_time);
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <events_post_proccessing+0x6c>)
 80028d6:	220c      	movs	r2, #12
 80028d8:	6839      	ldr	r1, [r7, #0]
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f007 fd32 	bl	800a344 <qsort>
    sprintf(consoleOutput, "Отсортировали события по абсолютному времени\n\r");
 80028e0:	490c      	ldr	r1, [pc, #48]	; (8002914 <events_post_proccessing+0x70>)
 80028e2:	4809      	ldr	r0, [pc, #36]	; (8002908 <events_post_proccessing+0x64>)
 80028e4:	f007 fe8e 	bl	800a604 <siprintf>
	send_uart(consoleOutput);
 80028e8:	4807      	ldr	r0, [pc, #28]	; (8002908 <events_post_proccessing+0x64>)
 80028ea:	f7ff f8cd 	bl	8001a88 <send_uart>

//    convert_to_relative_time(events, count);
//    sprintf(consoleOutput, "Привели события к обратно к относительному времени\n\r");
//	send_uart(consoleOutput);

    sprintf(consoleOutput, "Закончили обрабатывать MIDI события\n\r");
 80028ee:	490a      	ldr	r1, [pc, #40]	; (8002918 <events_post_proccessing+0x74>)
 80028f0:	4805      	ldr	r0, [pc, #20]	; (8002908 <events_post_proccessing+0x64>)
 80028f2:	f007 fe87 	bl	800a604 <siprintf>
	send_uart(consoleOutput);
 80028f6:	4804      	ldr	r0, [pc, #16]	; (8002908 <events_post_proccessing+0x64>)
 80028f8:	f7ff f8c6 	bl	8001a88 <send_uart>
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	0800c324 	.word	0x0800c324
 8002908:	20015c44 	.word	0x20015c44
 800290c:	0800c364 	.word	0x0800c364
 8002910:	0800287d 	.word	0x0800287d
 8002914:	0800c3b8 	.word	0x0800c3b8
 8002918:	0800c410 	.word	0x0800c410

0800291c <count_ticks>:
	int result = count_ticks_of_delay(delays[note].value_ms);

	return result;
}

int count_ticks(uint32_t target_delay){
 800291c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002920:	b088      	sub	sp, #32
 8002922:	af00      	add	r7, sp, #0
 8002924:	6178      	str	r0, [r7, #20]
  uint32_t ticks = ((uint64_t)target_delay *1000 * metadata.division) / metadata.tempo ; //PPQN = 600 TEMPO_MKS = 500000
 8002926:	6979      	ldr	r1, [r7, #20]
 8002928:	2000      	movs	r0, #0
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	4929      	ldr	r1, [pc, #164]	; (80029d4 <count_ticks+0xb8>)
 8002930:	8889      	ldrh	r1, [r1, #4]
 8002932:	b289      	uxth	r1, r1
 8002934:	2000      	movs	r0, #0
 8002936:	460a      	mov	r2, r1
 8002938:	4603      	mov	r3, r0
 800293a:	68f9      	ldr	r1, [r7, #12]
 800293c:	fb02 f001 	mul.w	r0, r2, r1
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	fb01 f103 	mul.w	r1, r1, r3
 8002946:	4401      	add	r1, r0
 8002948:	68b8      	ldr	r0, [r7, #8]
 800294a:	fba0 4502 	umull	r4, r5, r0, r2
 800294e:	194b      	adds	r3, r1, r5
 8002950:	461d      	mov	r5, r3
 8002952:	4622      	mov	r2, r4
 8002954:	462b      	mov	r3, r5
 8002956:	f04f 0000 	mov.w	r0, #0
 800295a:	f04f 0100 	mov.w	r1, #0
 800295e:	0159      	lsls	r1, r3, #5
 8002960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002964:	0150      	lsls	r0, r2, #5
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	ebb2 0804 	subs.w	r8, r2, r4
 800296e:	eb63 0905 	sbc.w	r9, r3, r5
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	f04f 0300 	mov.w	r3, #0
 800297a:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800297e:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8002982:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8002986:	4690      	mov	r8, r2
 8002988:	4699      	mov	r9, r3
 800298a:	eb18 0a04 	adds.w	sl, r8, r4
 800298e:	eb49 0b05 	adc.w	fp, r9, r5
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800299e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029a6:	4692      	mov	sl, r2
 80029a8:	469b      	mov	fp, r3
 80029aa:	4650      	mov	r0, sl
 80029ac:	4659      	mov	r1, fp
 80029ae:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <count_ticks+0xb8>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2200      	movs	r2, #0
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029bc:	f7fd fc70 	bl	80002a0 <__aeabi_uldivmod>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4613      	mov	r3, r2
 80029c6:	61fb      	str	r3, [r7, #28]
  return ticks; //(ms -> s)
 80029c8:	69fb      	ldr	r3, [r7, #28]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3720      	adds	r7, #32
 80029ce:	46bd      	mov	sp, r7
 80029d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029d4:	20015cc4 	.word	0x20015cc4

080029d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_MspInit+0x4c>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	4a0f      	ldr	r2, [pc, #60]	; (8002a24 <HAL_MspInit+0x4c>)
 80029e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ec:	6453      	str	r3, [r2, #68]	; 0x44
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <HAL_MspInit+0x4c>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	603b      	str	r3, [r7, #0]
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_MspInit+0x4c>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <HAL_MspInit+0x4c>)
 8002a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a08:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_MspInit+0x4c>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800

08002a28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08a      	sub	sp, #40	; 0x28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a19      	ldr	r2, [pc, #100]	; (8002aac <HAL_I2C_MspInit+0x84>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d12b      	bne.n	8002aa2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <HAL_I2C_MspInit+0x88>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <HAL_I2C_MspInit+0x88>)
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_I2C_MspInit+0x88>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a66:	23c0      	movs	r3, #192	; 0xc0
 8002a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a6a:	2312      	movs	r3, #18
 8002a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a72:	2303      	movs	r3, #3
 8002a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a76:	2304      	movs	r3, #4
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7a:	f107 0314 	add.w	r3, r7, #20
 8002a7e:	4619      	mov	r1, r3
 8002a80:	480c      	ldr	r0, [pc, #48]	; (8002ab4 <HAL_I2C_MspInit+0x8c>)
 8002a82:	f000 fc8d 	bl	80033a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_I2C_MspInit+0x88>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a08      	ldr	r2, [pc, #32]	; (8002ab0 <HAL_I2C_MspInit+0x88>)
 8002a90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
 8002a96:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <HAL_I2C_MspInit+0x88>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002aa2:	bf00      	nop
 8002aa4:	3728      	adds	r7, #40	; 0x28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40005400 	.word	0x40005400
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40020400 	.word	0x40020400

08002ab8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a19      	ldr	r2, [pc, #100]	; (8002b3c <HAL_SPI_MspInit+0x84>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d12c      	bne.n	8002b34 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <HAL_SPI_MspInit+0x88>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a17      	ldr	r2, [pc, #92]	; (8002b40 <HAL_SPI_MspInit+0x88>)
 8002ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <HAL_SPI_MspInit+0x88>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <HAL_SPI_MspInit+0x88>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a10      	ldr	r2, [pc, #64]	; (8002b40 <HAL_SPI_MspInit+0x88>)
 8002b00:	f043 0304 	orr.w	r3, r3, #4
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <HAL_SPI_MspInit+0x88>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002b12:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b20:	2303      	movs	r3, #3
 8002b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b24:	2306      	movs	r3, #6
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4805      	ldr	r0, [pc, #20]	; (8002b44 <HAL_SPI_MspInit+0x8c>)
 8002b30:	f000 fc36 	bl	80033a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002b34:	bf00      	nop
 8002b36:	3728      	adds	r7, #40	; 0x28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40003c00 	.word	0x40003c00
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40020800 	.word	0x40020800

08002b48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b58:	d116      	bne.n	8002b88 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <HAL_TIM_Base_MspInit+0x80>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	4a19      	ldr	r2, [pc, #100]	; (8002bc8 <HAL_TIM_Base_MspInit+0x80>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6a:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <HAL_TIM_Base_MspInit+0x80>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2100      	movs	r1, #0
 8002b7a:	201c      	movs	r0, #28
 8002b7c:	f000 fb47 	bl	800320e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b80:	201c      	movs	r0, #28
 8002b82:	f000 fb60 	bl	8003246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b86:	e01a      	b.n	8002bbe <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a0f      	ldr	r2, [pc, #60]	; (8002bcc <HAL_TIM_Base_MspInit+0x84>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d115      	bne.n	8002bbe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <HAL_TIM_Base_MspInit+0x80>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <HAL_TIM_Base_MspInit+0x80>)
 8002b9c:	f043 0302 	orr.w	r3, r3, #2
 8002ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_TIM_Base_MspInit+0x80>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	201d      	movs	r0, #29
 8002bb4:	f000 fb2b 	bl	800320e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bb8:	201d      	movs	r0, #29
 8002bba:	f000 fb44 	bl	8003246 <HAL_NVIC_EnableIRQ>
}
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40000400 	.word	0x40000400

08002bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08c      	sub	sp, #48	; 0x30
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 031c 	add.w	r3, r7, #28
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a36      	ldr	r2, [pc, #216]	; (8002cc8 <HAL_UART_MspInit+0xf8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d12c      	bne.n	8002c4c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	4b35      	ldr	r3, [pc, #212]	; (8002ccc <HAL_UART_MspInit+0xfc>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	4a34      	ldr	r2, [pc, #208]	; (8002ccc <HAL_UART_MspInit+0xfc>)
 8002bfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c00:	6413      	str	r3, [r2, #64]	; 0x40
 8002c02:	4b32      	ldr	r3, [pc, #200]	; (8002ccc <HAL_UART_MspInit+0xfc>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	4b2e      	ldr	r3, [pc, #184]	; (8002ccc <HAL_UART_MspInit+0xfc>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	4a2d      	ldr	r2, [pc, #180]	; (8002ccc <HAL_UART_MspInit+0xfc>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ccc <HAL_UART_MspInit+0xfc>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c36:	2303      	movs	r3, #3
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002c3a:	2308      	movs	r3, #8
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3e:	f107 031c 	add.w	r3, r7, #28
 8002c42:	4619      	mov	r1, r3
 8002c44:	4822      	ldr	r0, [pc, #136]	; (8002cd0 <HAL_UART_MspInit+0x100>)
 8002c46:	f000 fbab 	bl	80033a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c4a:	e039      	b.n	8002cc0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a20      	ldr	r2, [pc, #128]	; (8002cd4 <HAL_UART_MspInit+0x104>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d134      	bne.n	8002cc0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ccc <HAL_UART_MspInit+0xfc>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	4a1b      	ldr	r2, [pc, #108]	; (8002ccc <HAL_UART_MspInit+0xfc>)
 8002c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c64:	6413      	str	r3, [r2, #64]	; 0x40
 8002c66:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_UART_MspInit+0xfc>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <HAL_UART_MspInit+0xfc>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <HAL_UART_MspInit+0xfc>)
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_UART_MspInit+0xfc>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c94:	2302      	movs	r3, #2
 8002c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ca0:	2307      	movs	r3, #7
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca4:	f107 031c 	add.w	r3, r7, #28
 8002ca8:	4619      	mov	r1, r3
 8002caa:	480b      	ldr	r0, [pc, #44]	; (8002cd8 <HAL_UART_MspInit+0x108>)
 8002cac:	f000 fb78 	bl	80033a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	2027      	movs	r0, #39	; 0x27
 8002cb6:	f000 faaa 	bl	800320e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002cba:	2027      	movs	r0, #39	; 0x27
 8002cbc:	f000 fac3 	bl	8003246 <HAL_NVIC_EnableIRQ>
}
 8002cc0:	bf00      	nop
 8002cc2:	3730      	adds	r7, #48	; 0x30
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40004c00 	.word	0x40004c00
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40020000 	.word	0x40020000
 8002cd4:	40004800 	.word	0x40004800
 8002cd8:	40020400 	.word	0x40020400

08002cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ce0:	e7fe      	b.n	8002ce0 <NMI_Handler+0x4>

08002ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ce6:	e7fe      	b.n	8002ce6 <HardFault_Handler+0x4>

08002ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cec:	e7fe      	b.n	8002cec <MemManage_Handler+0x4>

08002cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cf2:	e7fe      	b.n	8002cf2 <BusFault_Handler+0x4>

08002cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf8:	e7fe      	b.n	8002cf8 <UsageFault_Handler+0x4>

08002cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d28:	f000 f952 	bl	8002fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d2c:	bf00      	nop
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d34:	4802      	ldr	r0, [pc, #8]	; (8002d40 <TIM2_IRQHandler+0x10>)
 8002d36:	f002 fc90 	bl	800565a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20014adc 	.word	0x20014adc

08002d44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d48:	4802      	ldr	r0, [pc, #8]	; (8002d54 <TIM3_IRQHandler+0x10>)
 8002d4a:	f002 fc86 	bl	800565a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20014b24 	.word	0x20014b24

08002d58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d5c:	4802      	ldr	r0, [pc, #8]	; (8002d68 <USART3_IRQHandler+0x10>)
 8002d5e:	f003 fa23 	bl	80061a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20014bb0 	.word	0x20014bb0

08002d6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	e00a      	b.n	8002d94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d7e:	f3af 8000 	nop.w
 8002d82:	4601      	mov	r1, r0
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	60ba      	str	r2, [r7, #8]
 8002d8a:	b2ca      	uxtb	r2, r1
 8002d8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	3301      	adds	r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	dbf0      	blt.n	8002d7e <_read+0x12>
  }

  return len;
 8002d9c:	687b      	ldr	r3, [r7, #4]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b086      	sub	sp, #24
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	e009      	b.n	8002dcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	60ba      	str	r2, [r7, #8]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	dbf1      	blt.n	8002db8 <_write+0x12>
  }
  return len;
 8002dd4:	687b      	ldr	r3, [r7, #4]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <_close>:

int _close(int file)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e06:	605a      	str	r2, [r3, #4]
  return 0;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <_isatty>:

int _isatty(int file)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e1e:	2301      	movs	r3, #1
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e50:	4a14      	ldr	r2, [pc, #80]	; (8002ea4 <_sbrk+0x5c>)
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <_sbrk+0x60>)
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e5c:	4b13      	ldr	r3, [pc, #76]	; (8002eac <_sbrk+0x64>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <_sbrk+0x64>)
 8002e66:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <_sbrk+0x68>)
 8002e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e6a:	4b10      	ldr	r3, [pc, #64]	; (8002eac <_sbrk+0x64>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d207      	bcs.n	8002e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e78:	f007 f886 	bl	8009f88 <__errno>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	220c      	movs	r2, #12
 8002e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e86:	e009      	b.n	8002e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <_sbrk+0x64>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e8e:	4b07      	ldr	r3, [pc, #28]	; (8002eac <_sbrk+0x64>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	4a05      	ldr	r2, [pc, #20]	; (8002eac <_sbrk+0x64>)
 8002e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20020000 	.word	0x20020000
 8002ea8:	00000400 	.word	0x00000400
 8002eac:	20017444 	.word	0x20017444
 8002eb0:	20017698 	.word	0x20017698

08002eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <SystemInit+0x20>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	4a05      	ldr	r2, [pc, #20]	; (8002ed4 <SystemInit+0x20>)
 8002ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002edc:	480d      	ldr	r0, [pc, #52]	; (8002f14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ede:	490e      	ldr	r1, [pc, #56]	; (8002f18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ee0:	4a0e      	ldr	r2, [pc, #56]	; (8002f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ee4:	e002      	b.n	8002eec <LoopCopyDataInit>

08002ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eea:	3304      	adds	r3, #4

08002eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef0:	d3f9      	bcc.n	8002ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ef2:	4a0b      	ldr	r2, [pc, #44]	; (8002f20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ef4:	4c0b      	ldr	r4, [pc, #44]	; (8002f24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ef8:	e001      	b.n	8002efe <LoopFillZerobss>

08002efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002efc:	3204      	adds	r2, #4

08002efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f00:	d3fb      	bcc.n	8002efa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f02:	f7ff ffd7 	bl	8002eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f06:	f007 f845 	bl	8009f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f0a:	f7fe fdff 	bl	8001b0c <main>
  bx  lr    
 8002f0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f18:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8002f1c:	0800cb7c 	.word	0x0800cb7c
  ldr r2, =_sbss
 8002f20:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8002f24:	20017698 	.word	0x20017698

08002f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f28:	e7fe      	b.n	8002f28 <ADC_IRQHandler>
	...

08002f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f30:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <HAL_Init+0x40>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0d      	ldr	r2, [pc, #52]	; (8002f6c <HAL_Init+0x40>)
 8002f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_Init+0x40>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <HAL_Init+0x40>)
 8002f42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f48:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <HAL_Init+0x40>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a07      	ldr	r2, [pc, #28]	; (8002f6c <HAL_Init+0x40>)
 8002f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f54:	2003      	movs	r0, #3
 8002f56:	f000 f94f 	bl	80031f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f5a:	200f      	movs	r0, #15
 8002f5c:	f000 f808 	bl	8002f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f60:	f7ff fd3a 	bl	80029d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40023c00 	.word	0x40023c00

08002f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f78:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <HAL_InitTick+0x54>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <HAL_InitTick+0x58>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	4619      	mov	r1, r3
 8002f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f967 	bl	8003262 <HAL_SYSTICK_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e00e      	b.n	8002fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b0f      	cmp	r3, #15
 8002fa2:	d80a      	bhi.n	8002fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fac:	f000 f92f 	bl	800320e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fb0:	4a06      	ldr	r2, [pc, #24]	; (8002fcc <HAL_InitTick+0x5c>)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	e000      	b.n	8002fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20000084 	.word	0x20000084
 8002fc8:	2000008c 	.word	0x2000008c
 8002fcc:	20000088 	.word	0x20000088

08002fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_IncTick+0x20>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_IncTick+0x24>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4413      	add	r3, r2
 8002fe0:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <HAL_IncTick+0x24>)
 8002fe2:	6013      	str	r3, [r2, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	2000008c 	.word	0x2000008c
 8002ff4:	20017448 	.word	0x20017448

08002ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8002ffc:	4b03      	ldr	r3, [pc, #12]	; (800300c <HAL_GetTick+0x14>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
}
 8003000:	4618      	mov	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20017448 	.word	0x20017448

08003010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003018:	f7ff ffee 	bl	8002ff8 <HAL_GetTick>
 800301c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003028:	d005      	beq.n	8003036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800302a:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <HAL_Delay+0x44>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4413      	add	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003036:	bf00      	nop
 8003038:	f7ff ffde 	bl	8002ff8 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	429a      	cmp	r2, r3
 8003046:	d8f7      	bhi.n	8003038 <HAL_Delay+0x28>
  {
  }
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	2000008c 	.word	0x2000008c

08003058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <__NVIC_SetPriorityGrouping+0x44>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003074:	4013      	ands	r3, r2
 8003076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800308a:	4a04      	ldr	r2, [pc, #16]	; (800309c <__NVIC_SetPriorityGrouping+0x44>)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	60d3      	str	r3, [r2, #12]
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a4:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <__NVIC_GetPriorityGrouping+0x18>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	0a1b      	lsrs	r3, r3, #8
 80030aa:	f003 0307 	and.w	r3, r3, #7
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	db0b      	blt.n	80030e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	f003 021f 	and.w	r2, r3, #31
 80030d4:	4907      	ldr	r1, [pc, #28]	; (80030f4 <__NVIC_EnableIRQ+0x38>)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	2001      	movs	r0, #1
 80030de:	fa00 f202 	lsl.w	r2, r0, r2
 80030e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	e000e100 	.word	0xe000e100

080030f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	6039      	str	r1, [r7, #0]
 8003102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003108:	2b00      	cmp	r3, #0
 800310a:	db0a      	blt.n	8003122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	b2da      	uxtb	r2, r3
 8003110:	490c      	ldr	r1, [pc, #48]	; (8003144 <__NVIC_SetPriority+0x4c>)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	0112      	lsls	r2, r2, #4
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	440b      	add	r3, r1
 800311c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003120:	e00a      	b.n	8003138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	4908      	ldr	r1, [pc, #32]	; (8003148 <__NVIC_SetPriority+0x50>)
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	3b04      	subs	r3, #4
 8003130:	0112      	lsls	r2, r2, #4
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	440b      	add	r3, r1
 8003136:	761a      	strb	r2, [r3, #24]
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000e100 	.word	0xe000e100
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800314c:	b480      	push	{r7}
 800314e:	b089      	sub	sp, #36	; 0x24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f1c3 0307 	rsb	r3, r3, #7
 8003166:	2b04      	cmp	r3, #4
 8003168:	bf28      	it	cs
 800316a:	2304      	movcs	r3, #4
 800316c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3304      	adds	r3, #4
 8003172:	2b06      	cmp	r3, #6
 8003174:	d902      	bls.n	800317c <NVIC_EncodePriority+0x30>
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3b03      	subs	r3, #3
 800317a:	e000      	b.n	800317e <NVIC_EncodePriority+0x32>
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003180:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	401a      	ands	r2, r3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003194:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	fa01 f303 	lsl.w	r3, r1, r3
 800319e:	43d9      	mvns	r1, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a4:	4313      	orrs	r3, r2
         );
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3724      	adds	r7, #36	; 0x24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3b01      	subs	r3, #1
 80031c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031c4:	d301      	bcc.n	80031ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031c6:	2301      	movs	r3, #1
 80031c8:	e00f      	b.n	80031ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ca:	4a0a      	ldr	r2, [pc, #40]	; (80031f4 <SysTick_Config+0x40>)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031d2:	210f      	movs	r1, #15
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031d8:	f7ff ff8e 	bl	80030f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <SysTick_Config+0x40>)
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031e2:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <SysTick_Config+0x40>)
 80031e4:	2207      	movs	r2, #7
 80031e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	e000e010 	.word	0xe000e010

080031f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff ff29 	bl	8003058 <__NVIC_SetPriorityGrouping>
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800320e:	b580      	push	{r7, lr}
 8003210:	b086      	sub	sp, #24
 8003212:	af00      	add	r7, sp, #0
 8003214:	4603      	mov	r3, r0
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003220:	f7ff ff3e 	bl	80030a0 <__NVIC_GetPriorityGrouping>
 8003224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	6978      	ldr	r0, [r7, #20]
 800322c:	f7ff ff8e 	bl	800314c <NVIC_EncodePriority>
 8003230:	4602      	mov	r2, r0
 8003232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff5d 	bl	80030f8 <__NVIC_SetPriority>
}
 800323e:	bf00      	nop
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	4603      	mov	r3, r0
 800324e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ff31 	bl	80030bc <__NVIC_EnableIRQ>
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff ffa2 	bl	80031b4 <SysTick_Config>
 8003270:	4603      	mov	r3, r0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003286:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003288:	f7ff feb6 	bl	8002ff8 <HAL_GetTick>
 800328c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d008      	beq.n	80032ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2280      	movs	r2, #128	; 0x80
 800329e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e052      	b.n	8003352 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0216 	bic.w	r2, r2, #22
 80032ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d103      	bne.n	80032dc <HAL_DMA_Abort+0x62>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0208 	bic.w	r2, r2, #8
 80032ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032fc:	e013      	b.n	8003326 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032fe:	f7ff fe7b 	bl	8002ff8 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b05      	cmp	r3, #5
 800330a:	d90c      	bls.n	8003326 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2203      	movs	r2, #3
 8003316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e015      	b.n	8003352 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1e4      	bne.n	80032fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	223f      	movs	r2, #63	; 0x3f
 800333a:	409a      	lsls	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d004      	beq.n	8003378 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2280      	movs	r2, #128	; 0x80
 8003372:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e00c      	b.n	8003392 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2205      	movs	r2, #5
 800337c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0201 	bic.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b089      	sub	sp, #36	; 0x24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
 80033ba:	e16b      	b.n	8003694 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033bc:	2201      	movs	r2, #1
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	f040 815a 	bne.w	800368e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d005      	beq.n	80033f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d130      	bne.n	8003454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	2203      	movs	r2, #3
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003428:	2201      	movs	r2, #1
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f003 0201 	and.w	r2, r3, #1
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	2b03      	cmp	r3, #3
 800345e:	d017      	beq.n	8003490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	2203      	movs	r2, #3
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4313      	orrs	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d123      	bne.n	80034e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	08da      	lsrs	r2, r3, #3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3208      	adds	r2, #8
 80034a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	220f      	movs	r2, #15
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	08da      	lsrs	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3208      	adds	r2, #8
 80034de:	69b9      	ldr	r1, [r7, #24]
 80034e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	2203      	movs	r2, #3
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 0203 	and.w	r2, r3, #3
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 80b4 	beq.w	800368e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	4b60      	ldr	r3, [pc, #384]	; (80036ac <HAL_GPIO_Init+0x30c>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	4a5f      	ldr	r2, [pc, #380]	; (80036ac <HAL_GPIO_Init+0x30c>)
 8003530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003534:	6453      	str	r3, [r2, #68]	; 0x44
 8003536:	4b5d      	ldr	r3, [pc, #372]	; (80036ac <HAL_GPIO_Init+0x30c>)
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003542:	4a5b      	ldr	r2, [pc, #364]	; (80036b0 <HAL_GPIO_Init+0x310>)
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	089b      	lsrs	r3, r3, #2
 8003548:	3302      	adds	r3, #2
 800354a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	220f      	movs	r2, #15
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43db      	mvns	r3, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4013      	ands	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a52      	ldr	r2, [pc, #328]	; (80036b4 <HAL_GPIO_Init+0x314>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d02b      	beq.n	80035c6 <HAL_GPIO_Init+0x226>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a51      	ldr	r2, [pc, #324]	; (80036b8 <HAL_GPIO_Init+0x318>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d025      	beq.n	80035c2 <HAL_GPIO_Init+0x222>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a50      	ldr	r2, [pc, #320]	; (80036bc <HAL_GPIO_Init+0x31c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01f      	beq.n	80035be <HAL_GPIO_Init+0x21e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4f      	ldr	r2, [pc, #316]	; (80036c0 <HAL_GPIO_Init+0x320>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d019      	beq.n	80035ba <HAL_GPIO_Init+0x21a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a4e      	ldr	r2, [pc, #312]	; (80036c4 <HAL_GPIO_Init+0x324>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d013      	beq.n	80035b6 <HAL_GPIO_Init+0x216>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a4d      	ldr	r2, [pc, #308]	; (80036c8 <HAL_GPIO_Init+0x328>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00d      	beq.n	80035b2 <HAL_GPIO_Init+0x212>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a4c      	ldr	r2, [pc, #304]	; (80036cc <HAL_GPIO_Init+0x32c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d007      	beq.n	80035ae <HAL_GPIO_Init+0x20e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4b      	ldr	r2, [pc, #300]	; (80036d0 <HAL_GPIO_Init+0x330>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d101      	bne.n	80035aa <HAL_GPIO_Init+0x20a>
 80035a6:	2307      	movs	r3, #7
 80035a8:	e00e      	b.n	80035c8 <HAL_GPIO_Init+0x228>
 80035aa:	2308      	movs	r3, #8
 80035ac:	e00c      	b.n	80035c8 <HAL_GPIO_Init+0x228>
 80035ae:	2306      	movs	r3, #6
 80035b0:	e00a      	b.n	80035c8 <HAL_GPIO_Init+0x228>
 80035b2:	2305      	movs	r3, #5
 80035b4:	e008      	b.n	80035c8 <HAL_GPIO_Init+0x228>
 80035b6:	2304      	movs	r3, #4
 80035b8:	e006      	b.n	80035c8 <HAL_GPIO_Init+0x228>
 80035ba:	2303      	movs	r3, #3
 80035bc:	e004      	b.n	80035c8 <HAL_GPIO_Init+0x228>
 80035be:	2302      	movs	r3, #2
 80035c0:	e002      	b.n	80035c8 <HAL_GPIO_Init+0x228>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <HAL_GPIO_Init+0x228>
 80035c6:	2300      	movs	r3, #0
 80035c8:	69fa      	ldr	r2, [r7, #28]
 80035ca:	f002 0203 	and.w	r2, r2, #3
 80035ce:	0092      	lsls	r2, r2, #2
 80035d0:	4093      	lsls	r3, r2
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035d8:	4935      	ldr	r1, [pc, #212]	; (80036b0 <HAL_GPIO_Init+0x310>)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	089b      	lsrs	r3, r3, #2
 80035de:	3302      	adds	r3, #2
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035e6:	4b3b      	ldr	r3, [pc, #236]	; (80036d4 <HAL_GPIO_Init+0x334>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800360a:	4a32      	ldr	r2, [pc, #200]	; (80036d4 <HAL_GPIO_Init+0x334>)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003610:	4b30      	ldr	r3, [pc, #192]	; (80036d4 <HAL_GPIO_Init+0x334>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003634:	4a27      	ldr	r2, [pc, #156]	; (80036d4 <HAL_GPIO_Init+0x334>)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800363a:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <HAL_GPIO_Init+0x334>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800365e:	4a1d      	ldr	r2, [pc, #116]	; (80036d4 <HAL_GPIO_Init+0x334>)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003664:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HAL_GPIO_Init+0x334>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003688:	4a12      	ldr	r2, [pc, #72]	; (80036d4 <HAL_GPIO_Init+0x334>)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3301      	adds	r3, #1
 8003692:	61fb      	str	r3, [r7, #28]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	2b0f      	cmp	r3, #15
 8003698:	f67f ae90 	bls.w	80033bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800369c:	bf00      	nop
 800369e:	bf00      	nop
 80036a0:	3724      	adds	r7, #36	; 0x24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40023800 	.word	0x40023800
 80036b0:	40013800 	.word	0x40013800
 80036b4:	40020000 	.word	0x40020000
 80036b8:	40020400 	.word	0x40020400
 80036bc:	40020800 	.word	0x40020800
 80036c0:	40020c00 	.word	0x40020c00
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40021400 	.word	0x40021400
 80036cc:	40021800 	.word	0x40021800
 80036d0:	40021c00 	.word	0x40021c00
 80036d4:	40013c00 	.word	0x40013c00

080036d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	807b      	strh	r3, [r7, #2]
 80036e4:	4613      	mov	r3, r2
 80036e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036e8:	787b      	ldrb	r3, [r7, #1]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ee:	887a      	ldrh	r2, [r7, #2]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036f4:	e003      	b.n	80036fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036f6:	887b      	ldrh	r3, [r7, #2]
 80036f8:	041a      	lsls	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	619a      	str	r2, [r3, #24]
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e12b      	b.n	8003976 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff f978 	bl	8002a28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2224      	movs	r2, #36	; 0x24
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0201 	bic.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800375e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800376e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003770:	f001 fa2a 	bl	8004bc8 <HAL_RCC_GetPCLK1Freq>
 8003774:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4a81      	ldr	r2, [pc, #516]	; (8003980 <HAL_I2C_Init+0x274>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d807      	bhi.n	8003790 <HAL_I2C_Init+0x84>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4a80      	ldr	r2, [pc, #512]	; (8003984 <HAL_I2C_Init+0x278>)
 8003784:	4293      	cmp	r3, r2
 8003786:	bf94      	ite	ls
 8003788:	2301      	movls	r3, #1
 800378a:	2300      	movhi	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	e006      	b.n	800379e <HAL_I2C_Init+0x92>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4a7d      	ldr	r2, [pc, #500]	; (8003988 <HAL_I2C_Init+0x27c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	bf94      	ite	ls
 8003798:	2301      	movls	r3, #1
 800379a:	2300      	movhi	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e0e7      	b.n	8003976 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4a78      	ldr	r2, [pc, #480]	; (800398c <HAL_I2C_Init+0x280>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	0c9b      	lsrs	r3, r3, #18
 80037b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a6a      	ldr	r2, [pc, #424]	; (8003980 <HAL_I2C_Init+0x274>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d802      	bhi.n	80037e0 <HAL_I2C_Init+0xd4>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	3301      	adds	r3, #1
 80037de:	e009      	b.n	80037f4 <HAL_I2C_Init+0xe8>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037e6:	fb02 f303 	mul.w	r3, r2, r3
 80037ea:	4a69      	ldr	r2, [pc, #420]	; (8003990 <HAL_I2C_Init+0x284>)
 80037ec:	fba2 2303 	umull	r2, r3, r2, r3
 80037f0:	099b      	lsrs	r3, r3, #6
 80037f2:	3301      	adds	r3, #1
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003806:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	495c      	ldr	r1, [pc, #368]	; (8003980 <HAL_I2C_Init+0x274>)
 8003810:	428b      	cmp	r3, r1
 8003812:	d819      	bhi.n	8003848 <HAL_I2C_Init+0x13c>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	1e59      	subs	r1, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003822:	1c59      	adds	r1, r3, #1
 8003824:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003828:	400b      	ands	r3, r1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <HAL_I2C_Init+0x138>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	1e59      	subs	r1, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fbb1 f3f3 	udiv	r3, r1, r3
 800383c:	3301      	adds	r3, #1
 800383e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003842:	e051      	b.n	80038e8 <HAL_I2C_Init+0x1dc>
 8003844:	2304      	movs	r3, #4
 8003846:	e04f      	b.n	80038e8 <HAL_I2C_Init+0x1dc>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d111      	bne.n	8003874 <HAL_I2C_Init+0x168>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1e58      	subs	r0, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	440b      	add	r3, r1
 800385e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003862:	3301      	adds	r3, #1
 8003864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003868:	2b00      	cmp	r3, #0
 800386a:	bf0c      	ite	eq
 800386c:	2301      	moveq	r3, #1
 800386e:	2300      	movne	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	e012      	b.n	800389a <HAL_I2C_Init+0x18e>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1e58      	subs	r0, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6859      	ldr	r1, [r3, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	0099      	lsls	r1, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	fbb0 f3f3 	udiv	r3, r0, r3
 800388a:	3301      	adds	r3, #1
 800388c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_I2C_Init+0x196>
 800389e:	2301      	movs	r3, #1
 80038a0:	e022      	b.n	80038e8 <HAL_I2C_Init+0x1dc>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10e      	bne.n	80038c8 <HAL_I2C_Init+0x1bc>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1e58      	subs	r0, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6859      	ldr	r1, [r3, #4]
 80038b2:	460b      	mov	r3, r1
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	440b      	add	r3, r1
 80038b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038bc:	3301      	adds	r3, #1
 80038be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038c6:	e00f      	b.n	80038e8 <HAL_I2C_Init+0x1dc>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1e58      	subs	r0, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6859      	ldr	r1, [r3, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	0099      	lsls	r1, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	fbb0 f3f3 	udiv	r3, r0, r3
 80038de:	3301      	adds	r3, #1
 80038e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	6809      	ldr	r1, [r1, #0]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003916:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6911      	ldr	r1, [r2, #16]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68d2      	ldr	r2, [r2, #12]
 8003922:	4311      	orrs	r1, r2
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	430b      	orrs	r3, r1
 800392a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695a      	ldr	r2, [r3, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	000186a0 	.word	0x000186a0
 8003984:	001e847f 	.word	0x001e847f
 8003988:	003d08ff 	.word	0x003d08ff
 800398c:	431bde83 	.word	0x431bde83
 8003990:	10624dd3 	.word	0x10624dd3

08003994 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08c      	sub	sp, #48	; 0x30
 8003998:	af02      	add	r7, sp, #8
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	4608      	mov	r0, r1
 800399e:	4611      	mov	r1, r2
 80039a0:	461a      	mov	r2, r3
 80039a2:	4603      	mov	r3, r0
 80039a4:	817b      	strh	r3, [r7, #10]
 80039a6:	460b      	mov	r3, r1
 80039a8:	813b      	strh	r3, [r7, #8]
 80039aa:	4613      	mov	r3, r2
 80039ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039ae:	f7ff fb23 	bl	8002ff8 <HAL_GetTick>
 80039b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b20      	cmp	r3, #32
 80039be:	f040 8208 	bne.w	8003dd2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	2319      	movs	r3, #25
 80039c8:	2201      	movs	r2, #1
 80039ca:	497b      	ldr	r1, [pc, #492]	; (8003bb8 <HAL_I2C_Mem_Read+0x224>)
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 faef 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
 80039da:	e1fb      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_I2C_Mem_Read+0x56>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e1f4      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d007      	beq.n	8003a10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2222      	movs	r2, #34	; 0x22
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2240      	movs	r2, #64	; 0x40
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a5b      	ldr	r2, [pc, #364]	; (8003bbc <HAL_I2C_Mem_Read+0x228>)
 8003a50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a52:	88f8      	ldrh	r0, [r7, #6]
 8003a54:	893a      	ldrh	r2, [r7, #8]
 8003a56:	8979      	ldrh	r1, [r7, #10]
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	4603      	mov	r3, r0
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f9bc 	bl	8003de0 <I2C_RequestMemoryRead>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e1b0      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d113      	bne.n	8003aa2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	623b      	str	r3, [r7, #32]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	623b      	str	r3, [r7, #32]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	623b      	str	r3, [r7, #32]
 8003a8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	e184      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d11b      	bne.n	8003ae2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	e164      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d11b      	bne.n	8003b22 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	e144      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b38:	e138      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	f200 80f1 	bhi.w	8003d26 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d123      	bne.n	8003b94 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 fb44 	bl	80041de <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e139      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b92:	e10b      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d14e      	bne.n	8003c3a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	4906      	ldr	r1, [pc, #24]	; (8003bc0 <HAL_I2C_Mem_Read+0x22c>)
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fa02 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d008      	beq.n	8003bc4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e10e      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
 8003bb6:	bf00      	nop
 8003bb8:	00100002 	.word	0x00100002
 8003bbc:	ffff0000 	.word	0xffff0000
 8003bc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691a      	ldr	r2, [r3, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c38:	e0b8      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	2200      	movs	r2, #0
 8003c42:	4966      	ldr	r1, [pc, #408]	; (8003ddc <HAL_I2C_Mem_Read+0x448>)
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f9b3 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0bf      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	494f      	ldr	r1, [pc, #316]	; (8003ddc <HAL_I2C_Mem_Read+0x448>)
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f985 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e091      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d24:	e042      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fa57 	bl	80041de <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e04c      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d118      	bne.n	8003dac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f47f aec2 	bne.w	8003b3a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e000      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
  }
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3728      	adds	r7, #40	; 0x28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	00010004 	.word	0x00010004

08003de0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	4608      	mov	r0, r1
 8003dea:	4611      	mov	r1, r2
 8003dec:	461a      	mov	r2, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	817b      	strh	r3, [r7, #10]
 8003df2:	460b      	mov	r3, r1
 8003df4:	813b      	strh	r3, [r7, #8]
 8003df6:	4613      	mov	r3, r2
 8003df8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f8c2 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00d      	beq.n	8003e4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e40:	d103      	bne.n	8003e4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e0aa      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e4e:	897b      	ldrh	r3, [r7, #10]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	6a3a      	ldr	r2, [r7, #32]
 8003e62:	4952      	ldr	r1, [pc, #328]	; (8003fac <I2C_RequestMemoryRead+0x1cc>)
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f8fa 	bl	800405e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e097      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8c:	6a39      	ldr	r1, [r7, #32]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f964 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d107      	bne.n	8003eb2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e076      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d105      	bne.n	8003ec8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ebc:	893b      	ldrh	r3, [r7, #8]
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]
 8003ec6:	e021      	b.n	8003f0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ec8:	893b      	ldrh	r3, [r7, #8]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed8:	6a39      	ldr	r1, [r7, #32]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f93e 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d107      	bne.n	8003efe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e050      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f02:	893b      	ldrh	r3, [r7, #8]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0e:	6a39      	ldr	r1, [r7, #32]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f923 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d107      	bne.n	8003f34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e035      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f82b 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00d      	beq.n	8003f7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6e:	d103      	bne.n	8003f78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e013      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f7c:	897b      	ldrh	r3, [r7, #10]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	6a3a      	ldr	r2, [r7, #32]
 8003f90:	4906      	ldr	r1, [pc, #24]	; (8003fac <I2C_RequestMemoryRead+0x1cc>)
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f863 	bl	800405e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	00010002 	.word	0x00010002

08003fb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fc0:	e025      	b.n	800400e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fc8:	d021      	beq.n	800400e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fca:	f7ff f815 	bl	8002ff8 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d302      	bcc.n	8003fe0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d116      	bne.n	800400e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f043 0220 	orr.w	r2, r3, #32
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e023      	b.n	8004056 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	0c1b      	lsrs	r3, r3, #16
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d10d      	bne.n	8004034 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	43da      	mvns	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4013      	ands	r3, r2
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	bf0c      	ite	eq
 800402a:	2301      	moveq	r3, #1
 800402c:	2300      	movne	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	e00c      	b.n	800404e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	43da      	mvns	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	4013      	ands	r3, r2
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	bf0c      	ite	eq
 8004046:	2301      	moveq	r3, #1
 8004048:	2300      	movne	r3, #0
 800404a:	b2db      	uxtb	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	429a      	cmp	r2, r3
 8004052:	d0b6      	beq.n	8003fc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800406c:	e051      	b.n	8004112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800407c:	d123      	bne.n	80040c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004096:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f043 0204 	orr.w	r2, r3, #4
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e046      	b.n	8004154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040cc:	d021      	beq.n	8004112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ce:	f7fe ff93 	bl	8002ff8 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d116      	bne.n	8004112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f043 0220 	orr.w	r2, r3, #32
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e020      	b.n	8004154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	0c1b      	lsrs	r3, r3, #16
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d10c      	bne.n	8004136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	43da      	mvns	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4013      	ands	r3, r2
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	bf14      	ite	ne
 800412e:	2301      	movne	r3, #1
 8004130:	2300      	moveq	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	e00b      	b.n	800414e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	43da      	mvns	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4013      	ands	r3, r2
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d18d      	bne.n	800406e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004168:	e02d      	b.n	80041c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f88d 	bl	800428a <I2C_IsAcknowledgeFailed>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e02d      	b.n	80041d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004180:	d021      	beq.n	80041c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004182:	f7fe ff39 	bl	8002ff8 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	429a      	cmp	r2, r3
 8004190:	d302      	bcc.n	8004198 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d116      	bne.n	80041c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f043 0220 	orr.w	r2, r3, #32
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e007      	b.n	80041d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d0:	2b80      	cmp	r3, #128	; 0x80
 80041d2:	d1ca      	bne.n	800416a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041ea:	e042      	b.n	8004272 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	2b10      	cmp	r3, #16
 80041f8:	d119      	bne.n	800422e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f06f 0210 	mvn.w	r2, #16
 8004202:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e029      	b.n	8004282 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422e:	f7fe fee3 	bl	8002ff8 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	429a      	cmp	r2, r3
 800423c:	d302      	bcc.n	8004244 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d116      	bne.n	8004272 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f043 0220 	orr.w	r2, r3, #32
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e007      	b.n	8004282 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d1b5      	bne.n	80041ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800429c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a0:	d11b      	bne.n	80042da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	f043 0204 	orr.w	r2, r3, #4
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e267      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d075      	beq.n	80043f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004306:	4b88      	ldr	r3, [pc, #544]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	2b04      	cmp	r3, #4
 8004310:	d00c      	beq.n	800432c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004312:	4b85      	ldr	r3, [pc, #532]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800431a:	2b08      	cmp	r3, #8
 800431c:	d112      	bne.n	8004344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800431e:	4b82      	ldr	r3, [pc, #520]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800432a:	d10b      	bne.n	8004344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432c:	4b7e      	ldr	r3, [pc, #504]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d05b      	beq.n	80043f0 <HAL_RCC_OscConfig+0x108>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d157      	bne.n	80043f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e242      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800434c:	d106      	bne.n	800435c <HAL_RCC_OscConfig+0x74>
 800434e:	4b76      	ldr	r3, [pc, #472]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a75      	ldr	r2, [pc, #468]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e01d      	b.n	8004398 <HAL_RCC_OscConfig+0xb0>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004364:	d10c      	bne.n	8004380 <HAL_RCC_OscConfig+0x98>
 8004366:	4b70      	ldr	r3, [pc, #448]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a6f      	ldr	r2, [pc, #444]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 800436c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	4b6d      	ldr	r3, [pc, #436]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a6c      	ldr	r2, [pc, #432]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 8004378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	e00b      	b.n	8004398 <HAL_RCC_OscConfig+0xb0>
 8004380:	4b69      	ldr	r3, [pc, #420]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a68      	ldr	r2, [pc, #416]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 8004386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	4b66      	ldr	r3, [pc, #408]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a65      	ldr	r2, [pc, #404]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 8004392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d013      	beq.n	80043c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fe fe2a 	bl	8002ff8 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fe fe26 	bl	8002ff8 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	; 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e207      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ba:	4b5b      	ldr	r3, [pc, #364]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0xc0>
 80043c6:	e014      	b.n	80043f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c8:	f7fe fe16 	bl	8002ff8 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043d0:	f7fe fe12 	bl	8002ff8 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b64      	cmp	r3, #100	; 0x64
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e1f3      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e2:	4b51      	ldr	r3, [pc, #324]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0xe8>
 80043ee:	e000      	b.n	80043f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d063      	beq.n	80044c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043fe:	4b4a      	ldr	r3, [pc, #296]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 030c 	and.w	r3, r3, #12
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00b      	beq.n	8004422 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800440a:	4b47      	ldr	r3, [pc, #284]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004412:	2b08      	cmp	r3, #8
 8004414:	d11c      	bne.n	8004450 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004416:	4b44      	ldr	r3, [pc, #272]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d116      	bne.n	8004450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004422:	4b41      	ldr	r3, [pc, #260]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <HAL_RCC_OscConfig+0x152>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d001      	beq.n	800443a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e1c7      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800443a:	4b3b      	ldr	r3, [pc, #236]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4937      	ldr	r1, [pc, #220]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 800444a:	4313      	orrs	r3, r2
 800444c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444e:	e03a      	b.n	80044c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d020      	beq.n	800449a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004458:	4b34      	ldr	r3, [pc, #208]	; (800452c <HAL_RCC_OscConfig+0x244>)
 800445a:	2201      	movs	r2, #1
 800445c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445e:	f7fe fdcb 	bl	8002ff8 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004466:	f7fe fdc7 	bl	8002ff8 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e1a8      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004478:	4b2b      	ldr	r3, [pc, #172]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004484:	4b28      	ldr	r3, [pc, #160]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	4925      	ldr	r1, [pc, #148]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 8004494:	4313      	orrs	r3, r2
 8004496:	600b      	str	r3, [r1, #0]
 8004498:	e015      	b.n	80044c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800449a:	4b24      	ldr	r3, [pc, #144]	; (800452c <HAL_RCC_OscConfig+0x244>)
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7fe fdaa 	bl	8002ff8 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044a8:	f7fe fda6 	bl	8002ff8 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e187      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ba:	4b1b      	ldr	r3, [pc, #108]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f0      	bne.n	80044a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d036      	beq.n	8004540 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d016      	beq.n	8004508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044da:	4b15      	ldr	r3, [pc, #84]	; (8004530 <HAL_RCC_OscConfig+0x248>)
 80044dc:	2201      	movs	r2, #1
 80044de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e0:	f7fe fd8a 	bl	8002ff8 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044e8:	f7fe fd86 	bl	8002ff8 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e167      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044fa:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <HAL_RCC_OscConfig+0x240>)
 80044fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f0      	beq.n	80044e8 <HAL_RCC_OscConfig+0x200>
 8004506:	e01b      	b.n	8004540 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004508:	4b09      	ldr	r3, [pc, #36]	; (8004530 <HAL_RCC_OscConfig+0x248>)
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450e:	f7fe fd73 	bl	8002ff8 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004514:	e00e      	b.n	8004534 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004516:	f7fe fd6f 	bl	8002ff8 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d907      	bls.n	8004534 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e150      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
 8004528:	40023800 	.word	0x40023800
 800452c:	42470000 	.word	0x42470000
 8004530:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004534:	4b88      	ldr	r3, [pc, #544]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 8004536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1ea      	bne.n	8004516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 8097 	beq.w	800467c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800454e:	2300      	movs	r3, #0
 8004550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004552:	4b81      	ldr	r3, [pc, #516]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10f      	bne.n	800457e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	4b7d      	ldr	r3, [pc, #500]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	4a7c      	ldr	r2, [pc, #496]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 8004568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800456c:	6413      	str	r3, [r2, #64]	; 0x40
 800456e:	4b7a      	ldr	r3, [pc, #488]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004576:	60bb      	str	r3, [r7, #8]
 8004578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800457a:	2301      	movs	r3, #1
 800457c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457e:	4b77      	ldr	r3, [pc, #476]	; (800475c <HAL_RCC_OscConfig+0x474>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d118      	bne.n	80045bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800458a:	4b74      	ldr	r3, [pc, #464]	; (800475c <HAL_RCC_OscConfig+0x474>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a73      	ldr	r2, [pc, #460]	; (800475c <HAL_RCC_OscConfig+0x474>)
 8004590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004596:	f7fe fd2f 	bl	8002ff8 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459e:	f7fe fd2b 	bl	8002ff8 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e10c      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b0:	4b6a      	ldr	r3, [pc, #424]	; (800475c <HAL_RCC_OscConfig+0x474>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0f0      	beq.n	800459e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d106      	bne.n	80045d2 <HAL_RCC_OscConfig+0x2ea>
 80045c4:	4b64      	ldr	r3, [pc, #400]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 80045c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c8:	4a63      	ldr	r2, [pc, #396]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	6713      	str	r3, [r2, #112]	; 0x70
 80045d0:	e01c      	b.n	800460c <HAL_RCC_OscConfig+0x324>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b05      	cmp	r3, #5
 80045d8:	d10c      	bne.n	80045f4 <HAL_RCC_OscConfig+0x30c>
 80045da:	4b5f      	ldr	r3, [pc, #380]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 80045dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045de:	4a5e      	ldr	r2, [pc, #376]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 80045e0:	f043 0304 	orr.w	r3, r3, #4
 80045e4:	6713      	str	r3, [r2, #112]	; 0x70
 80045e6:	4b5c      	ldr	r3, [pc, #368]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ea:	4a5b      	ldr	r2, [pc, #364]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	6713      	str	r3, [r2, #112]	; 0x70
 80045f2:	e00b      	b.n	800460c <HAL_RCC_OscConfig+0x324>
 80045f4:	4b58      	ldr	r3, [pc, #352]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 80045f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f8:	4a57      	ldr	r2, [pc, #348]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 80045fa:	f023 0301 	bic.w	r3, r3, #1
 80045fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004600:	4b55      	ldr	r3, [pc, #340]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	4a54      	ldr	r2, [pc, #336]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 8004606:	f023 0304 	bic.w	r3, r3, #4
 800460a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d015      	beq.n	8004640 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fe fcf0 	bl	8002ff8 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800461a:	e00a      	b.n	8004632 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800461c:	f7fe fcec 	bl	8002ff8 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	; 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e0cb      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004632:	4b49      	ldr	r3, [pc, #292]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0ee      	beq.n	800461c <HAL_RCC_OscConfig+0x334>
 800463e:	e014      	b.n	800466a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004640:	f7fe fcda 	bl	8002ff8 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004646:	e00a      	b.n	800465e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004648:	f7fe fcd6 	bl	8002ff8 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	; 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e0b5      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800465e:	4b3e      	ldr	r3, [pc, #248]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1ee      	bne.n	8004648 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800466a:	7dfb      	ldrb	r3, [r7, #23]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d105      	bne.n	800467c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004670:	4b39      	ldr	r3, [pc, #228]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	4a38      	ldr	r2, [pc, #224]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 8004676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800467a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80a1 	beq.w	80047c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004686:	4b34      	ldr	r3, [pc, #208]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
 800468e:	2b08      	cmp	r3, #8
 8004690:	d05c      	beq.n	800474c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d141      	bne.n	800471e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469a:	4b31      	ldr	r3, [pc, #196]	; (8004760 <HAL_RCC_OscConfig+0x478>)
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a0:	f7fe fcaa 	bl	8002ff8 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a8:	f7fe fca6 	bl	8002ff8 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e087      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ba:	4b27      	ldr	r3, [pc, #156]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69da      	ldr	r2, [r3, #28]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	019b      	lsls	r3, r3, #6
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	085b      	lsrs	r3, r3, #1
 80046de:	3b01      	subs	r3, #1
 80046e0:	041b      	lsls	r3, r3, #16
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	061b      	lsls	r3, r3, #24
 80046ea:	491b      	ldr	r1, [pc, #108]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046f0:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <HAL_RCC_OscConfig+0x478>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f6:	f7fe fc7f 	bl	8002ff8 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046fe:	f7fe fc7b 	bl	8002ff8 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e05c      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004710:	4b11      	ldr	r3, [pc, #68]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f0      	beq.n	80046fe <HAL_RCC_OscConfig+0x416>
 800471c:	e054      	b.n	80047c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471e:	4b10      	ldr	r3, [pc, #64]	; (8004760 <HAL_RCC_OscConfig+0x478>)
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004724:	f7fe fc68 	bl	8002ff8 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800472c:	f7fe fc64 	bl	8002ff8 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e045      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473e:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_RCC_OscConfig+0x470>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x444>
 800474a:	e03d      	b.n	80047c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d107      	bne.n	8004764 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e038      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
 8004758:	40023800 	.word	0x40023800
 800475c:	40007000 	.word	0x40007000
 8004760:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004764:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <HAL_RCC_OscConfig+0x4ec>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d028      	beq.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800477c:	429a      	cmp	r2, r3
 800477e:	d121      	bne.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478a:	429a      	cmp	r2, r3
 800478c:	d11a      	bne.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004794:	4013      	ands	r3, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800479a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800479c:	4293      	cmp	r3, r2
 800479e:	d111      	bne.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	3b01      	subs	r3, #1
 80047ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d107      	bne.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d001      	beq.n	80047c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40023800 	.word	0x40023800

080047d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0cc      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047ec:	4b68      	ldr	r3, [pc, #416]	; (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d90c      	bls.n	8004814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fa:	4b65      	ldr	r3, [pc, #404]	; (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004802:	4b63      	ldr	r3, [pc, #396]	; (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d001      	beq.n	8004814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0b8      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d020      	beq.n	8004862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800482c:	4b59      	ldr	r3, [pc, #356]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	4a58      	ldr	r2, [pc, #352]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004836:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004844:	4b53      	ldr	r3, [pc, #332]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	4a52      	ldr	r2, [pc, #328]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800484e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004850:	4b50      	ldr	r3, [pc, #320]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	494d      	ldr	r1, [pc, #308]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	4313      	orrs	r3, r2
 8004860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d044      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d107      	bne.n	8004886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004876:	4b47      	ldr	r3, [pc, #284]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d119      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e07f      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d003      	beq.n	8004896 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004892:	2b03      	cmp	r3, #3
 8004894:	d107      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004896:	4b3f      	ldr	r3, [pc, #252]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d109      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e06f      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a6:	4b3b      	ldr	r3, [pc, #236]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e067      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048b6:	4b37      	ldr	r3, [pc, #220]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f023 0203 	bic.w	r2, r3, #3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	4934      	ldr	r1, [pc, #208]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048c8:	f7fe fb96 	bl	8002ff8 <HAL_GetTick>
 80048cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ce:	e00a      	b.n	80048e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d0:	f7fe fb92 	bl	8002ff8 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	f241 3288 	movw	r2, #5000	; 0x1388
 80048de:	4293      	cmp	r3, r2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e04f      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e6:	4b2b      	ldr	r3, [pc, #172]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 020c 	and.w	r2, r3, #12
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d1eb      	bne.n	80048d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048f8:	4b25      	ldr	r3, [pc, #148]	; (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d20c      	bcs.n	8004920 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004906:	4b22      	ldr	r3, [pc, #136]	; (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800490e:	4b20      	ldr	r3, [pc, #128]	; (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d001      	beq.n	8004920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e032      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800492c:	4b19      	ldr	r3, [pc, #100]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	4916      	ldr	r1, [pc, #88]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	4313      	orrs	r3, r2
 800493c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800494a:	4b12      	ldr	r3, [pc, #72]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	490e      	ldr	r1, [pc, #56]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800495e:	f000 f821 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 8004962:	4602      	mov	r2, r0
 8004964:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	091b      	lsrs	r3, r3, #4
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	490a      	ldr	r1, [pc, #40]	; (8004998 <HAL_RCC_ClockConfig+0x1c0>)
 8004970:	5ccb      	ldrb	r3, [r1, r3]
 8004972:	fa22 f303 	lsr.w	r3, r2, r3
 8004976:	4a09      	ldr	r2, [pc, #36]	; (800499c <HAL_RCC_ClockConfig+0x1c4>)
 8004978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800497a:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <HAL_RCC_ClockConfig+0x1c8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe faf6 	bl	8002f70 <HAL_InitTick>

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40023c00 	.word	0x40023c00
 8004994:	40023800 	.word	0x40023800
 8004998:	0800c560 	.word	0x0800c560
 800499c:	20000084 	.word	0x20000084
 80049a0:	20000088 	.word	0x20000088

080049a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a8:	b094      	sub	sp, #80	; 0x50
 80049aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	647b      	str	r3, [r7, #68]	; 0x44
 80049b0:	2300      	movs	r3, #0
 80049b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049b4:	2300      	movs	r3, #0
 80049b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049bc:	4b79      	ldr	r3, [pc, #484]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 030c 	and.w	r3, r3, #12
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d00d      	beq.n	80049e4 <HAL_RCC_GetSysClockFreq+0x40>
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	f200 80e1 	bhi.w	8004b90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <HAL_RCC_GetSysClockFreq+0x34>
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d003      	beq.n	80049de <HAL_RCC_GetSysClockFreq+0x3a>
 80049d6:	e0db      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049d8:	4b73      	ldr	r3, [pc, #460]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 80049da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049dc:	e0db      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049de:	4b73      	ldr	r3, [pc, #460]	; (8004bac <HAL_RCC_GetSysClockFreq+0x208>)
 80049e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049e2:	e0d8      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049e4:	4b6f      	ldr	r3, [pc, #444]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ee:	4b6d      	ldr	r3, [pc, #436]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d063      	beq.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049fa:	4b6a      	ldr	r3, [pc, #424]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	099b      	lsrs	r3, r3, #6
 8004a00:	2200      	movs	r2, #0
 8004a02:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a0e:	2300      	movs	r3, #0
 8004a10:	637b      	str	r3, [r7, #52]	; 0x34
 8004a12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a16:	4622      	mov	r2, r4
 8004a18:	462b      	mov	r3, r5
 8004a1a:	f04f 0000 	mov.w	r0, #0
 8004a1e:	f04f 0100 	mov.w	r1, #0
 8004a22:	0159      	lsls	r1, r3, #5
 8004a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a28:	0150      	lsls	r0, r2, #5
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4621      	mov	r1, r4
 8004a30:	1a51      	subs	r1, r2, r1
 8004a32:	6139      	str	r1, [r7, #16]
 8004a34:	4629      	mov	r1, r5
 8004a36:	eb63 0301 	sbc.w	r3, r3, r1
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a48:	4659      	mov	r1, fp
 8004a4a:	018b      	lsls	r3, r1, #6
 8004a4c:	4651      	mov	r1, sl
 8004a4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a52:	4651      	mov	r1, sl
 8004a54:	018a      	lsls	r2, r1, #6
 8004a56:	4651      	mov	r1, sl
 8004a58:	ebb2 0801 	subs.w	r8, r2, r1
 8004a5c:	4659      	mov	r1, fp
 8004a5e:	eb63 0901 	sbc.w	r9, r3, r1
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a76:	4690      	mov	r8, r2
 8004a78:	4699      	mov	r9, r3
 8004a7a:	4623      	mov	r3, r4
 8004a7c:	eb18 0303 	adds.w	r3, r8, r3
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	462b      	mov	r3, r5
 8004a84:	eb49 0303 	adc.w	r3, r9, r3
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a96:	4629      	mov	r1, r5
 8004a98:	024b      	lsls	r3, r1, #9
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	024a      	lsls	r2, r1, #9
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aaa:	2200      	movs	r2, #0
 8004aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ab0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ab4:	f7fb fbf4 	bl	80002a0 <__aeabi_uldivmod>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4613      	mov	r3, r2
 8004abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac0:	e058      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac2:	4b38      	ldr	r3, [pc, #224]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	099b      	lsrs	r3, r3, #6
 8004ac8:	2200      	movs	r2, #0
 8004aca:	4618      	mov	r0, r3
 8004acc:	4611      	mov	r1, r2
 8004ace:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ad2:	623b      	str	r3, [r7, #32]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004adc:	4642      	mov	r2, r8
 8004ade:	464b      	mov	r3, r9
 8004ae0:	f04f 0000 	mov.w	r0, #0
 8004ae4:	f04f 0100 	mov.w	r1, #0
 8004ae8:	0159      	lsls	r1, r3, #5
 8004aea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aee:	0150      	lsls	r0, r2, #5
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4641      	mov	r1, r8
 8004af6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004afa:	4649      	mov	r1, r9
 8004afc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b14:	ebb2 040a 	subs.w	r4, r2, sl
 8004b18:	eb63 050b 	sbc.w	r5, r3, fp
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	00eb      	lsls	r3, r5, #3
 8004b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b2a:	00e2      	lsls	r2, r4, #3
 8004b2c:	4614      	mov	r4, r2
 8004b2e:	461d      	mov	r5, r3
 8004b30:	4643      	mov	r3, r8
 8004b32:	18e3      	adds	r3, r4, r3
 8004b34:	603b      	str	r3, [r7, #0]
 8004b36:	464b      	mov	r3, r9
 8004b38:	eb45 0303 	adc.w	r3, r5, r3
 8004b3c:	607b      	str	r3, [r7, #4]
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	028b      	lsls	r3, r1, #10
 8004b4e:	4621      	mov	r1, r4
 8004b50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b54:	4621      	mov	r1, r4
 8004b56:	028a      	lsls	r2, r1, #10
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b5e:	2200      	movs	r2, #0
 8004b60:	61bb      	str	r3, [r7, #24]
 8004b62:	61fa      	str	r2, [r7, #28]
 8004b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b68:	f7fb fb9a 	bl	80002a0 <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4613      	mov	r3, r2
 8004b72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b74:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	0c1b      	lsrs	r3, r3, #16
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	3301      	adds	r3, #1
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b8e:	e002      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3750      	adds	r7, #80	; 0x50
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	00f42400 	.word	0x00f42400
 8004bac:	007a1200 	.word	0x007a1200

08004bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bb4:	4b03      	ldr	r3, [pc, #12]	; (8004bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20000084 	.word	0x20000084

08004bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bcc:	f7ff fff0 	bl	8004bb0 <HAL_RCC_GetHCLKFreq>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	0a9b      	lsrs	r3, r3, #10
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	4903      	ldr	r1, [pc, #12]	; (8004bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bde:	5ccb      	ldrb	r3, [r1, r3]
 8004be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40023800 	.word	0x40023800
 8004bec:	0800c570 	.word	0x0800c570

08004bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bf4:	f7ff ffdc 	bl	8004bb0 <HAL_RCC_GetHCLKFreq>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	0b5b      	lsrs	r3, r3, #13
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	4903      	ldr	r1, [pc, #12]	; (8004c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c06:	5ccb      	ldrb	r3, [r1, r3]
 8004c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40023800 	.word	0x40023800
 8004c14:	0800c570 	.word	0x0800c570

08004c18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e07b      	b.n	8004d22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d108      	bne.n	8004c44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c3a:	d009      	beq.n	8004c50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	61da      	str	r2, [r3, #28]
 8004c42:	e005      	b.n	8004c50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fd ff24 	bl	8002ab8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd4:	ea42 0103 	orr.w	r1, r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	0c1b      	lsrs	r3, r3, #16
 8004cee:	f003 0104 	and.w	r1, r3, #4
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	f003 0210 	and.w	r2, r3, #16
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b088      	sub	sp, #32
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	603b      	str	r3, [r7, #0]
 8004d36:	4613      	mov	r3, r2
 8004d38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_SPI_Transmit+0x22>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e126      	b.n	8004f9a <HAL_SPI_Transmit+0x270>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d54:	f7fe f950 	bl	8002ff8 <HAL_GetTick>
 8004d58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d002      	beq.n	8004d70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d6e:	e10b      	b.n	8004f88 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_SPI_Transmit+0x52>
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d80:	e102      	b.n	8004f88 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2203      	movs	r2, #3
 8004d86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	88fa      	ldrh	r2, [r7, #6]
 8004d9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	88fa      	ldrh	r2, [r7, #6]
 8004da0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc8:	d10f      	bne.n	8004dea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004de8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	2b40      	cmp	r3, #64	; 0x40
 8004df6:	d007      	beq.n	8004e08 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e10:	d14b      	bne.n	8004eaa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <HAL_SPI_Transmit+0xf6>
 8004e1a:	8afb      	ldrh	r3, [r7, #22]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d13e      	bne.n	8004e9e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	881a      	ldrh	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e30:	1c9a      	adds	r2, r3, #2
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e44:	e02b      	b.n	8004e9e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d112      	bne.n	8004e7a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	881a      	ldrh	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	1c9a      	adds	r2, r3, #2
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e78:	e011      	b.n	8004e9e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e7a:	f7fe f8bd 	bl	8002ff8 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d803      	bhi.n	8004e92 <HAL_SPI_Transmit+0x168>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e90:	d102      	bne.n	8004e98 <HAL_SPI_Transmit+0x16e>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d102      	bne.n	8004e9e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e9c:	e074      	b.n	8004f88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1ce      	bne.n	8004e46 <HAL_SPI_Transmit+0x11c>
 8004ea8:	e04c      	b.n	8004f44 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_SPI_Transmit+0x18e>
 8004eb2:	8afb      	ldrh	r3, [r7, #22]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d140      	bne.n	8004f3a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	7812      	ldrb	r2, [r2, #0]
 8004ec4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ede:	e02c      	b.n	8004f3a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d113      	bne.n	8004f16 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	7812      	ldrb	r2, [r2, #0]
 8004efa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f14:	e011      	b.n	8004f3a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f16:	f7fe f86f 	bl	8002ff8 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d803      	bhi.n	8004f2e <HAL_SPI_Transmit+0x204>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f2c:	d102      	bne.n	8004f34 <HAL_SPI_Transmit+0x20a>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d102      	bne.n	8004f3a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f38:	e026      	b.n	8004f88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1cd      	bne.n	8004ee0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	6839      	ldr	r1, [r7, #0]
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fa55 	bl	80053f8 <SPI_EndRxTxTransaction>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2220      	movs	r2, #32
 8004f58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10a      	bne.n	8004f78 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f62:	2300      	movs	r3, #0
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	613b      	str	r3, [r7, #16]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e000      	b.n	8004f88 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004f86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f98:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3720      	adds	r7, #32
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b08c      	sub	sp, #48	; 0x30
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	607a      	str	r2, [r7, #4]
 8004fae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_SPI_TransmitReceive+0x26>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e18a      	b.n	80052de <HAL_SPI_TransmitReceive+0x33c>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fd0:	f7fe f812 	bl	8002ff8 <HAL_GetTick>
 8004fd4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004fe6:	887b      	ldrh	r3, [r7, #2]
 8004fe8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d00f      	beq.n	8005012 <HAL_SPI_TransmitReceive+0x70>
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ff8:	d107      	bne.n	800500a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d103      	bne.n	800500a <HAL_SPI_TransmitReceive+0x68>
 8005002:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005006:	2b04      	cmp	r3, #4
 8005008:	d003      	beq.n	8005012 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800500a:	2302      	movs	r3, #2
 800500c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005010:	e15b      	b.n	80052ca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_SPI_TransmitReceive+0x82>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_SPI_TransmitReceive+0x82>
 800501e:	887b      	ldrh	r3, [r7, #2]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d103      	bne.n	800502c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800502a:	e14e      	b.n	80052ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b04      	cmp	r3, #4
 8005036:	d003      	beq.n	8005040 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2205      	movs	r2, #5
 800503c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	887a      	ldrh	r2, [r7, #2]
 8005050:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	887a      	ldrh	r2, [r7, #2]
 8005056:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	887a      	ldrh	r2, [r7, #2]
 8005062:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	887a      	ldrh	r2, [r7, #2]
 8005068:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	d007      	beq.n	8005094 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005092:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800509c:	d178      	bne.n	8005190 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <HAL_SPI_TransmitReceive+0x10a>
 80050a6:	8b7b      	ldrh	r3, [r7, #26]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d166      	bne.n	800517a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b0:	881a      	ldrh	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	1c9a      	adds	r2, r3, #2
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050d0:	e053      	b.n	800517a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d11b      	bne.n	8005118 <HAL_SPI_TransmitReceive+0x176>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d016      	beq.n	8005118 <HAL_SPI_TransmitReceive+0x176>
 80050ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d113      	bne.n	8005118 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f4:	881a      	ldrh	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	1c9a      	adds	r2, r3, #2
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800510a:	b29b      	uxth	r3, r3
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b01      	cmp	r3, #1
 8005124:	d119      	bne.n	800515a <HAL_SPI_TransmitReceive+0x1b8>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800512a:	b29b      	uxth	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d014      	beq.n	800515a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	b292      	uxth	r2, r2
 800513c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	1c9a      	adds	r2, r3, #2
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005156:	2301      	movs	r3, #1
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800515a:	f7fd ff4d 	bl	8002ff8 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005166:	429a      	cmp	r2, r3
 8005168:	d807      	bhi.n	800517a <HAL_SPI_TransmitReceive+0x1d8>
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005170:	d003      	beq.n	800517a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005178:	e0a7      	b.n	80052ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1a6      	bne.n	80050d2 <HAL_SPI_TransmitReceive+0x130>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1a1      	bne.n	80050d2 <HAL_SPI_TransmitReceive+0x130>
 800518e:	e07c      	b.n	800528a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <HAL_SPI_TransmitReceive+0x1fc>
 8005198:	8b7b      	ldrh	r3, [r7, #26]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d16b      	bne.n	8005276 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	330c      	adds	r3, #12
 80051a8:	7812      	ldrb	r2, [r2, #0]
 80051aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051c4:	e057      	b.n	8005276 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d11c      	bne.n	800520e <HAL_SPI_TransmitReceive+0x26c>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d017      	beq.n	800520e <HAL_SPI_TransmitReceive+0x26c>
 80051de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d114      	bne.n	800520e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	330c      	adds	r3, #12
 80051ee:	7812      	ldrb	r2, [r2, #0]
 80051f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005200:	b29b      	uxth	r3, r3
 8005202:	3b01      	subs	r3, #1
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b01      	cmp	r3, #1
 800521a:	d119      	bne.n	8005250 <HAL_SPI_TransmitReceive+0x2ae>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d014      	beq.n	8005250 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800524c:	2301      	movs	r3, #1
 800524e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005250:	f7fd fed2 	bl	8002ff8 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800525c:	429a      	cmp	r2, r3
 800525e:	d803      	bhi.n	8005268 <HAL_SPI_TransmitReceive+0x2c6>
 8005260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005266:	d102      	bne.n	800526e <HAL_SPI_TransmitReceive+0x2cc>
 8005268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526a:	2b00      	cmp	r3, #0
 800526c:	d103      	bne.n	8005276 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005274:	e029      	b.n	80052ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800527a:	b29b      	uxth	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1a2      	bne.n	80051c6 <HAL_SPI_TransmitReceive+0x224>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d19d      	bne.n	80051c6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800528a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 f8b2 	bl	80053f8 <SPI_EndRxTxTransaction>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d006      	beq.n	80052a8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80052a6:	e010      	b.n	80052ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10b      	bne.n	80052c8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	e000      	b.n	80052ca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80052c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3730      	adds	r7, #48	; 0x30
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b088      	sub	sp, #32
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	603b      	str	r3, [r7, #0]
 80052f4:	4613      	mov	r3, r2
 80052f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052f8:	f7fd fe7e 	bl	8002ff8 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005300:	1a9b      	subs	r3, r3, r2
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	4413      	add	r3, r2
 8005306:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005308:	f7fd fe76 	bl	8002ff8 <HAL_GetTick>
 800530c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800530e:	4b39      	ldr	r3, [pc, #228]	; (80053f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	015b      	lsls	r3, r3, #5
 8005314:	0d1b      	lsrs	r3, r3, #20
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	fb02 f303 	mul.w	r3, r2, r3
 800531c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800531e:	e054      	b.n	80053ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005326:	d050      	beq.n	80053ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005328:	f7fd fe66 	bl	8002ff8 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	429a      	cmp	r2, r3
 8005336:	d902      	bls.n	800533e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d13d      	bne.n	80053ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800534c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005356:	d111      	bne.n	800537c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005360:	d004      	beq.n	800536c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536a:	d107      	bne.n	800537c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800537a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005384:	d10f      	bne.n	80053a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e017      	b.n	80053ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4013      	ands	r3, r2
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	bf0c      	ite	eq
 80053da:	2301      	moveq	r3, #1
 80053dc:	2300      	movne	r3, #0
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d19b      	bne.n	8005320 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3720      	adds	r7, #32
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	20000084 	.word	0x20000084

080053f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005404:	4b1b      	ldr	r3, [pc, #108]	; (8005474 <SPI_EndRxTxTransaction+0x7c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a1b      	ldr	r2, [pc, #108]	; (8005478 <SPI_EndRxTxTransaction+0x80>)
 800540a:	fba2 2303 	umull	r2, r3, r2, r3
 800540e:	0d5b      	lsrs	r3, r3, #21
 8005410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005414:	fb02 f303 	mul.w	r3, r2, r3
 8005418:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005422:	d112      	bne.n	800544a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2200      	movs	r2, #0
 800542c:	2180      	movs	r1, #128	; 0x80
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f7ff ff5a 	bl	80052e8 <SPI_WaitFlagStateUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d016      	beq.n	8005468 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543e:	f043 0220 	orr.w	r2, r3, #32
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e00f      	b.n	800546a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	3b01      	subs	r3, #1
 8005454:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005460:	2b80      	cmp	r3, #128	; 0x80
 8005462:	d0f2      	beq.n	800544a <SPI_EndRxTxTransaction+0x52>
 8005464:	e000      	b.n	8005468 <SPI_EndRxTxTransaction+0x70>
        break;
 8005466:	bf00      	nop
  }

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20000084 	.word	0x20000084
 8005478:	165e9f81 	.word	0x165e9f81

0800547c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e041      	b.n	8005512 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fd fb50 	bl	8002b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3304      	adds	r3, #4
 80054b8:	4619      	mov	r1, r3
 80054ba:	4610      	mov	r0, r2
 80054bc:	f000 fac4 	bl	8005a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b01      	cmp	r3, #1
 800552e:	d001      	beq.n	8005534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e04e      	b.n	80055d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0201 	orr.w	r2, r2, #1
 800554a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a23      	ldr	r2, [pc, #140]	; (80055e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d022      	beq.n	800559c <HAL_TIM_Base_Start_IT+0x80>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555e:	d01d      	beq.n	800559c <HAL_TIM_Base_Start_IT+0x80>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a1f      	ldr	r2, [pc, #124]	; (80055e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d018      	beq.n	800559c <HAL_TIM_Base_Start_IT+0x80>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a1e      	ldr	r2, [pc, #120]	; (80055e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d013      	beq.n	800559c <HAL_TIM_Base_Start_IT+0x80>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a1c      	ldr	r2, [pc, #112]	; (80055ec <HAL_TIM_Base_Start_IT+0xd0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00e      	beq.n	800559c <HAL_TIM_Base_Start_IT+0x80>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a1b      	ldr	r2, [pc, #108]	; (80055f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d009      	beq.n	800559c <HAL_TIM_Base_Start_IT+0x80>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a19      	ldr	r2, [pc, #100]	; (80055f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d004      	beq.n	800559c <HAL_TIM_Base_Start_IT+0x80>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a18      	ldr	r2, [pc, #96]	; (80055f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d111      	bne.n	80055c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b06      	cmp	r3, #6
 80055ac:	d010      	beq.n	80055d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0201 	orr.w	r2, r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055be:	e007      	b.n	80055d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40010000 	.word	0x40010000
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40000800 	.word	0x40000800
 80055ec:	40000c00 	.word	0x40000c00
 80055f0:	40010400 	.word	0x40010400
 80055f4:	40014000 	.word	0x40014000
 80055f8:	40001800 	.word	0x40001800

080055fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0201 	bic.w	r2, r2, #1
 8005612:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6a1a      	ldr	r2, [r3, #32]
 800561a:	f241 1311 	movw	r3, #4369	; 0x1111
 800561e:	4013      	ands	r3, r2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10f      	bne.n	8005644 <HAL_TIM_Base_Stop_IT+0x48>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6a1a      	ldr	r2, [r3, #32]
 800562a:	f240 4344 	movw	r3, #1092	; 0x444
 800562e:	4013      	ands	r3, r2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d107      	bne.n	8005644 <HAL_TIM_Base_Stop_IT+0x48>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0201 	bic.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b082      	sub	sp, #8
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b02      	cmp	r3, #2
 800566e:	d122      	bne.n	80056b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b02      	cmp	r3, #2
 800567c:	d11b      	bne.n	80056b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f06f 0202 	mvn.w	r2, #2
 8005686:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f003 0303 	and.w	r3, r3, #3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f9b5 	bl	8005a0c <HAL_TIM_IC_CaptureCallback>
 80056a2:	e005      	b.n	80056b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f9a7 	bl	80059f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f9b8 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d122      	bne.n	800570a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f003 0304 	and.w	r3, r3, #4
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d11b      	bne.n	800570a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f06f 0204 	mvn.w	r2, #4
 80056da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f98b 	bl	8005a0c <HAL_TIM_IC_CaptureCallback>
 80056f6:	e005      	b.n	8005704 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f97d 	bl	80059f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f98e 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b08      	cmp	r3, #8
 8005716:	d122      	bne.n	800575e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b08      	cmp	r3, #8
 8005724:	d11b      	bne.n	800575e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f06f 0208 	mvn.w	r2, #8
 800572e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2204      	movs	r2, #4
 8005734:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f961 	bl	8005a0c <HAL_TIM_IC_CaptureCallback>
 800574a:	e005      	b.n	8005758 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f953 	bl	80059f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f964 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b10      	cmp	r3, #16
 800576a:	d122      	bne.n	80057b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b10      	cmp	r3, #16
 8005778:	d11b      	bne.n	80057b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f06f 0210 	mvn.w	r2, #16
 8005782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2208      	movs	r2, #8
 8005788:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f937 	bl	8005a0c <HAL_TIM_IC_CaptureCallback>
 800579e:	e005      	b.n	80057ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f929 	bl	80059f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f93a 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d10e      	bne.n	80057de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d107      	bne.n	80057de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f06f 0201 	mvn.w	r2, #1
 80057d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7fc f933 	bl	8001a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e8:	2b80      	cmp	r3, #128	; 0x80
 80057ea:	d10e      	bne.n	800580a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f6:	2b80      	cmp	r3, #128	; 0x80
 80057f8:	d107      	bne.n	800580a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fadf 	bl	8005dc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005814:	2b40      	cmp	r3, #64	; 0x40
 8005816:	d10e      	bne.n	8005836 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005822:	2b40      	cmp	r3, #64	; 0x40
 8005824:	d107      	bne.n	8005836 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800582e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f8ff 	bl	8005a34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b20      	cmp	r3, #32
 8005842:	d10e      	bne.n	8005862 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	2b20      	cmp	r3, #32
 8005850:	d107      	bne.n	8005862 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f06f 0220 	mvn.w	r2, #32
 800585a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 faa9 	bl	8005db4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005862:	bf00      	nop
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <HAL_TIM_ConfigClockSource+0x1c>
 8005882:	2302      	movs	r3, #2
 8005884:	e0b4      	b.n	80059f0 <HAL_TIM_ConfigClockSource+0x186>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2202      	movs	r2, #2
 8005892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058be:	d03e      	beq.n	800593e <HAL_TIM_ConfigClockSource+0xd4>
 80058c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c4:	f200 8087 	bhi.w	80059d6 <HAL_TIM_ConfigClockSource+0x16c>
 80058c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058cc:	f000 8086 	beq.w	80059dc <HAL_TIM_ConfigClockSource+0x172>
 80058d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d4:	d87f      	bhi.n	80059d6 <HAL_TIM_ConfigClockSource+0x16c>
 80058d6:	2b70      	cmp	r3, #112	; 0x70
 80058d8:	d01a      	beq.n	8005910 <HAL_TIM_ConfigClockSource+0xa6>
 80058da:	2b70      	cmp	r3, #112	; 0x70
 80058dc:	d87b      	bhi.n	80059d6 <HAL_TIM_ConfigClockSource+0x16c>
 80058de:	2b60      	cmp	r3, #96	; 0x60
 80058e0:	d050      	beq.n	8005984 <HAL_TIM_ConfigClockSource+0x11a>
 80058e2:	2b60      	cmp	r3, #96	; 0x60
 80058e4:	d877      	bhi.n	80059d6 <HAL_TIM_ConfigClockSource+0x16c>
 80058e6:	2b50      	cmp	r3, #80	; 0x50
 80058e8:	d03c      	beq.n	8005964 <HAL_TIM_ConfigClockSource+0xfa>
 80058ea:	2b50      	cmp	r3, #80	; 0x50
 80058ec:	d873      	bhi.n	80059d6 <HAL_TIM_ConfigClockSource+0x16c>
 80058ee:	2b40      	cmp	r3, #64	; 0x40
 80058f0:	d058      	beq.n	80059a4 <HAL_TIM_ConfigClockSource+0x13a>
 80058f2:	2b40      	cmp	r3, #64	; 0x40
 80058f4:	d86f      	bhi.n	80059d6 <HAL_TIM_ConfigClockSource+0x16c>
 80058f6:	2b30      	cmp	r3, #48	; 0x30
 80058f8:	d064      	beq.n	80059c4 <HAL_TIM_ConfigClockSource+0x15a>
 80058fa:	2b30      	cmp	r3, #48	; 0x30
 80058fc:	d86b      	bhi.n	80059d6 <HAL_TIM_ConfigClockSource+0x16c>
 80058fe:	2b20      	cmp	r3, #32
 8005900:	d060      	beq.n	80059c4 <HAL_TIM_ConfigClockSource+0x15a>
 8005902:	2b20      	cmp	r3, #32
 8005904:	d867      	bhi.n	80059d6 <HAL_TIM_ConfigClockSource+0x16c>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d05c      	beq.n	80059c4 <HAL_TIM_ConfigClockSource+0x15a>
 800590a:	2b10      	cmp	r3, #16
 800590c:	d05a      	beq.n	80059c4 <HAL_TIM_ConfigClockSource+0x15a>
 800590e:	e062      	b.n	80059d6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	6899      	ldr	r1, [r3, #8]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f000 f9ac 	bl	8005c7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005932:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	609a      	str	r2, [r3, #8]
      break;
 800593c:	e04f      	b.n	80059de <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6899      	ldr	r1, [r3, #8]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f000 f995 	bl	8005c7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005960:	609a      	str	r2, [r3, #8]
      break;
 8005962:	e03c      	b.n	80059de <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6818      	ldr	r0, [r3, #0]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	6859      	ldr	r1, [r3, #4]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	461a      	mov	r2, r3
 8005972:	f000 f909 	bl	8005b88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2150      	movs	r1, #80	; 0x50
 800597c:	4618      	mov	r0, r3
 800597e:	f000 f962 	bl	8005c46 <TIM_ITRx_SetConfig>
      break;
 8005982:	e02c      	b.n	80059de <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6818      	ldr	r0, [r3, #0]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	6859      	ldr	r1, [r3, #4]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	461a      	mov	r2, r3
 8005992:	f000 f928 	bl	8005be6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2160      	movs	r1, #96	; 0x60
 800599c:	4618      	mov	r0, r3
 800599e:	f000 f952 	bl	8005c46 <TIM_ITRx_SetConfig>
      break;
 80059a2:	e01c      	b.n	80059de <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6818      	ldr	r0, [r3, #0]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	6859      	ldr	r1, [r3, #4]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	461a      	mov	r2, r3
 80059b2:	f000 f8e9 	bl	8005b88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2140      	movs	r1, #64	; 0x40
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 f942 	bl	8005c46 <TIM_ITRx_SetConfig>
      break;
 80059c2:	e00c      	b.n	80059de <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4619      	mov	r1, r3
 80059ce:	4610      	mov	r0, r2
 80059d0:	f000 f939 	bl	8005c46 <TIM_ITRx_SetConfig>
      break;
 80059d4:	e003      	b.n	80059de <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	73fb      	strb	r3, [r7, #15]
      break;
 80059da:	e000      	b.n	80059de <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a40      	ldr	r2, [pc, #256]	; (8005b5c <TIM_Base_SetConfig+0x114>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d013      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a66:	d00f      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a3d      	ldr	r2, [pc, #244]	; (8005b60 <TIM_Base_SetConfig+0x118>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d00b      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a3c      	ldr	r2, [pc, #240]	; (8005b64 <TIM_Base_SetConfig+0x11c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d007      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a3b      	ldr	r2, [pc, #236]	; (8005b68 <TIM_Base_SetConfig+0x120>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a3a      	ldr	r2, [pc, #232]	; (8005b6c <TIM_Base_SetConfig+0x124>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d108      	bne.n	8005a9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a2f      	ldr	r2, [pc, #188]	; (8005b5c <TIM_Base_SetConfig+0x114>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d02b      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa8:	d027      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a2c      	ldr	r2, [pc, #176]	; (8005b60 <TIM_Base_SetConfig+0x118>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d023      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a2b      	ldr	r2, [pc, #172]	; (8005b64 <TIM_Base_SetConfig+0x11c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d01f      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a2a      	ldr	r2, [pc, #168]	; (8005b68 <TIM_Base_SetConfig+0x120>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d01b      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a29      	ldr	r2, [pc, #164]	; (8005b6c <TIM_Base_SetConfig+0x124>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d017      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a28      	ldr	r2, [pc, #160]	; (8005b70 <TIM_Base_SetConfig+0x128>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d013      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a27      	ldr	r2, [pc, #156]	; (8005b74 <TIM_Base_SetConfig+0x12c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00f      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a26      	ldr	r2, [pc, #152]	; (8005b78 <TIM_Base_SetConfig+0x130>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d00b      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a25      	ldr	r2, [pc, #148]	; (8005b7c <TIM_Base_SetConfig+0x134>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d007      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a24      	ldr	r2, [pc, #144]	; (8005b80 <TIM_Base_SetConfig+0x138>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d003      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a23      	ldr	r2, [pc, #140]	; (8005b84 <TIM_Base_SetConfig+0x13c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d108      	bne.n	8005b0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a0a      	ldr	r2, [pc, #40]	; (8005b5c <TIM_Base_SetConfig+0x114>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d003      	beq.n	8005b40 <TIM_Base_SetConfig+0xf8>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a0c      	ldr	r2, [pc, #48]	; (8005b6c <TIM_Base_SetConfig+0x124>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d103      	bne.n	8005b48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	615a      	str	r2, [r3, #20]
}
 8005b4e:	bf00      	nop
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40010000 	.word	0x40010000
 8005b60:	40000400 	.word	0x40000400
 8005b64:	40000800 	.word	0x40000800
 8005b68:	40000c00 	.word	0x40000c00
 8005b6c:	40010400 	.word	0x40010400
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40014400 	.word	0x40014400
 8005b78:	40014800 	.word	0x40014800
 8005b7c:	40001800 	.word	0x40001800
 8005b80:	40001c00 	.word	0x40001c00
 8005b84:	40002000 	.word	0x40002000

08005b88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	f023 0201 	bic.w	r2, r3, #1
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f023 030a 	bic.w	r3, r3, #10
 8005bc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	621a      	str	r2, [r3, #32]
}
 8005bda:	bf00      	nop
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b087      	sub	sp, #28
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	60f8      	str	r0, [r7, #12]
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	f023 0210 	bic.w	r2, r3, #16
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	031b      	lsls	r3, r3, #12
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	621a      	str	r2, [r3, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b085      	sub	sp, #20
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f043 0307 	orr.w	r3, r3, #7
 8005c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	609a      	str	r2, [r3, #8]
}
 8005c70:	bf00      	nop
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	021a      	lsls	r2, r3, #8
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	609a      	str	r2, [r3, #8]
}
 8005cb0:	bf00      	nop
 8005cb2:	371c      	adds	r7, #28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e05a      	b.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a21      	ldr	r2, [pc, #132]	; (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d022      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d20:	d01d      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a1d      	ldr	r2, [pc, #116]	; (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d018      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a1b      	ldr	r2, [pc, #108]	; (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d013      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a1a      	ldr	r2, [pc, #104]	; (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00e      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a18      	ldr	r2, [pc, #96]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d009      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a17      	ldr	r2, [pc, #92]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d004      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a15      	ldr	r2, [pc, #84]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d10c      	bne.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40010000 	.word	0x40010000
 8005d9c:	40000400 	.word	0x40000400
 8005da0:	40000800 	.word	0x40000800
 8005da4:	40000c00 	.word	0x40000c00
 8005da8:	40010400 	.word	0x40010400
 8005dac:	40014000 	.word	0x40014000
 8005db0:	40001800 	.word	0x40001800

08005db4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e03f      	b.n	8005e6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7fc fee4 	bl	8002bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2224      	movs	r2, #36	; 0x24
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 feb3 	bl	8006b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	695a      	ldr	r2, [r3, #20]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b08a      	sub	sp, #40	; 0x28
 8005e7a:	af02      	add	r7, sp, #8
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	603b      	str	r3, [r7, #0]
 8005e82:	4613      	mov	r3, r2
 8005e84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b20      	cmp	r3, #32
 8005e94:	d17c      	bne.n	8005f90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <HAL_UART_Transmit+0x2c>
 8005e9c:	88fb      	ldrh	r3, [r7, #6]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e075      	b.n	8005f92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <HAL_UART_Transmit+0x3e>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e06e      	b.n	8005f92 <HAL_UART_Transmit+0x11c>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2221      	movs	r2, #33	; 0x21
 8005ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eca:	f7fd f895 	bl	8002ff8 <HAL_GetTick>
 8005ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	88fa      	ldrh	r2, [r7, #6]
 8005ed4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	88fa      	ldrh	r2, [r7, #6]
 8005eda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee4:	d108      	bne.n	8005ef8 <HAL_UART_Transmit+0x82>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d104      	bne.n	8005ef8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	61bb      	str	r3, [r7, #24]
 8005ef6:	e003      	b.n	8005f00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f08:	e02a      	b.n	8005f60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2200      	movs	r2, #0
 8005f12:	2180      	movs	r1, #128	; 0x80
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 fbf3 	bl	8006700 <UART_WaitOnFlagUntilTimeout>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e036      	b.n	8005f92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10b      	bne.n	8005f42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	61bb      	str	r3, [r7, #24]
 8005f40:	e007      	b.n	8005f52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	781a      	ldrb	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1cf      	bne.n	8005f0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2200      	movs	r2, #0
 8005f72:	2140      	movs	r1, #64	; 0x40
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 fbc3 	bl	8006700 <UART_WaitOnFlagUntilTimeout>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e006      	b.n	8005f92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	e000      	b.n	8005f92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f90:	2302      	movs	r3, #2
  }
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3720      	adds	r7, #32
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b08a      	sub	sp, #40	; 0x28
 8005f9e:	af02      	add	r7, sp, #8
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	60b9      	str	r1, [r7, #8]
 8005fa4:	603b      	str	r3, [r7, #0]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	f040 808c 	bne.w	80060d4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <HAL_UART_Receive+0x2e>
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e084      	b.n	80060d6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d101      	bne.n	8005fda <HAL_UART_Receive+0x40>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e07d      	b.n	80060d6 <HAL_UART_Receive+0x13c>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2222      	movs	r2, #34	; 0x22
 8005fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ff6:	f7fc ffff 	bl	8002ff8 <HAL_GetTick>
 8005ffa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	88fa      	ldrh	r2, [r7, #6]
 8006000:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	88fa      	ldrh	r2, [r7, #6]
 8006006:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006010:	d108      	bne.n	8006024 <HAL_UART_Receive+0x8a>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d104      	bne.n	8006024 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800601a:	2300      	movs	r3, #0
 800601c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	e003      	b.n	800602c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006028:	2300      	movs	r3, #0
 800602a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006034:	e043      	b.n	80060be <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2200      	movs	r2, #0
 800603e:	2120      	movs	r1, #32
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fb5d 	bl	8006700 <UART_WaitOnFlagUntilTimeout>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e042      	b.n	80060d6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10c      	bne.n	8006070 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	b29b      	uxth	r3, r3
 800605e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006062:	b29a      	uxth	r2, r3
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	3302      	adds	r3, #2
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	e01f      	b.n	80060b0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006078:	d007      	beq.n	800608a <HAL_UART_Receive+0xf0>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <HAL_UART_Receive+0xfe>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	b2da      	uxtb	r2, r3
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	e008      	b.n	80060aa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	3301      	adds	r3, #1
 80060ae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1b6      	bne.n	8006036 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80060d0:	2300      	movs	r3, #0
 80060d2:	e000      	b.n	80060d6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80060d4:	2302      	movs	r3, #2
  }
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3720      	adds	r7, #32
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b08c      	sub	sp, #48	; 0x30
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	60f8      	str	r0, [r7, #12]
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	4613      	mov	r3, r2
 80060ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	d152      	bne.n	800619e <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80060fe:	88fb      	ldrh	r3, [r7, #6]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e04b      	b.n	80061a0 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8006112:	2302      	movs	r3, #2
 8006114:	e044      	b.n	80061a0 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2201      	movs	r2, #1
 8006122:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006124:	88fb      	ldrh	r3, [r7, #6]
 8006126:	461a      	mov	r2, r3
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 fb56 	bl	80067dc <UART_Start_Receive_IT>
 8006130:	4603      	mov	r3, r0
 8006132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800613a:	2b00      	cmp	r3, #0
 800613c:	d12c      	bne.n	8006198 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006142:	2b01      	cmp	r3, #1
 8006144:	d125      	bne.n	8006192 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006146:	2300      	movs	r3, #0
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	e853 3f00 	ldrex	r3, [r3]
 800616a:	617b      	str	r3, [r7, #20]
   return(result);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f043 0310 	orr.w	r3, r3, #16
 8006172:	62bb      	str	r3, [r7, #40]	; 0x28
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	330c      	adds	r3, #12
 800617a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800617c:	627a      	str	r2, [r7, #36]	; 0x24
 800617e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006180:	6a39      	ldr	r1, [r7, #32]
 8006182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006184:	e841 2300 	strex	r3, r2, [r1]
 8006188:	61fb      	str	r3, [r7, #28]
   return(result);
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e5      	bne.n	800615c <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 8006190:	e002      	b.n	8006198 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006198:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800619c:	e000      	b.n	80061a0 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800619e:	2302      	movs	r3, #2
  }
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3730      	adds	r7, #48	; 0x30
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b0ba      	sub	sp, #232	; 0xe8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061de:	f003 030f 	and.w	r3, r3, #15
 80061e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80061e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10f      	bne.n	800620e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061f2:	f003 0320 	and.w	r3, r3, #32
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d009      	beq.n	800620e <HAL_UART_IRQHandler+0x66>
 80061fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061fe:	f003 0320 	and.w	r3, r3, #32
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fc05 	bl	8006a16 <UART_Receive_IT>
      return;
 800620c:	e256      	b.n	80066bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800620e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 80de 	beq.w	80063d4 <HAL_UART_IRQHandler+0x22c>
 8006218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d106      	bne.n	8006232 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006228:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 80d1 	beq.w	80063d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00b      	beq.n	8006256 <HAL_UART_IRQHandler+0xae>
 800623e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006246:	2b00      	cmp	r3, #0
 8006248:	d005      	beq.n	8006256 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	f043 0201 	orr.w	r2, r3, #1
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00b      	beq.n	800627a <HAL_UART_IRQHandler+0xd2>
 8006262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d005      	beq.n	800627a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f043 0202 	orr.w	r2, r3, #2
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800627a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00b      	beq.n	800629e <HAL_UART_IRQHandler+0xf6>
 8006286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	d005      	beq.n	800629e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	f043 0204 	orr.w	r2, r3, #4
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800629e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d011      	beq.n	80062ce <HAL_UART_IRQHandler+0x126>
 80062aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ae:	f003 0320 	and.w	r3, r3, #32
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d105      	bne.n	80062c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80062b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d005      	beq.n	80062ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	f043 0208 	orr.w	r2, r3, #8
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 81ed 	beq.w	80066b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062dc:	f003 0320 	and.w	r3, r3, #32
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d008      	beq.n	80062f6 <HAL_UART_IRQHandler+0x14e>
 80062e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fb90 	bl	8006a16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006300:	2b40      	cmp	r3, #64	; 0x40
 8006302:	bf0c      	ite	eq
 8006304:	2301      	moveq	r3, #1
 8006306:	2300      	movne	r3, #0
 8006308:	b2db      	uxtb	r3, r3
 800630a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006312:	f003 0308 	and.w	r3, r3, #8
 8006316:	2b00      	cmp	r3, #0
 8006318:	d103      	bne.n	8006322 <HAL_UART_IRQHandler+0x17a>
 800631a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800631e:	2b00      	cmp	r3, #0
 8006320:	d04f      	beq.n	80063c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fa98 	bl	8006858 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006332:	2b40      	cmp	r3, #64	; 0x40
 8006334:	d141      	bne.n	80063ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3314      	adds	r3, #20
 800633c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800634c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006354:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3314      	adds	r3, #20
 800635e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006362:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800636e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800637a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1d9      	bne.n	8006336 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006386:	2b00      	cmp	r3, #0
 8006388:	d013      	beq.n	80063b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638e:	4a7d      	ldr	r2, [pc, #500]	; (8006584 <HAL_UART_IRQHandler+0x3dc>)
 8006390:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	4618      	mov	r0, r3
 8006398:	f7fc ffdf 	bl	800335a <HAL_DMA_Abort_IT>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d016      	beq.n	80063d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063ac:	4610      	mov	r0, r2
 80063ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b0:	e00e      	b.n	80063d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f99a 	bl	80066ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b8:	e00a      	b.n	80063d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f996 	bl	80066ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c0:	e006      	b.n	80063d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f992 	bl	80066ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063ce:	e170      	b.n	80066b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d0:	bf00      	nop
    return;
 80063d2:	e16e      	b.n	80066b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d8:	2b01      	cmp	r3, #1
 80063da:	f040 814a 	bne.w	8006672 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e2:	f003 0310 	and.w	r3, r3, #16
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 8143 	beq.w	8006672 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 813c 	beq.w	8006672 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063fa:	2300      	movs	r3, #0
 80063fc:	60bb      	str	r3, [r7, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	60bb      	str	r3, [r7, #8]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	60bb      	str	r3, [r7, #8]
 800640e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641a:	2b40      	cmp	r3, #64	; 0x40
 800641c:	f040 80b4 	bne.w	8006588 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800642c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 8140 	beq.w	80066b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800643a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800643e:	429a      	cmp	r2, r3
 8006440:	f080 8139 	bcs.w	80066b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800644a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006456:	f000 8088 	beq.w	800656a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	330c      	adds	r3, #12
 8006460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006470:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006478:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	330c      	adds	r3, #12
 8006482:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006486:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800648a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006492:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800649e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1d9      	bne.n	800645a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3314      	adds	r3, #20
 80064ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064b8:	f023 0301 	bic.w	r3, r3, #1
 80064bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3314      	adds	r3, #20
 80064c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e1      	bne.n	80064a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3314      	adds	r3, #20
 80064e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3314      	adds	r3, #20
 8006502:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006506:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006508:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800650c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e3      	bne.n	80064e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	330c      	adds	r3, #12
 800652e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006532:	e853 3f00 	ldrex	r3, [r3]
 8006536:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800653a:	f023 0310 	bic.w	r3, r3, #16
 800653e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	330c      	adds	r3, #12
 8006548:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800654c:	65ba      	str	r2, [r7, #88]	; 0x58
 800654e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006550:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006552:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006554:	e841 2300 	strex	r3, r2, [r1]
 8006558:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800655a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1e3      	bne.n	8006528 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006564:	4618      	mov	r0, r3
 8006566:	f7fc fe88 	bl	800327a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006572:	b29b      	uxth	r3, r3
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	b29b      	uxth	r3, r3
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7fa fb9c 	bl	8000cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006580:	e099      	b.n	80066b6 <HAL_UART_IRQHandler+0x50e>
 8006582:	bf00      	nop
 8006584:	0800691f 	.word	0x0800691f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006590:	b29b      	uxth	r3, r3
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800659c:	b29b      	uxth	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 808b 	beq.w	80066ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80065a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 8086 	beq.w	80066ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	330c      	adds	r3, #12
 80065b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	330c      	adds	r3, #12
 80065ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80065d2:	647a      	str	r2, [r7, #68]	; 0x44
 80065d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e3      	bne.n	80065ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3314      	adds	r3, #20
 80065ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	623b      	str	r3, [r7, #32]
   return(result);
 80065f6:	6a3b      	ldr	r3, [r7, #32]
 80065f8:	f023 0301 	bic.w	r3, r3, #1
 80065fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3314      	adds	r3, #20
 8006606:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800660a:	633a      	str	r2, [r7, #48]	; 0x30
 800660c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e3      	bne.n	80065e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	330c      	adds	r3, #12
 8006632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	60fb      	str	r3, [r7, #12]
   return(result);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f023 0310 	bic.w	r3, r3, #16
 8006642:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	330c      	adds	r3, #12
 800664c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006650:	61fa      	str	r2, [r7, #28]
 8006652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006654:	69b9      	ldr	r1, [r7, #24]
 8006656:	69fa      	ldr	r2, [r7, #28]
 8006658:	e841 2300 	strex	r3, r2, [r1]
 800665c:	617b      	str	r3, [r7, #20]
   return(result);
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e3      	bne.n	800662c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006664:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006668:	4619      	mov	r1, r3
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7fa fb24 	bl	8000cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006670:	e023      	b.n	80066ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667a:	2b00      	cmp	r3, #0
 800667c:	d009      	beq.n	8006692 <HAL_UART_IRQHandler+0x4ea>
 800667e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f95b 	bl	8006946 <UART_Transmit_IT>
    return;
 8006690:	e014      	b.n	80066bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00e      	beq.n	80066bc <HAL_UART_IRQHandler+0x514>
 800669e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d008      	beq.n	80066bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f99b 	bl	80069e6 <UART_EndTransmit_IT>
    return;
 80066b0:	e004      	b.n	80066bc <HAL_UART_IRQHandler+0x514>
    return;
 80066b2:	bf00      	nop
 80066b4:	e002      	b.n	80066bc <HAL_UART_IRQHandler+0x514>
      return;
 80066b6:	bf00      	nop
 80066b8:	e000      	b.n	80066bc <HAL_UART_IRQHandler+0x514>
      return;
 80066ba:	bf00      	nop
  }
}
 80066bc:	37e8      	adds	r7, #232	; 0xe8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop

080066c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b090      	sub	sp, #64	; 0x40
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	603b      	str	r3, [r7, #0]
 800670c:	4613      	mov	r3, r2
 800670e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006710:	e050      	b.n	80067b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006718:	d04c      	beq.n	80067b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800671a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800671c:	2b00      	cmp	r3, #0
 800671e:	d007      	beq.n	8006730 <UART_WaitOnFlagUntilTimeout+0x30>
 8006720:	f7fc fc6a 	bl	8002ff8 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800672c:	429a      	cmp	r2, r3
 800672e:	d241      	bcs.n	80067b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	330c      	adds	r3, #12
 8006736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	e853 3f00 	ldrex	r3, [r3]
 800673e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	330c      	adds	r3, #12
 800674e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006750:	637a      	str	r2, [r7, #52]	; 0x34
 8006752:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006754:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006758:	e841 2300 	strex	r3, r2, [r1]
 800675c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1e5      	bne.n	8006730 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3314      	adds	r3, #20
 800676a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	e853 3f00 	ldrex	r3, [r3]
 8006772:	613b      	str	r3, [r7, #16]
   return(result);
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	f023 0301 	bic.w	r3, r3, #1
 800677a:	63bb      	str	r3, [r7, #56]	; 0x38
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3314      	adds	r3, #20
 8006782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006784:	623a      	str	r2, [r7, #32]
 8006786:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006788:	69f9      	ldr	r1, [r7, #28]
 800678a:	6a3a      	ldr	r2, [r7, #32]
 800678c:	e841 2300 	strex	r3, r2, [r1]
 8006790:	61bb      	str	r3, [r7, #24]
   return(result);
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e5      	bne.n	8006764 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2220      	movs	r2, #32
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e00f      	b.n	80067d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	4013      	ands	r3, r2
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	bf0c      	ite	eq
 80067c4:	2301      	moveq	r3, #1
 80067c6:	2300      	movne	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	461a      	mov	r2, r3
 80067cc:	79fb      	ldrb	r3, [r7, #7]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d09f      	beq.n	8006712 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3740      	adds	r7, #64	; 0x40
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	4613      	mov	r3, r2
 80067e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	88fa      	ldrh	r2, [r7, #6]
 80067f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	88fa      	ldrh	r2, [r7, #6]
 80067fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2222      	movs	r2, #34	; 0x22
 8006806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d007      	beq.n	800682a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006828:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	695a      	ldr	r2, [r3, #20]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f042 0201 	orr.w	r2, r2, #1
 8006838:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f042 0220 	orr.w	r2, r2, #32
 8006848:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006858:	b480      	push	{r7}
 800685a:	b095      	sub	sp, #84	; 0x54
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	330c      	adds	r3, #12
 8006866:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	330c      	adds	r3, #12
 800687e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006880:	643a      	str	r2, [r7, #64]	; 0x40
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006886:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e5      	bne.n	8006860 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3314      	adds	r3, #20
 800689a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	e853 3f00 	ldrex	r3, [r3]
 80068a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	f023 0301 	bic.w	r3, r3, #1
 80068aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3314      	adds	r3, #20
 80068b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e5      	bne.n	8006894 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d119      	bne.n	8006904 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	330c      	adds	r3, #12
 80068d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	e853 3f00 	ldrex	r3, [r3]
 80068de:	60bb      	str	r3, [r7, #8]
   return(result);
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f023 0310 	bic.w	r3, r3, #16
 80068e6:	647b      	str	r3, [r7, #68]	; 0x44
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	330c      	adds	r3, #12
 80068ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068f0:	61ba      	str	r2, [r7, #24]
 80068f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	6979      	ldr	r1, [r7, #20]
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	e841 2300 	strex	r3, r2, [r1]
 80068fc:	613b      	str	r3, [r7, #16]
   return(result);
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e5      	bne.n	80068d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2220      	movs	r2, #32
 8006908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006912:	bf00      	nop
 8006914:	3754      	adds	r7, #84	; 0x54
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f7ff fed7 	bl	80066ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800693e:	bf00      	nop
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006946:	b480      	push	{r7}
 8006948:	b085      	sub	sp, #20
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b21      	cmp	r3, #33	; 0x21
 8006958:	d13e      	bne.n	80069d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006962:	d114      	bne.n	800698e <UART_Transmit_IT+0x48>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d110      	bne.n	800698e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006980:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	1c9a      	adds	r2, r3, #2
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	621a      	str	r2, [r3, #32]
 800698c:	e008      	b.n	80069a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	1c59      	adds	r1, r3, #1
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	6211      	str	r1, [r2, #32]
 8006998:	781a      	ldrb	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	4619      	mov	r1, r3
 80069ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10f      	bne.n	80069d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68da      	ldr	r2, [r3, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	e000      	b.n	80069da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069d8:	2302      	movs	r3, #2
  }
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff fe5c 	bl	80066c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b08c      	sub	sp, #48	; 0x30
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b22      	cmp	r3, #34	; 0x22
 8006a28:	f040 80ab 	bne.w	8006b82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a34:	d117      	bne.n	8006a66 <UART_Receive_IT+0x50>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d113      	bne.n	8006a66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5e:	1c9a      	adds	r2, r3, #2
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	629a      	str	r2, [r3, #40]	; 0x28
 8006a64:	e026      	b.n	8006ab4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a78:	d007      	beq.n	8006a8a <UART_Receive_IT+0x74>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10a      	bne.n	8006a98 <UART_Receive_IT+0x82>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	e008      	b.n	8006aaa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aae:	1c5a      	adds	r2, r3, #1
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	3b01      	subs	r3, #1
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d15a      	bne.n	8006b7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0220 	bic.w	r2, r2, #32
 8006ad6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68da      	ldr	r2, [r3, #12]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ae6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	695a      	ldr	r2, [r3, #20]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0201 	bic.w	r2, r2, #1
 8006af6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d135      	bne.n	8006b74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	330c      	adds	r3, #12
 8006b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	e853 3f00 	ldrex	r3, [r3]
 8006b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f023 0310 	bic.w	r3, r3, #16
 8006b24:	627b      	str	r3, [r7, #36]	; 0x24
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	330c      	adds	r3, #12
 8006b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2e:	623a      	str	r2, [r7, #32]
 8006b30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b32:	69f9      	ldr	r1, [r7, #28]
 8006b34:	6a3a      	ldr	r2, [r7, #32]
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e5      	bne.n	8006b0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0310 	and.w	r3, r3, #16
 8006b4c:	2b10      	cmp	r3, #16
 8006b4e:	d10a      	bne.n	8006b66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b50:	2300      	movs	r3, #0
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7fa f8a3 	bl	8000cb8 <HAL_UARTEx_RxEventCallback>
 8006b72:	e002      	b.n	8006b7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff fdaf 	bl	80066d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	e002      	b.n	8006b84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	e000      	b.n	8006b84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006b82:	2302      	movs	r3, #2
  }
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3730      	adds	r7, #48	; 0x30
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b90:	b0c0      	sub	sp, #256	; 0x100
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba8:	68d9      	ldr	r1, [r3, #12]
 8006baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	ea40 0301 	orr.w	r3, r0, r1
 8006bb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006be4:	f021 010c 	bic.w	r1, r1, #12
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bf2:	430b      	orrs	r3, r1
 8006bf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c06:	6999      	ldr	r1, [r3, #24]
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	ea40 0301 	orr.w	r3, r0, r1
 8006c12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	4b8f      	ldr	r3, [pc, #572]	; (8006e58 <UART_SetConfig+0x2cc>)
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d005      	beq.n	8006c2c <UART_SetConfig+0xa0>
 8006c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	4b8d      	ldr	r3, [pc, #564]	; (8006e5c <UART_SetConfig+0x2d0>)
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d104      	bne.n	8006c36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c2c:	f7fd ffe0 	bl	8004bf0 <HAL_RCC_GetPCLK2Freq>
 8006c30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c34:	e003      	b.n	8006c3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c36:	f7fd ffc7 	bl	8004bc8 <HAL_RCC_GetPCLK1Freq>
 8006c3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c48:	f040 810c 	bne.w	8006e64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c50:	2200      	movs	r2, #0
 8006c52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c5e:	4622      	mov	r2, r4
 8006c60:	462b      	mov	r3, r5
 8006c62:	1891      	adds	r1, r2, r2
 8006c64:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c66:	415b      	adcs	r3, r3
 8006c68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c6e:	4621      	mov	r1, r4
 8006c70:	eb12 0801 	adds.w	r8, r2, r1
 8006c74:	4629      	mov	r1, r5
 8006c76:	eb43 0901 	adc.w	r9, r3, r1
 8006c7a:	f04f 0200 	mov.w	r2, #0
 8006c7e:	f04f 0300 	mov.w	r3, #0
 8006c82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c8e:	4690      	mov	r8, r2
 8006c90:	4699      	mov	r9, r3
 8006c92:	4623      	mov	r3, r4
 8006c94:	eb18 0303 	adds.w	r3, r8, r3
 8006c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c9c:	462b      	mov	r3, r5
 8006c9e:	eb49 0303 	adc.w	r3, r9, r3
 8006ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006cb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006cba:	460b      	mov	r3, r1
 8006cbc:	18db      	adds	r3, r3, r3
 8006cbe:	653b      	str	r3, [r7, #80]	; 0x50
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	eb42 0303 	adc.w	r3, r2, r3
 8006cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8006cc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ccc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006cd0:	f7f9 fae6 	bl	80002a0 <__aeabi_uldivmod>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4b61      	ldr	r3, [pc, #388]	; (8006e60 <UART_SetConfig+0x2d4>)
 8006cda:	fba3 2302 	umull	r2, r3, r3, r2
 8006cde:	095b      	lsrs	r3, r3, #5
 8006ce0:	011c      	lsls	r4, r3, #4
 8006ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006cf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	464b      	mov	r3, r9
 8006cf8:	1891      	adds	r1, r2, r2
 8006cfa:	64b9      	str	r1, [r7, #72]	; 0x48
 8006cfc:	415b      	adcs	r3, r3
 8006cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d04:	4641      	mov	r1, r8
 8006d06:	eb12 0a01 	adds.w	sl, r2, r1
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	eb43 0b01 	adc.w	fp, r3, r1
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d24:	4692      	mov	sl, r2
 8006d26:	469b      	mov	fp, r3
 8006d28:	4643      	mov	r3, r8
 8006d2a:	eb1a 0303 	adds.w	r3, sl, r3
 8006d2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d32:	464b      	mov	r3, r9
 8006d34:	eb4b 0303 	adc.w	r3, fp, r3
 8006d38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d50:	460b      	mov	r3, r1
 8006d52:	18db      	adds	r3, r3, r3
 8006d54:	643b      	str	r3, [r7, #64]	; 0x40
 8006d56:	4613      	mov	r3, r2
 8006d58:	eb42 0303 	adc.w	r3, r2, r3
 8006d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006d66:	f7f9 fa9b 	bl	80002a0 <__aeabi_uldivmod>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4611      	mov	r1, r2
 8006d70:	4b3b      	ldr	r3, [pc, #236]	; (8006e60 <UART_SetConfig+0x2d4>)
 8006d72:	fba3 2301 	umull	r2, r3, r3, r1
 8006d76:	095b      	lsrs	r3, r3, #5
 8006d78:	2264      	movs	r2, #100	; 0x64
 8006d7a:	fb02 f303 	mul.w	r3, r2, r3
 8006d7e:	1acb      	subs	r3, r1, r3
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d86:	4b36      	ldr	r3, [pc, #216]	; (8006e60 <UART_SetConfig+0x2d4>)
 8006d88:	fba3 2302 	umull	r2, r3, r3, r2
 8006d8c:	095b      	lsrs	r3, r3, #5
 8006d8e:	005b      	lsls	r3, r3, #1
 8006d90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d94:	441c      	add	r4, r3
 8006d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006da0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006da4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006da8:	4642      	mov	r2, r8
 8006daa:	464b      	mov	r3, r9
 8006dac:	1891      	adds	r1, r2, r2
 8006dae:	63b9      	str	r1, [r7, #56]	; 0x38
 8006db0:	415b      	adcs	r3, r3
 8006db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006db4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006db8:	4641      	mov	r1, r8
 8006dba:	1851      	adds	r1, r2, r1
 8006dbc:	6339      	str	r1, [r7, #48]	; 0x30
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	414b      	adcs	r3, r1
 8006dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc4:	f04f 0200 	mov.w	r2, #0
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006dd0:	4659      	mov	r1, fp
 8006dd2:	00cb      	lsls	r3, r1, #3
 8006dd4:	4651      	mov	r1, sl
 8006dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dda:	4651      	mov	r1, sl
 8006ddc:	00ca      	lsls	r2, r1, #3
 8006dde:	4610      	mov	r0, r2
 8006de0:	4619      	mov	r1, r3
 8006de2:	4603      	mov	r3, r0
 8006de4:	4642      	mov	r2, r8
 8006de6:	189b      	adds	r3, r3, r2
 8006de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dec:	464b      	mov	r3, r9
 8006dee:	460a      	mov	r2, r1
 8006df0:	eb42 0303 	adc.w	r3, r2, r3
 8006df4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	18db      	adds	r3, r3, r3
 8006e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e12:	4613      	mov	r3, r2
 8006e14:	eb42 0303 	adc.w	r3, r2, r3
 8006e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e22:	f7f9 fa3d 	bl	80002a0 <__aeabi_uldivmod>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4b0d      	ldr	r3, [pc, #52]	; (8006e60 <UART_SetConfig+0x2d4>)
 8006e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	2164      	movs	r1, #100	; 0x64
 8006e34:	fb01 f303 	mul.w	r3, r1, r3
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	3332      	adds	r3, #50	; 0x32
 8006e3e:	4a08      	ldr	r2, [pc, #32]	; (8006e60 <UART_SetConfig+0x2d4>)
 8006e40:	fba2 2303 	umull	r2, r3, r2, r3
 8006e44:	095b      	lsrs	r3, r3, #5
 8006e46:	f003 0207 	and.w	r2, r3, #7
 8006e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4422      	add	r2, r4
 8006e52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e54:	e105      	b.n	8007062 <UART_SetConfig+0x4d6>
 8006e56:	bf00      	nop
 8006e58:	40011000 	.word	0x40011000
 8006e5c:	40011400 	.word	0x40011400
 8006e60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006e76:	4642      	mov	r2, r8
 8006e78:	464b      	mov	r3, r9
 8006e7a:	1891      	adds	r1, r2, r2
 8006e7c:	6239      	str	r1, [r7, #32]
 8006e7e:	415b      	adcs	r3, r3
 8006e80:	627b      	str	r3, [r7, #36]	; 0x24
 8006e82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e86:	4641      	mov	r1, r8
 8006e88:	1854      	adds	r4, r2, r1
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	eb43 0501 	adc.w	r5, r3, r1
 8006e90:	f04f 0200 	mov.w	r2, #0
 8006e94:	f04f 0300 	mov.w	r3, #0
 8006e98:	00eb      	lsls	r3, r5, #3
 8006e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e9e:	00e2      	lsls	r2, r4, #3
 8006ea0:	4614      	mov	r4, r2
 8006ea2:	461d      	mov	r5, r3
 8006ea4:	4643      	mov	r3, r8
 8006ea6:	18e3      	adds	r3, r4, r3
 8006ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006eac:	464b      	mov	r3, r9
 8006eae:	eb45 0303 	adc.w	r3, r5, r3
 8006eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ec2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ec6:	f04f 0200 	mov.w	r2, #0
 8006eca:	f04f 0300 	mov.w	r3, #0
 8006ece:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	008b      	lsls	r3, r1, #2
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006edc:	4621      	mov	r1, r4
 8006ede:	008a      	lsls	r2, r1, #2
 8006ee0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ee4:	f7f9 f9dc 	bl	80002a0 <__aeabi_uldivmod>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	4b60      	ldr	r3, [pc, #384]	; (8007070 <UART_SetConfig+0x4e4>)
 8006eee:	fba3 2302 	umull	r2, r3, r3, r2
 8006ef2:	095b      	lsrs	r3, r3, #5
 8006ef4:	011c      	lsls	r4, r3, #4
 8006ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f08:	4642      	mov	r2, r8
 8006f0a:	464b      	mov	r3, r9
 8006f0c:	1891      	adds	r1, r2, r2
 8006f0e:	61b9      	str	r1, [r7, #24]
 8006f10:	415b      	adcs	r3, r3
 8006f12:	61fb      	str	r3, [r7, #28]
 8006f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f18:	4641      	mov	r1, r8
 8006f1a:	1851      	adds	r1, r2, r1
 8006f1c:	6139      	str	r1, [r7, #16]
 8006f1e:	4649      	mov	r1, r9
 8006f20:	414b      	adcs	r3, r1
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	f04f 0200 	mov.w	r2, #0
 8006f28:	f04f 0300 	mov.w	r3, #0
 8006f2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f30:	4659      	mov	r1, fp
 8006f32:	00cb      	lsls	r3, r1, #3
 8006f34:	4651      	mov	r1, sl
 8006f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f3a:	4651      	mov	r1, sl
 8006f3c:	00ca      	lsls	r2, r1, #3
 8006f3e:	4610      	mov	r0, r2
 8006f40:	4619      	mov	r1, r3
 8006f42:	4603      	mov	r3, r0
 8006f44:	4642      	mov	r2, r8
 8006f46:	189b      	adds	r3, r3, r2
 8006f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f4c:	464b      	mov	r3, r9
 8006f4e:	460a      	mov	r2, r1
 8006f50:	eb42 0303 	adc.w	r3, r2, r3
 8006f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006f64:	f04f 0200 	mov.w	r2, #0
 8006f68:	f04f 0300 	mov.w	r3, #0
 8006f6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f70:	4649      	mov	r1, r9
 8006f72:	008b      	lsls	r3, r1, #2
 8006f74:	4641      	mov	r1, r8
 8006f76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f7a:	4641      	mov	r1, r8
 8006f7c:	008a      	lsls	r2, r1, #2
 8006f7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f82:	f7f9 f98d 	bl	80002a0 <__aeabi_uldivmod>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4b39      	ldr	r3, [pc, #228]	; (8007070 <UART_SetConfig+0x4e4>)
 8006f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f90:	095b      	lsrs	r3, r3, #5
 8006f92:	2164      	movs	r1, #100	; 0x64
 8006f94:	fb01 f303 	mul.w	r3, r1, r3
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	3332      	adds	r3, #50	; 0x32
 8006f9e:	4a34      	ldr	r2, [pc, #208]	; (8007070 <UART_SetConfig+0x4e4>)
 8006fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa4:	095b      	lsrs	r3, r3, #5
 8006fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006faa:	441c      	add	r4, r3
 8006fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	673b      	str	r3, [r7, #112]	; 0x70
 8006fb4:	677a      	str	r2, [r7, #116]	; 0x74
 8006fb6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006fba:	4642      	mov	r2, r8
 8006fbc:	464b      	mov	r3, r9
 8006fbe:	1891      	adds	r1, r2, r2
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	415b      	adcs	r3, r3
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fca:	4641      	mov	r1, r8
 8006fcc:	1851      	adds	r1, r2, r1
 8006fce:	6039      	str	r1, [r7, #0]
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	414b      	adcs	r3, r1
 8006fd4:	607b      	str	r3, [r7, #4]
 8006fd6:	f04f 0200 	mov.w	r2, #0
 8006fda:	f04f 0300 	mov.w	r3, #0
 8006fde:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006fe2:	4659      	mov	r1, fp
 8006fe4:	00cb      	lsls	r3, r1, #3
 8006fe6:	4651      	mov	r1, sl
 8006fe8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fec:	4651      	mov	r1, sl
 8006fee:	00ca      	lsls	r2, r1, #3
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	4642      	mov	r2, r8
 8006ff8:	189b      	adds	r3, r3, r2
 8006ffa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ffc:	464b      	mov	r3, r9
 8006ffe:	460a      	mov	r2, r1
 8007000:	eb42 0303 	adc.w	r3, r2, r3
 8007004:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	663b      	str	r3, [r7, #96]	; 0x60
 8007010:	667a      	str	r2, [r7, #100]	; 0x64
 8007012:	f04f 0200 	mov.w	r2, #0
 8007016:	f04f 0300 	mov.w	r3, #0
 800701a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800701e:	4649      	mov	r1, r9
 8007020:	008b      	lsls	r3, r1, #2
 8007022:	4641      	mov	r1, r8
 8007024:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007028:	4641      	mov	r1, r8
 800702a:	008a      	lsls	r2, r1, #2
 800702c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007030:	f7f9 f936 	bl	80002a0 <__aeabi_uldivmod>
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	4b0d      	ldr	r3, [pc, #52]	; (8007070 <UART_SetConfig+0x4e4>)
 800703a:	fba3 1302 	umull	r1, r3, r3, r2
 800703e:	095b      	lsrs	r3, r3, #5
 8007040:	2164      	movs	r1, #100	; 0x64
 8007042:	fb01 f303 	mul.w	r3, r1, r3
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	011b      	lsls	r3, r3, #4
 800704a:	3332      	adds	r3, #50	; 0x32
 800704c:	4a08      	ldr	r2, [pc, #32]	; (8007070 <UART_SetConfig+0x4e4>)
 800704e:	fba2 2303 	umull	r2, r3, r2, r3
 8007052:	095b      	lsrs	r3, r3, #5
 8007054:	f003 020f 	and.w	r2, r3, #15
 8007058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4422      	add	r2, r4
 8007060:	609a      	str	r2, [r3, #8]
}
 8007062:	bf00      	nop
 8007064:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007068:	46bd      	mov	sp, r7
 800706a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800706e:	bf00      	nop
 8007070:	51eb851f 	.word	0x51eb851f

08007074 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007078:	4904      	ldr	r1, [pc, #16]	; (800708c <MX_FATFS_Init+0x18>)
 800707a:	4805      	ldr	r0, [pc, #20]	; (8007090 <MX_FATFS_Init+0x1c>)
 800707c:	f002 feae 	bl	8009ddc <FATFS_LinkDriver>
 8007080:	4603      	mov	r3, r0
 8007082:	461a      	mov	r2, r3
 8007084:	4b03      	ldr	r3, [pc, #12]	; (8007094 <MX_FATFS_Init+0x20>)
 8007086:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007088:	bf00      	nop
 800708a:	bd80      	pop	{r7, pc}
 800708c:	20017450 	.word	0x20017450
 8007090:	20000090 	.word	0x20000090
 8007094:	2001744c 	.word	0x2001744c

08007098 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800709c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800709e:	4618      	mov	r0, r3
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 80070b2:	79fb      	ldrb	r3, [r7, #7]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fa f943 	bl	8001340 <SD_disk_initialize>
 80070ba:	4603      	mov	r3, r0
 80070bc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b082      	sub	sp, #8
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	4603      	mov	r3, r0
 80070ce:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 80070d0:	79fb      	ldrb	r3, [r7, #7]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fa fa20 	bl	8001518 <SD_disk_status>
 80070d8:	4603      	mov	r3, r0
 80070da:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60b9      	str	r1, [r7, #8]
 80070ec:	607a      	str	r2, [r7, #4]
 80070ee:	603b      	str	r3, [r7, #0]
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 80070f4:	7bf8      	ldrb	r0, [r7, #15]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	68b9      	ldr	r1, [r7, #8]
 80070fc:	f7fa fa22 	bl	8001544 <SD_disk_read>
 8007100:	4603      	mov	r3, r0
 8007102:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	60b9      	str	r1, [r7, #8]
 8007114:	607a      	str	r2, [r7, #4]
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	4603      	mov	r3, r0
 800711a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 800711c:	7bf8      	ldrb	r0, [r7, #15]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	68b9      	ldr	r1, [r7, #8]
 8007124:	f7fa fa78 	bl	8001618 <SD_disk_write>
 8007128:	4603      	mov	r3, r0
 800712a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	4603      	mov	r3, r0
 800713c:	603a      	str	r2, [r7, #0]
 800713e:	71fb      	strb	r3, [r7, #7]
 8007140:	460b      	mov	r3, r1
 8007142:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8007144:	79fb      	ldrb	r3, [r7, #7]
 8007146:	79b9      	ldrb	r1, [r7, #6]
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	4618      	mov	r0, r3
 800714c:	f7fa fae8 	bl	8001720 <SD_disk_ioctl>
 8007150:	4603      	mov	r3, r0
 8007152:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8007154:	4618      	mov	r0, r3
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007166:	79fb      	ldrb	r3, [r7, #7]
 8007168:	4a08      	ldr	r2, [pc, #32]	; (800718c <disk_status+0x30>)
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	79fa      	ldrb	r2, [r7, #7]
 8007174:	4905      	ldr	r1, [pc, #20]	; (800718c <disk_status+0x30>)
 8007176:	440a      	add	r2, r1
 8007178:	7a12      	ldrb	r2, [r2, #8]
 800717a:	4610      	mov	r0, r2
 800717c:	4798      	blx	r3
 800717e:	4603      	mov	r3, r0
 8007180:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007182:	7bfb      	ldrb	r3, [r7, #15]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	2001767c 	.word	0x2001767c

08007190 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	4603      	mov	r3, r0
 8007198:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800719e:	79fb      	ldrb	r3, [r7, #7]
 80071a0:	4a0d      	ldr	r2, [pc, #52]	; (80071d8 <disk_initialize+0x48>)
 80071a2:	5cd3      	ldrb	r3, [r2, r3]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d111      	bne.n	80071cc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80071a8:	79fb      	ldrb	r3, [r7, #7]
 80071aa:	4a0b      	ldr	r2, [pc, #44]	; (80071d8 <disk_initialize+0x48>)
 80071ac:	2101      	movs	r1, #1
 80071ae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80071b0:	79fb      	ldrb	r3, [r7, #7]
 80071b2:	4a09      	ldr	r2, [pc, #36]	; (80071d8 <disk_initialize+0x48>)
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	79fa      	ldrb	r2, [r7, #7]
 80071be:	4906      	ldr	r1, [pc, #24]	; (80071d8 <disk_initialize+0x48>)
 80071c0:	440a      	add	r2, r1
 80071c2:	7a12      	ldrb	r2, [r2, #8]
 80071c4:	4610      	mov	r0, r2
 80071c6:	4798      	blx	r3
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	2001767c 	.word	0x2001767c

080071dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80071dc:	b590      	push	{r4, r7, lr}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
 80071e6:	603b      	str	r3, [r7, #0]
 80071e8:	4603      	mov	r3, r0
 80071ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
 80071ee:	4a0a      	ldr	r2, [pc, #40]	; (8007218 <disk_read+0x3c>)
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	689c      	ldr	r4, [r3, #8]
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	4a07      	ldr	r2, [pc, #28]	; (8007218 <disk_read+0x3c>)
 80071fc:	4413      	add	r3, r2
 80071fe:	7a18      	ldrb	r0, [r3, #8]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	68b9      	ldr	r1, [r7, #8]
 8007206:	47a0      	blx	r4
 8007208:	4603      	mov	r3, r0
 800720a:	75fb      	strb	r3, [r7, #23]
  return res;
 800720c:	7dfb      	ldrb	r3, [r7, #23]
}
 800720e:	4618      	mov	r0, r3
 8007210:	371c      	adds	r7, #28
 8007212:	46bd      	mov	sp, r7
 8007214:	bd90      	pop	{r4, r7, pc}
 8007216:	bf00      	nop
 8007218:	2001767c 	.word	0x2001767c

0800721c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800721c:	b590      	push	{r4, r7, lr}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	607a      	str	r2, [r7, #4]
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	4603      	mov	r3, r0
 800722a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800722c:	7bfb      	ldrb	r3, [r7, #15]
 800722e:	4a0a      	ldr	r2, [pc, #40]	; (8007258 <disk_write+0x3c>)
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	68dc      	ldr	r4, [r3, #12]
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	4a07      	ldr	r2, [pc, #28]	; (8007258 <disk_write+0x3c>)
 800723c:	4413      	add	r3, r2
 800723e:	7a18      	ldrb	r0, [r3, #8]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	68b9      	ldr	r1, [r7, #8]
 8007246:	47a0      	blx	r4
 8007248:	4603      	mov	r3, r0
 800724a:	75fb      	strb	r3, [r7, #23]
  return res;
 800724c:	7dfb      	ldrb	r3, [r7, #23]
}
 800724e:	4618      	mov	r0, r3
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	bd90      	pop	{r4, r7, pc}
 8007256:	bf00      	nop
 8007258:	2001767c 	.word	0x2001767c

0800725c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	603a      	str	r2, [r7, #0]
 8007266:	71fb      	strb	r3, [r7, #7]
 8007268:	460b      	mov	r3, r1
 800726a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800726c:	79fb      	ldrb	r3, [r7, #7]
 800726e:	4a09      	ldr	r2, [pc, #36]	; (8007294 <disk_ioctl+0x38>)
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	79fa      	ldrb	r2, [r7, #7]
 800727a:	4906      	ldr	r1, [pc, #24]	; (8007294 <disk_ioctl+0x38>)
 800727c:	440a      	add	r2, r1
 800727e:	7a10      	ldrb	r0, [r2, #8]
 8007280:	79b9      	ldrb	r1, [r7, #6]
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	4798      	blx	r3
 8007286:	4603      	mov	r3, r0
 8007288:	73fb      	strb	r3, [r7, #15]
  return res;
 800728a:	7bfb      	ldrb	r3, [r7, #15]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	2001767c 	.word	0x2001767c

08007298 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3301      	adds	r3, #1
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80072a8:	89fb      	ldrh	r3, [r7, #14]
 80072aa:	021b      	lsls	r3, r3, #8
 80072ac:	b21a      	sxth	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	b21b      	sxth	r3, r3
 80072b4:	4313      	orrs	r3, r2
 80072b6:	b21b      	sxth	r3, r3
 80072b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80072ba:	89fb      	ldrh	r3, [r7, #14]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3303      	adds	r3, #3
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	021b      	lsls	r3, r3, #8
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	3202      	adds	r2, #2
 80072e0:	7812      	ldrb	r2, [r2, #0]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	021b      	lsls	r3, r3, #8
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	3201      	adds	r2, #1
 80072ee:	7812      	ldrb	r2, [r2, #0]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	021b      	lsls	r3, r3, #8
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	7812      	ldrb	r2, [r2, #0]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]
	return rv;
 8007300:	68fb      	ldr	r3, [r7, #12]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800730e:	b480      	push	{r7}
 8007310:	b083      	sub	sp, #12
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	460b      	mov	r3, r1
 8007318:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	607a      	str	r2, [r7, #4]
 8007320:	887a      	ldrh	r2, [r7, #2]
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	701a      	strb	r2, [r3, #0]
 8007326:	887b      	ldrh	r3, [r7, #2]
 8007328:	0a1b      	lsrs	r3, r3, #8
 800732a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	607a      	str	r2, [r7, #4]
 8007332:	887a      	ldrh	r2, [r7, #2]
 8007334:	b2d2      	uxtb	r2, r2
 8007336:	701a      	strb	r2, [r3, #0]
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	607a      	str	r2, [r7, #4]
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	b2d2      	uxtb	r2, r2
 8007358:	701a      	strb	r2, [r3, #0]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	0a1b      	lsrs	r3, r3, #8
 800735e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	607a      	str	r2, [r7, #4]
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	b2d2      	uxtb	r2, r2
 800736a:	701a      	strb	r2, [r3, #0]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	0a1b      	lsrs	r3, r3, #8
 8007370:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	701a      	strb	r2, [r3, #0]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	0a1b      	lsrs	r3, r3, #8
 8007382:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	607a      	str	r2, [r7, #4]
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	b2d2      	uxtb	r2, r2
 800738e:	701a      	strb	r2, [r3, #0]
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00d      	beq.n	80073d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	1c53      	adds	r3, r2, #1
 80073ba:	613b      	str	r3, [r7, #16]
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	1c59      	adds	r1, r3, #1
 80073c0:	6179      	str	r1, [r7, #20]
 80073c2:	7812      	ldrb	r2, [r2, #0]
 80073c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	607b      	str	r3, [r7, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1f1      	bne.n	80073b6 <mem_cpy+0x1a>
	}
}
 80073d2:	bf00      	nop
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80073de:	b480      	push	{r7}
 80073e0:	b087      	sub	sp, #28
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	60f8      	str	r0, [r7, #12]
 80073e6:	60b9      	str	r1, [r7, #8]
 80073e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	617a      	str	r2, [r7, #20]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	b2d2      	uxtb	r2, r2
 80073f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	607b      	str	r3, [r7, #4]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1f3      	bne.n	80073ee <mem_set+0x10>
}
 8007406:	bf00      	nop
 8007408:	bf00      	nop
 800740a:	371c      	adds	r7, #28
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007414:	b480      	push	{r7}
 8007416:	b089      	sub	sp, #36	; 0x24
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	61fb      	str	r3, [r7, #28]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007428:	2300      	movs	r3, #0
 800742a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	61fa      	str	r2, [r7, #28]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	4619      	mov	r1, r3
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	61ba      	str	r2, [r7, #24]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	1acb      	subs	r3, r1, r3
 8007440:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	3b01      	subs	r3, #1
 8007446:	607b      	str	r3, [r7, #4]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <mem_cmp+0x40>
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0eb      	beq.n	800742c <mem_cmp+0x18>

	return r;
 8007454:	697b      	ldr	r3, [r7, #20]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3724      	adds	r7, #36	; 0x24
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800746c:	e002      	b.n	8007474 <chk_chr+0x12>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	3301      	adds	r3, #1
 8007472:	607b      	str	r3, [r7, #4]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d005      	beq.n	8007488 <chk_chr+0x26>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	461a      	mov	r2, r3
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	4293      	cmp	r3, r2
 8007486:	d1f2      	bne.n	800746e <chk_chr+0xc>
	return *str;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	781b      	ldrb	r3, [r3, #0]
}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80074a2:	2300      	movs	r3, #0
 80074a4:	60bb      	str	r3, [r7, #8]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	60fb      	str	r3, [r7, #12]
 80074aa:	e029      	b.n	8007500 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80074ac:	4a27      	ldr	r2, [pc, #156]	; (800754c <chk_lock+0xb4>)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	011b      	lsls	r3, r3, #4
 80074b2:	4413      	add	r3, r2
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d01d      	beq.n	80074f6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80074ba:	4a24      	ldr	r2, [pc, #144]	; (800754c <chk_lock+0xb4>)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	4413      	add	r3, r2
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d116      	bne.n	80074fa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80074cc:	4a1f      	ldr	r2, [pc, #124]	; (800754c <chk_lock+0xb4>)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	011b      	lsls	r3, r3, #4
 80074d2:	4413      	add	r3, r2
 80074d4:	3304      	adds	r3, #4
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80074dc:	429a      	cmp	r2, r3
 80074de:	d10c      	bne.n	80074fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80074e0:	4a1a      	ldr	r2, [pc, #104]	; (800754c <chk_lock+0xb4>)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	011b      	lsls	r3, r3, #4
 80074e6:	4413      	add	r3, r2
 80074e8:	3308      	adds	r3, #8
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d102      	bne.n	80074fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80074f4:	e007      	b.n	8007506 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80074f6:	2301      	movs	r3, #1
 80074f8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3301      	adds	r3, #1
 80074fe:	60fb      	str	r3, [r7, #12]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d9d2      	bls.n	80074ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b02      	cmp	r3, #2
 800750a:	d109      	bne.n	8007520 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d102      	bne.n	8007518 <chk_lock+0x80>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b02      	cmp	r3, #2
 8007516:	d101      	bne.n	800751c <chk_lock+0x84>
 8007518:	2300      	movs	r3, #0
 800751a:	e010      	b.n	800753e <chk_lock+0xa6>
 800751c:	2312      	movs	r3, #18
 800751e:	e00e      	b.n	800753e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d108      	bne.n	8007538 <chk_lock+0xa0>
 8007526:	4a09      	ldr	r2, [pc, #36]	; (800754c <chk_lock+0xb4>)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	011b      	lsls	r3, r3, #4
 800752c:	4413      	add	r3, r2
 800752e:	330c      	adds	r3, #12
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007536:	d101      	bne.n	800753c <chk_lock+0xa4>
 8007538:	2310      	movs	r3, #16
 800753a:	e000      	b.n	800753e <chk_lock+0xa6>
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	2001745c 	.word	0x2001745c

08007550 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007556:	2300      	movs	r3, #0
 8007558:	607b      	str	r3, [r7, #4]
 800755a:	e002      	b.n	8007562 <enq_lock+0x12>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3301      	adds	r3, #1
 8007560:	607b      	str	r3, [r7, #4]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d806      	bhi.n	8007576 <enq_lock+0x26>
 8007568:	4a09      	ldr	r2, [pc, #36]	; (8007590 <enq_lock+0x40>)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	011b      	lsls	r3, r3, #4
 800756e:	4413      	add	r3, r2
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1f2      	bne.n	800755c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b02      	cmp	r3, #2
 800757a:	bf14      	ite	ne
 800757c:	2301      	movne	r3, #1
 800757e:	2300      	moveq	r3, #0
 8007580:	b2db      	uxtb	r3, r3
}
 8007582:	4618      	mov	r0, r3
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	2001745c 	.word	0x2001745c

08007594 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	e01f      	b.n	80075e4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80075a4:	4a41      	ldr	r2, [pc, #260]	; (80076ac <inc_lock+0x118>)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	011b      	lsls	r3, r3, #4
 80075aa:	4413      	add	r3, r2
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d113      	bne.n	80075de <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80075b6:	4a3d      	ldr	r2, [pc, #244]	; (80076ac <inc_lock+0x118>)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	011b      	lsls	r3, r3, #4
 80075bc:	4413      	add	r3, r2
 80075be:	3304      	adds	r3, #4
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d109      	bne.n	80075de <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80075ca:	4a38      	ldr	r2, [pc, #224]	; (80076ac <inc_lock+0x118>)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	011b      	lsls	r3, r3, #4
 80075d0:	4413      	add	r3, r2
 80075d2:	3308      	adds	r3, #8
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80075da:	429a      	cmp	r2, r3
 80075dc:	d006      	beq.n	80075ec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3301      	adds	r3, #1
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d9dc      	bls.n	80075a4 <inc_lock+0x10>
 80075ea:	e000      	b.n	80075ee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80075ec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d132      	bne.n	800765a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80075f4:	2300      	movs	r3, #0
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	e002      	b.n	8007600 <inc_lock+0x6c>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3301      	adds	r3, #1
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d806      	bhi.n	8007614 <inc_lock+0x80>
 8007606:	4a29      	ldr	r2, [pc, #164]	; (80076ac <inc_lock+0x118>)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	011b      	lsls	r3, r3, #4
 800760c:	4413      	add	r3, r2
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1f2      	bne.n	80075fa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2b02      	cmp	r3, #2
 8007618:	d101      	bne.n	800761e <inc_lock+0x8a>
 800761a:	2300      	movs	r3, #0
 800761c:	e040      	b.n	80076a0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	4922      	ldr	r1, [pc, #136]	; (80076ac <inc_lock+0x118>)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	011b      	lsls	r3, r3, #4
 8007628:	440b      	add	r3, r1
 800762a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	491e      	ldr	r1, [pc, #120]	; (80076ac <inc_lock+0x118>)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	011b      	lsls	r3, r3, #4
 8007636:	440b      	add	r3, r1
 8007638:	3304      	adds	r3, #4
 800763a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	695a      	ldr	r2, [r3, #20]
 8007640:	491a      	ldr	r1, [pc, #104]	; (80076ac <inc_lock+0x118>)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	011b      	lsls	r3, r3, #4
 8007646:	440b      	add	r3, r1
 8007648:	3308      	adds	r3, #8
 800764a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800764c:	4a17      	ldr	r2, [pc, #92]	; (80076ac <inc_lock+0x118>)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	011b      	lsls	r3, r3, #4
 8007652:	4413      	add	r3, r2
 8007654:	330c      	adds	r3, #12
 8007656:	2200      	movs	r2, #0
 8007658:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d009      	beq.n	8007674 <inc_lock+0xe0>
 8007660:	4a12      	ldr	r2, [pc, #72]	; (80076ac <inc_lock+0x118>)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	011b      	lsls	r3, r3, #4
 8007666:	4413      	add	r3, r2
 8007668:	330c      	adds	r3, #12
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d001      	beq.n	8007674 <inc_lock+0xe0>
 8007670:	2300      	movs	r3, #0
 8007672:	e015      	b.n	80076a0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d108      	bne.n	800768c <inc_lock+0xf8>
 800767a:	4a0c      	ldr	r2, [pc, #48]	; (80076ac <inc_lock+0x118>)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	011b      	lsls	r3, r3, #4
 8007680:	4413      	add	r3, r2
 8007682:	330c      	adds	r3, #12
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	3301      	adds	r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	e001      	b.n	8007690 <inc_lock+0xfc>
 800768c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007690:	4906      	ldr	r1, [pc, #24]	; (80076ac <inc_lock+0x118>)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	011b      	lsls	r3, r3, #4
 8007696:	440b      	add	r3, r1
 8007698:	330c      	adds	r3, #12
 800769a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	3301      	adds	r3, #1
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	2001745c 	.word	0x2001745c

080076b0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	607b      	str	r3, [r7, #4]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d825      	bhi.n	8007710 <dec_lock+0x60>
		n = Files[i].ctr;
 80076c4:	4a17      	ldr	r2, [pc, #92]	; (8007724 <dec_lock+0x74>)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	011b      	lsls	r3, r3, #4
 80076ca:	4413      	add	r3, r2
 80076cc:	330c      	adds	r3, #12
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80076d2:	89fb      	ldrh	r3, [r7, #14]
 80076d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076d8:	d101      	bne.n	80076de <dec_lock+0x2e>
 80076da:	2300      	movs	r3, #0
 80076dc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80076de:	89fb      	ldrh	r3, [r7, #14]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d002      	beq.n	80076ea <dec_lock+0x3a>
 80076e4:	89fb      	ldrh	r3, [r7, #14]
 80076e6:	3b01      	subs	r3, #1
 80076e8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80076ea:	4a0e      	ldr	r2, [pc, #56]	; (8007724 <dec_lock+0x74>)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	011b      	lsls	r3, r3, #4
 80076f0:	4413      	add	r3, r2
 80076f2:	330c      	adds	r3, #12
 80076f4:	89fa      	ldrh	r2, [r7, #14]
 80076f6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80076f8:	89fb      	ldrh	r3, [r7, #14]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d105      	bne.n	800770a <dec_lock+0x5a>
 80076fe:	4a09      	ldr	r2, [pc, #36]	; (8007724 <dec_lock+0x74>)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	011b      	lsls	r3, r3, #4
 8007704:	4413      	add	r3, r2
 8007706:	2200      	movs	r2, #0
 8007708:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	737b      	strb	r3, [r7, #13]
 800770e:	e001      	b.n	8007714 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007710:	2302      	movs	r3, #2
 8007712:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007714:	7b7b      	ldrb	r3, [r7, #13]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	2001745c 	.word	0x2001745c

08007728 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007730:	2300      	movs	r3, #0
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	e010      	b.n	8007758 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007736:	4a0d      	ldr	r2, [pc, #52]	; (800776c <clear_lock+0x44>)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	011b      	lsls	r3, r3, #4
 800773c:	4413      	add	r3, r2
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	429a      	cmp	r2, r3
 8007744:	d105      	bne.n	8007752 <clear_lock+0x2a>
 8007746:	4a09      	ldr	r2, [pc, #36]	; (800776c <clear_lock+0x44>)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	011b      	lsls	r3, r3, #4
 800774c:	4413      	add	r3, r2
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3301      	adds	r3, #1
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d9eb      	bls.n	8007736 <clear_lock+0xe>
	}
}
 800775e:	bf00      	nop
 8007760:	bf00      	nop
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	2001745c 	.word	0x2001745c

08007770 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	78db      	ldrb	r3, [r3, #3]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d034      	beq.n	80077ee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007788:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	7858      	ldrb	r0, [r3, #1]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007794:	2301      	movs	r3, #1
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	f7ff fd40 	bl	800721c <disk_write>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	73fb      	strb	r3, [r7, #15]
 80077a6:	e022      	b.n	80077ee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	1ad2      	subs	r2, r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d217      	bcs.n	80077ee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	789b      	ldrb	r3, [r3, #2]
 80077c2:	613b      	str	r3, [r7, #16]
 80077c4:	e010      	b.n	80077e8 <sync_window+0x78>
					wsect += fs->fsize;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	4413      	add	r3, r2
 80077ce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	7858      	ldrb	r0, [r3, #1]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80077da:	2301      	movs	r3, #1
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	f7ff fd1d 	bl	800721c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	613b      	str	r3, [r7, #16]
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d8eb      	bhi.n	80077c6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3718      	adds	r7, #24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	429a      	cmp	r2, r3
 800780e:	d01b      	beq.n	8007848 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7ff ffad 	bl	8007770 <sync_window>
 8007816:	4603      	mov	r3, r0
 8007818:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d113      	bne.n	8007848 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	7858      	ldrb	r0, [r3, #1]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800782a:	2301      	movs	r3, #1
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	f7ff fcd5 	bl	80071dc <disk_read>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d004      	beq.n	8007842 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800783c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800783e:	2301      	movs	r3, #1
 8007840:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	683a      	ldr	r2, [r7, #0]
 8007846:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8007848:	7bfb      	ldrb	r3, [r7, #15]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
	...

08007854 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7ff ff87 	bl	8007770 <sync_window>
 8007862:	4603      	mov	r3, r0
 8007864:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007866:	7bfb      	ldrb	r3, [r7, #15]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d159      	bne.n	8007920 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b03      	cmp	r3, #3
 8007872:	d149      	bne.n	8007908 <sync_fs+0xb4>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	791b      	ldrb	r3, [r3, #4]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d145      	bne.n	8007908 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	899b      	ldrh	r3, [r3, #12]
 8007886:	461a      	mov	r2, r3
 8007888:	2100      	movs	r1, #0
 800788a:	f7ff fda8 	bl	80073de <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3338      	adds	r3, #56	; 0x38
 8007892:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007896:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff fd37 	bl	800730e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3338      	adds	r3, #56	; 0x38
 80078a4:	4921      	ldr	r1, [pc, #132]	; (800792c <sync_fs+0xd8>)
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff fd4c 	bl	8007344 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	3338      	adds	r3, #56	; 0x38
 80078b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80078b4:	491e      	ldr	r1, [pc, #120]	; (8007930 <sync_fs+0xdc>)
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7ff fd44 	bl	8007344 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	3338      	adds	r3, #56	; 0x38
 80078c0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	4619      	mov	r1, r3
 80078ca:	4610      	mov	r0, r2
 80078cc:	f7ff fd3a 	bl	8007344 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	3338      	adds	r3, #56	; 0x38
 80078d4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	4619      	mov	r1, r3
 80078de:	4610      	mov	r0, r2
 80078e0:	f7ff fd30 	bl	8007344 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	7858      	ldrb	r0, [r3, #1]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078fc:	2301      	movs	r3, #1
 80078fe:	f7ff fc8d 	bl	800721c <disk_write>
			fs->fsi_flag = 0;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	785b      	ldrb	r3, [r3, #1]
 800790c:	2200      	movs	r2, #0
 800790e:	2100      	movs	r1, #0
 8007910:	4618      	mov	r0, r3
 8007912:	f7ff fca3 	bl	800725c <disk_ioctl>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <sync_fs+0xcc>
 800791c:	2301      	movs	r3, #1
 800791e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007920:	7bfb      	ldrb	r3, [r7, #15]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	41615252 	.word	0x41615252
 8007930:	61417272 	.word	0x61417272

08007934 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	3b02      	subs	r3, #2
 8007942:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	69db      	ldr	r3, [r3, #28]
 8007948:	3b02      	subs	r3, #2
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	429a      	cmp	r2, r3
 800794e:	d301      	bcc.n	8007954 <clust2sect+0x20>
 8007950:	2300      	movs	r3, #0
 8007952:	e008      	b.n	8007966 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	895b      	ldrh	r3, [r3, #10]
 8007958:	461a      	mov	r2, r3
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	fb03 f202 	mul.w	r2, r3, r2
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007964:	4413      	add	r3, r2
}
 8007966:	4618      	mov	r0, r3
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b086      	sub	sp, #24
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d904      	bls.n	8007992 <get_fat+0x20>
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	69db      	ldr	r3, [r3, #28]
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	429a      	cmp	r2, r3
 8007990:	d302      	bcc.n	8007998 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007992:	2301      	movs	r3, #1
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	e0bb      	b.n	8007b10 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800799c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	f000 8083 	beq.w	8007aae <get_fat+0x13c>
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	f300 80a7 	bgt.w	8007afc <get_fat+0x18a>
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d002      	beq.n	80079b8 <get_fat+0x46>
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d056      	beq.n	8007a64 <get_fat+0xf2>
 80079b6:	e0a1      	b.n	8007afc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	085b      	lsrs	r3, r3, #1
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	4413      	add	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	899b      	ldrh	r3, [r3, #12]
 80079ce:	4619      	mov	r1, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80079d6:	4413      	add	r3, r2
 80079d8:	4619      	mov	r1, r3
 80079da:	6938      	ldr	r0, [r7, #16]
 80079dc:	f7ff ff0c 	bl	80077f8 <move_window>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f040 808d 	bne.w	8007b02 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	60fa      	str	r2, [r7, #12]
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	8992      	ldrh	r2, [r2, #12]
 80079f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80079f6:	fb01 f202 	mul.w	r2, r1, r2
 80079fa:	1a9b      	subs	r3, r3, r2
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	4413      	add	r3, r2
 8007a00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a04:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	899b      	ldrh	r3, [r3, #12]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a16:	4413      	add	r3, r2
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6938      	ldr	r0, [r7, #16]
 8007a1c:	f7ff feec 	bl	80077f8 <move_window>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d16f      	bne.n	8007b06 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	899b      	ldrh	r3, [r3, #12]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a32:	fb01 f202 	mul.w	r2, r1, r2
 8007a36:	1a9b      	subs	r3, r3, r2
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a40:	021b      	lsls	r3, r3, #8
 8007a42:	461a      	mov	r2, r3
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <get_fat+0xe8>
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	091b      	lsrs	r3, r3, #4
 8007a58:	e002      	b.n	8007a60 <get_fat+0xee>
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a60:	617b      	str	r3, [r7, #20]
			break;
 8007a62:	e055      	b.n	8007b10 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	899b      	ldrh	r3, [r3, #12]
 8007a6c:	085b      	lsrs	r3, r3, #1
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	4619      	mov	r1, r3
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a78:	4413      	add	r3, r2
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6938      	ldr	r0, [r7, #16]
 8007a7e:	f7ff febb 	bl	80077f8 <move_window>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d140      	bne.n	8007b0a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	8992      	ldrh	r2, [r2, #12]
 8007a96:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a9a:	fb00 f202 	mul.w	r2, r0, r2
 8007a9e:	1a9b      	subs	r3, r3, r2
 8007aa0:	440b      	add	r3, r1
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7ff fbf8 	bl	8007298 <ld_word>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	617b      	str	r3, [r7, #20]
			break;
 8007aac:	e030      	b.n	8007b10 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	899b      	ldrh	r3, [r3, #12]
 8007ab6:	089b      	lsrs	r3, r3, #2
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	4619      	mov	r1, r3
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ac2:	4413      	add	r3, r2
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6938      	ldr	r0, [r7, #16]
 8007ac8:	f7ff fe96 	bl	80077f8 <move_window>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d11d      	bne.n	8007b0e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	8992      	ldrh	r2, [r2, #12]
 8007ae0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ae4:	fb00 f202 	mul.w	r2, r0, r2
 8007ae8:	1a9b      	subs	r3, r3, r2
 8007aea:	440b      	add	r3, r1
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7ff fbeb 	bl	80072c8 <ld_dword>
 8007af2:	4603      	mov	r3, r0
 8007af4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007af8:	617b      	str	r3, [r7, #20]
			break;
 8007afa:	e009      	b.n	8007b10 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007afc:	2301      	movs	r3, #1
 8007afe:	617b      	str	r3, [r7, #20]
 8007b00:	e006      	b.n	8007b10 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b02:	bf00      	nop
 8007b04:	e004      	b.n	8007b10 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b06:	bf00      	nop
 8007b08:	e002      	b.n	8007b10 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007b0a:	bf00      	nop
 8007b0c:	e000      	b.n	8007b10 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007b0e:	bf00      	nop
		}
	}

	return val;
 8007b10:	697b      	ldr	r3, [r7, #20]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007b1a:	b590      	push	{r4, r7, lr}
 8007b1c:	b089      	sub	sp, #36	; 0x24
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	60f8      	str	r0, [r7, #12]
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007b26:	2302      	movs	r3, #2
 8007b28:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	f240 8102 	bls.w	8007d36 <put_fat+0x21c>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	f080 80fc 	bcs.w	8007d36 <put_fat+0x21c>
		switch (fs->fs_type) {
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	f000 80b6 	beq.w	8007cb4 <put_fat+0x19a>
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	f300 80fd 	bgt.w	8007d48 <put_fat+0x22e>
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d003      	beq.n	8007b5a <put_fat+0x40>
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	f000 8083 	beq.w	8007c5e <put_fat+0x144>
 8007b58:	e0f6      	b.n	8007d48 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	61bb      	str	r3, [r7, #24]
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	085b      	lsrs	r3, r3, #1
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	4413      	add	r3, r2
 8007b66:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	899b      	ldrh	r3, [r3, #12]
 8007b70:	4619      	mov	r1, r3
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b78:	4413      	add	r3, r2
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f7ff fe3b 	bl	80077f8 <move_window>
 8007b82:	4603      	mov	r3, r0
 8007b84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b86:	7ffb      	ldrb	r3, [r7, #31]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f040 80d6 	bne.w	8007d3a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	1c5a      	adds	r2, r3, #1
 8007b98:	61ba      	str	r2, [r7, #24]
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	8992      	ldrh	r2, [r2, #12]
 8007b9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ba2:	fb00 f202 	mul.w	r2, r0, r2
 8007ba6:	1a9b      	subs	r3, r3, r2
 8007ba8:	440b      	add	r3, r1
 8007baa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00d      	beq.n	8007bd2 <put_fat+0xb8>
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	b25b      	sxtb	r3, r3
 8007bbc:	f003 030f 	and.w	r3, r3, #15
 8007bc0:	b25a      	sxtb	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	b25b      	sxtb	r3, r3
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	b25b      	sxtb	r3, r3
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	e001      	b.n	8007bd6 <put_fat+0xbc>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	899b      	ldrh	r3, [r3, #12]
 8007be8:	4619      	mov	r1, r3
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bf0:	4413      	add	r3, r2
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f7ff fdff 	bl	80077f8 <move_window>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007bfe:	7ffb      	ldrb	r3, [r7, #31]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f040 809c 	bne.w	8007d3e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	899b      	ldrh	r3, [r3, #12]
 8007c10:	461a      	mov	r2, r3
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c18:	fb00 f202 	mul.w	r2, r0, r2
 8007c1c:	1a9b      	subs	r3, r3, r2
 8007c1e:	440b      	add	r3, r1
 8007c20:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <put_fat+0x11a>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	091b      	lsrs	r3, r3, #4
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	e00e      	b.n	8007c52 <put_fat+0x138>
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	b25b      	sxtb	r3, r3
 8007c3a:	f023 030f 	bic.w	r3, r3, #15
 8007c3e:	b25a      	sxtb	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	0a1b      	lsrs	r3, r3, #8
 8007c44:	b25b      	sxtb	r3, r3
 8007c46:	f003 030f 	and.w	r3, r3, #15
 8007c4a:	b25b      	sxtb	r3, r3
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	b25b      	sxtb	r3, r3
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	70da      	strb	r2, [r3, #3]
			break;
 8007c5c:	e074      	b.n	8007d48 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	899b      	ldrh	r3, [r3, #12]
 8007c66:	085b      	lsrs	r3, r3, #1
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c72:	4413      	add	r3, r2
 8007c74:	4619      	mov	r1, r3
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f7ff fdbe 	bl	80077f8 <move_window>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c80:	7ffb      	ldrb	r3, [r7, #31]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d15d      	bne.n	8007d42 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	005b      	lsls	r3, r3, #1
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	8992      	ldrh	r2, [r2, #12]
 8007c94:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c98:	fb00 f202 	mul.w	r2, r0, r2
 8007c9c:	1a9b      	subs	r3, r3, r2
 8007c9e:	440b      	add	r3, r1
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	b292      	uxth	r2, r2
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff fb31 	bl	800730e <st_word>
			fs->wflag = 1;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	70da      	strb	r2, [r3, #3]
			break;
 8007cb2:	e049      	b.n	8007d48 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	899b      	ldrh	r3, [r3, #12]
 8007cbc:	089b      	lsrs	r3, r3, #2
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cc8:	4413      	add	r3, r2
 8007cca:	4619      	mov	r1, r3
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f7ff fd93 	bl	80077f8 <move_window>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007cd6:	7ffb      	ldrb	r3, [r7, #31]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d134      	bne.n	8007d46 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	8992      	ldrh	r2, [r2, #12]
 8007cf0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007cf4:	fb00 f202 	mul.w	r2, r0, r2
 8007cf8:	1a9b      	subs	r3, r3, r2
 8007cfa:	440b      	add	r3, r1
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7ff fae3 	bl	80072c8 <ld_dword>
 8007d02:	4603      	mov	r3, r0
 8007d04:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007d08:	4323      	orrs	r3, r4
 8007d0a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	8992      	ldrh	r2, [r2, #12]
 8007d1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d1e:	fb00 f202 	mul.w	r2, r0, r2
 8007d22:	1a9b      	subs	r3, r3, r2
 8007d24:	440b      	add	r3, r1
 8007d26:	6879      	ldr	r1, [r7, #4]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7ff fb0b 	bl	8007344 <st_dword>
			fs->wflag = 1;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2201      	movs	r2, #1
 8007d32:	70da      	strb	r2, [r3, #3]
			break;
 8007d34:	e008      	b.n	8007d48 <put_fat+0x22e>
		}
	}
 8007d36:	bf00      	nop
 8007d38:	e006      	b.n	8007d48 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007d3a:	bf00      	nop
 8007d3c:	e004      	b.n	8007d48 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007d3e:	bf00      	nop
 8007d40:	e002      	b.n	8007d48 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007d42:	bf00      	nop
 8007d44:	e000      	b.n	8007d48 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007d46:	bf00      	nop
	return res;
 8007d48:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3724      	adds	r7, #36	; 0x24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd90      	pop	{r4, r7, pc}

08007d52 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b088      	sub	sp, #32
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d904      	bls.n	8007d78 <remove_chain+0x26>
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	69db      	ldr	r3, [r3, #28]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d301      	bcc.n	8007d7c <remove_chain+0x2a>
 8007d78:	2302      	movs	r3, #2
 8007d7a:	e04b      	b.n	8007e14 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00c      	beq.n	8007d9c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007d82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d86:	6879      	ldr	r1, [r7, #4]
 8007d88:	69b8      	ldr	r0, [r7, #24]
 8007d8a:	f7ff fec6 	bl	8007b1a <put_fat>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007d92:	7ffb      	ldrb	r3, [r7, #31]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <remove_chain+0x4a>
 8007d98:	7ffb      	ldrb	r3, [r7, #31]
 8007d9a:	e03b      	b.n	8007e14 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007d9c:	68b9      	ldr	r1, [r7, #8]
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f7ff fde7 	bl	8007972 <get_fat>
 8007da4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d031      	beq.n	8007e10 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d101      	bne.n	8007db6 <remove_chain+0x64>
 8007db2:	2302      	movs	r3, #2
 8007db4:	e02e      	b.n	8007e14 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dbc:	d101      	bne.n	8007dc2 <remove_chain+0x70>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e028      	b.n	8007e14 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	68b9      	ldr	r1, [r7, #8]
 8007dc6:	69b8      	ldr	r0, [r7, #24]
 8007dc8:	f7ff fea7 	bl	8007b1a <put_fat>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007dd0:	7ffb      	ldrb	r3, [r7, #31]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <remove_chain+0x88>
 8007dd6:	7ffb      	ldrb	r3, [r7, #31]
 8007dd8:	e01c      	b.n	8007e14 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	699a      	ldr	r2, [r3, #24]
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	69db      	ldr	r3, [r3, #28]
 8007de2:	3b02      	subs	r3, #2
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d20b      	bcs.n	8007e00 <remove_chain+0xae>
			fs->free_clst++;
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	1c5a      	adds	r2, r3, #1
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	791b      	ldrb	r3, [r3, #4]
 8007df6:	f043 0301 	orr.w	r3, r3, #1
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d3c6      	bcc.n	8007d9c <remove_chain+0x4a>
 8007e0e:	e000      	b.n	8007e12 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007e10:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3720      	adds	r7, #32
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b088      	sub	sp, #32
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10d      	bne.n	8007e4e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d004      	beq.n	8007e48 <create_chain+0x2c>
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d31b      	bcc.n	8007e80 <create_chain+0x64>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	61bb      	str	r3, [r7, #24]
 8007e4c:	e018      	b.n	8007e80 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f7ff fd8e 	bl	8007972 <get_fat>
 8007e56:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d801      	bhi.n	8007e62 <create_chain+0x46>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e070      	b.n	8007f44 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e68:	d101      	bne.n	8007e6e <create_chain+0x52>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	e06a      	b.n	8007f44 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	69db      	ldr	r3, [r3, #28]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d201      	bcs.n	8007e7c <create_chain+0x60>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	e063      	b.n	8007f44 <create_chain+0x128>
		scl = clst;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	3301      	adds	r3, #1
 8007e88:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	69fa      	ldr	r2, [r7, #28]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d307      	bcc.n	8007ea4 <create_chain+0x88>
				ncl = 2;
 8007e94:	2302      	movs	r3, #2
 8007e96:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007e98:	69fa      	ldr	r2, [r7, #28]
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d901      	bls.n	8007ea4 <create_chain+0x88>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	e04f      	b.n	8007f44 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007ea4:	69f9      	ldr	r1, [r7, #28]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7ff fd63 	bl	8007972 <get_fat>
 8007eac:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00e      	beq.n	8007ed2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d003      	beq.n	8007ec2 <create_chain+0xa6>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ec0:	d101      	bne.n	8007ec6 <create_chain+0xaa>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	e03e      	b.n	8007f44 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007ec6:	69fa      	ldr	r2, [r7, #28]
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d1da      	bne.n	8007e84 <create_chain+0x68>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e038      	b.n	8007f44 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007ed2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ed8:	69f9      	ldr	r1, [r7, #28]
 8007eda:	6938      	ldr	r0, [r7, #16]
 8007edc:	f7ff fe1d 	bl	8007b1a <put_fat>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007ee4:	7dfb      	ldrb	r3, [r7, #23]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d109      	bne.n	8007efe <create_chain+0xe2>
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d006      	beq.n	8007efe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007ef0:	69fa      	ldr	r2, [r7, #28]
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6938      	ldr	r0, [r7, #16]
 8007ef6:	f7ff fe10 	bl	8007b1a <put_fat>
 8007efa:	4603      	mov	r3, r0
 8007efc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d116      	bne.n	8007f32 <create_chain+0x116>
		fs->last_clst = ncl;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	69fa      	ldr	r2, [r7, #28]
 8007f08:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	699a      	ldr	r2, [r3, #24]
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	3b02      	subs	r3, #2
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d804      	bhi.n	8007f22 <create_chain+0x106>
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	1e5a      	subs	r2, r3, #1
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	791b      	ldrb	r3, [r3, #4]
 8007f26:	f043 0301 	orr.w	r3, r3, #1
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	711a      	strb	r2, [r3, #4]
 8007f30:	e007      	b.n	8007f42 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007f32:	7dfb      	ldrb	r3, [r7, #23]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d102      	bne.n	8007f3e <create_chain+0x122>
 8007f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f3c:	e000      	b.n	8007f40 <create_chain+0x124>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007f42:	69fb      	ldr	r3, [r7, #28]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3720      	adds	r7, #32
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f60:	3304      	adds	r3, #4
 8007f62:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	899b      	ldrh	r3, [r3, #12]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	8952      	ldrh	r2, [r2, #10]
 8007f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f78:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	1d1a      	adds	r2, r3, #4
 8007f7e:	613a      	str	r2, [r7, #16]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <clmt_clust+0x42>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	e010      	b.n	8007fb0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d307      	bcc.n	8007fa6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	617b      	str	r3, [r7, #20]
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007fa4:	e7e9      	b.n	8007f7a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007fa6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	4413      	add	r3, r2
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	371c      	adds	r7, #28
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fd2:	d204      	bcs.n	8007fde <dir_sdi+0x22>
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	f003 031f 	and.w	r3, r3, #31
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007fde:	2302      	movs	r3, #2
 8007fe0:	e071      	b.n	80080c6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	683a      	ldr	r2, [r7, #0]
 8007fe6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d106      	bne.n	8008002 <dir_sdi+0x46>
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d902      	bls.n	8008002 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008000:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10c      	bne.n	8008022 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	095b      	lsrs	r3, r3, #5
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	8912      	ldrh	r2, [r2, #8]
 8008010:	4293      	cmp	r3, r2
 8008012:	d301      	bcc.n	8008018 <dir_sdi+0x5c>
 8008014:	2302      	movs	r3, #2
 8008016:	e056      	b.n	80080c6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	61da      	str	r2, [r3, #28]
 8008020:	e02d      	b.n	800807e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	895b      	ldrh	r3, [r3, #10]
 8008026:	461a      	mov	r2, r3
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	899b      	ldrh	r3, [r3, #12]
 800802c:	fb02 f303 	mul.w	r3, r2, r3
 8008030:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008032:	e019      	b.n	8008068 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6979      	ldr	r1, [r7, #20]
 8008038:	4618      	mov	r0, r3
 800803a:	f7ff fc9a 	bl	8007972 <get_fat>
 800803e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008046:	d101      	bne.n	800804c <dir_sdi+0x90>
 8008048:	2301      	movs	r3, #1
 800804a:	e03c      	b.n	80080c6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d904      	bls.n	800805c <dir_sdi+0xa0>
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	429a      	cmp	r2, r3
 800805a:	d301      	bcc.n	8008060 <dir_sdi+0xa4>
 800805c:	2302      	movs	r3, #2
 800805e:	e032      	b.n	80080c6 <dir_sdi+0x10a>
			ofs -= csz;
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	429a      	cmp	r2, r3
 800806e:	d2e1      	bcs.n	8008034 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008070:	6979      	ldr	r1, [r7, #20]
 8008072:	6938      	ldr	r0, [r7, #16]
 8008074:	f7ff fc5e 	bl	8007934 <clust2sect>
 8008078:	4602      	mov	r2, r0
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <dir_sdi+0xd4>
 800808c:	2302      	movs	r3, #2
 800808e:	e01a      	b.n	80080c6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	69da      	ldr	r2, [r3, #28]
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	899b      	ldrh	r3, [r3, #12]
 8008098:	4619      	mov	r1, r3
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	fbb3 f3f1 	udiv	r3, r3, r1
 80080a0:	441a      	add	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	899b      	ldrh	r3, [r3, #12]
 80080b0:	461a      	mov	r2, r3
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80080b8:	fb00 f202 	mul.w	r2, r0, r2
 80080bc:	1a9b      	subs	r3, r3, r2
 80080be:	18ca      	adds	r2, r1, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b086      	sub	sp, #24
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	3320      	adds	r3, #32
 80080e4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <dir_next+0x28>
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080f4:	d301      	bcc.n	80080fa <dir_next+0x2c>
 80080f6:	2304      	movs	r3, #4
 80080f8:	e0bb      	b.n	8008272 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	899b      	ldrh	r3, [r3, #12]
 80080fe:	461a      	mov	r2, r3
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	fbb3 f1f2 	udiv	r1, r3, r2
 8008106:	fb01 f202 	mul.w	r2, r1, r2
 800810a:	1a9b      	subs	r3, r3, r2
 800810c:	2b00      	cmp	r3, #0
 800810e:	f040 809d 	bne.w	800824c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	69db      	ldr	r3, [r3, #28]
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10b      	bne.n	800813c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	095b      	lsrs	r3, r3, #5
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	8912      	ldrh	r2, [r2, #8]
 800812c:	4293      	cmp	r3, r2
 800812e:	f0c0 808d 	bcc.w	800824c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	61da      	str	r2, [r3, #28]
 8008138:	2304      	movs	r3, #4
 800813a:	e09a      	b.n	8008272 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	899b      	ldrh	r3, [r3, #12]
 8008140:	461a      	mov	r2, r3
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	fbb3 f3f2 	udiv	r3, r3, r2
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	8952      	ldrh	r2, [r2, #10]
 800814c:	3a01      	subs	r2, #1
 800814e:	4013      	ands	r3, r2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d17b      	bne.n	800824c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	4619      	mov	r1, r3
 800815c:	4610      	mov	r0, r2
 800815e:	f7ff fc08 	bl	8007972 <get_fat>
 8008162:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d801      	bhi.n	800816e <dir_next+0xa0>
 800816a:	2302      	movs	r3, #2
 800816c:	e081      	b.n	8008272 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008174:	d101      	bne.n	800817a <dir_next+0xac>
 8008176:	2301      	movs	r3, #1
 8008178:	e07b      	b.n	8008272 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	429a      	cmp	r2, r3
 8008182:	d359      	bcc.n	8008238 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d104      	bne.n	8008194 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	61da      	str	r2, [r3, #28]
 8008190:	2304      	movs	r3, #4
 8008192:	e06e      	b.n	8008272 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	4619      	mov	r1, r3
 800819c:	4610      	mov	r0, r2
 800819e:	f7ff fe3d 	bl	8007e1c <create_chain>
 80081a2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <dir_next+0xe0>
 80081aa:	2307      	movs	r3, #7
 80081ac:	e061      	b.n	8008272 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d101      	bne.n	80081b8 <dir_next+0xea>
 80081b4:	2302      	movs	r3, #2
 80081b6:	e05c      	b.n	8008272 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081be:	d101      	bne.n	80081c4 <dir_next+0xf6>
 80081c0:	2301      	movs	r3, #1
 80081c2:	e056      	b.n	8008272 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f7ff fad3 	bl	8007770 <sync_window>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <dir_next+0x106>
 80081d0:	2301      	movs	r3, #1
 80081d2:	e04e      	b.n	8008272 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	899b      	ldrh	r3, [r3, #12]
 80081de:	461a      	mov	r2, r3
 80081e0:	2100      	movs	r1, #0
 80081e2:	f7ff f8fc 	bl	80073de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80081e6:	2300      	movs	r3, #0
 80081e8:	613b      	str	r3, [r7, #16]
 80081ea:	6979      	ldr	r1, [r7, #20]
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f7ff fba1 	bl	8007934 <clust2sect>
 80081f2:	4602      	mov	r2, r0
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	635a      	str	r2, [r3, #52]	; 0x34
 80081f8:	e012      	b.n	8008220 <dir_next+0x152>
						fs->wflag = 1;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2201      	movs	r2, #1
 80081fe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f7ff fab5 	bl	8007770 <sync_window>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <dir_next+0x142>
 800820c:	2301      	movs	r3, #1
 800820e:	e030      	b.n	8008272 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	3301      	adds	r3, #1
 8008214:	613b      	str	r3, [r7, #16]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800821a:	1c5a      	adds	r2, r3, #1
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	635a      	str	r2, [r3, #52]	; 0x34
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	895b      	ldrh	r3, [r3, #10]
 8008224:	461a      	mov	r2, r3
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	4293      	cmp	r3, r2
 800822a:	d3e6      	bcc.n	80081fa <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	1ad2      	subs	r2, r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800823e:	6979      	ldr	r1, [r7, #20]
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f7ff fb77 	bl	8007934 <clust2sect>
 8008246:	4602      	mov	r2, r0
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	899b      	ldrh	r3, [r3, #12]
 800825c:	461a      	mov	r2, r3
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	fbb3 f0f2 	udiv	r0, r3, r2
 8008264:	fb00 f202 	mul.w	r2, r0, r2
 8008268:	1a9b      	subs	r3, r3, r2
 800826a:	18ca      	adds	r2, r1, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b086      	sub	sp, #24
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800828a:	2100      	movs	r1, #0
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7ff fe95 	bl	8007fbc <dir_sdi>
 8008292:	4603      	mov	r3, r0
 8008294:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008296:	7dfb      	ldrb	r3, [r7, #23]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d12b      	bne.n	80082f4 <dir_alloc+0x7a>
		n = 0;
 800829c:	2300      	movs	r3, #0
 800829e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	4619      	mov	r1, r3
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f7ff faa6 	bl	80077f8 <move_window>
 80082ac:	4603      	mov	r3, r0
 80082ae:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80082b0:	7dfb      	ldrb	r3, [r7, #23]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d11d      	bne.n	80082f2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2be5      	cmp	r3, #229	; 0xe5
 80082be:	d004      	beq.n	80082ca <dir_alloc+0x50>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a1b      	ldr	r3, [r3, #32]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d107      	bne.n	80082da <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	3301      	adds	r3, #1
 80082ce:	613b      	str	r3, [r7, #16]
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d102      	bne.n	80082de <dir_alloc+0x64>
 80082d8:	e00c      	b.n	80082f4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80082da:	2300      	movs	r3, #0
 80082dc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80082de:	2101      	movs	r1, #1
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7ff fef4 	bl	80080ce <dir_next>
 80082e6:	4603      	mov	r3, r0
 80082e8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0d7      	beq.n	80082a0 <dir_alloc+0x26>
 80082f0:	e000      	b.n	80082f4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80082f2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	d101      	bne.n	80082fe <dir_alloc+0x84>
 80082fa:	2307      	movs	r3, #7
 80082fc:	75fb      	strb	r3, [r7, #23]
	return res;
 80082fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	331a      	adds	r3, #26
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe ffbe 	bl	8007298 <ld_word>
 800831c:	4603      	mov	r3, r0
 800831e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	2b03      	cmp	r3, #3
 8008326:	d109      	bne.n	800833c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	3314      	adds	r3, #20
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe ffb3 	bl	8007298 <ld_word>
 8008332:	4603      	mov	r3, r0
 8008334:	041b      	lsls	r3, r3, #16
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	4313      	orrs	r3, r2
 800833a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800833c:	68fb      	ldr	r3, [r7, #12]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b084      	sub	sp, #16
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	331a      	adds	r3, #26
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	b292      	uxth	r2, r2
 800835a:	4611      	mov	r1, r2
 800835c:	4618      	mov	r0, r3
 800835e:	f7fe ffd6 	bl	800730e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	2b03      	cmp	r3, #3
 8008368:	d109      	bne.n	800837e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f103 0214 	add.w	r2, r3, #20
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	0c1b      	lsrs	r3, r3, #16
 8008374:	b29b      	uxth	r3, r3
 8008376:	4619      	mov	r1, r3
 8008378:	4610      	mov	r0, r2
 800837a:	f7fe ffc8 	bl	800730e <st_word>
	}
}
 800837e:	bf00      	nop
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
	...

08008388 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008388:	b590      	push	{r4, r7, lr}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	331a      	adds	r3, #26
 8008396:	4618      	mov	r0, r3
 8008398:	f7fe ff7e 	bl	8007298 <ld_word>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <cmp_lfn+0x1e>
 80083a2:	2300      	movs	r3, #0
 80083a4:	e059      	b.n	800845a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083ae:	1e5a      	subs	r2, r3, #1
 80083b0:	4613      	mov	r3, r2
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80083bc:	2301      	movs	r3, #1
 80083be:	81fb      	strh	r3, [r7, #14]
 80083c0:	2300      	movs	r3, #0
 80083c2:	613b      	str	r3, [r7, #16]
 80083c4:	e033      	b.n	800842e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80083c6:	4a27      	ldr	r2, [pc, #156]	; (8008464 <cmp_lfn+0xdc>)
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	4413      	add	r3, r2
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	461a      	mov	r2, r3
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	4413      	add	r3, r2
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7fe ff5f 	bl	8007298 <ld_word>
 80083da:	4603      	mov	r3, r0
 80083dc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80083de:	89fb      	ldrh	r3, [r7, #14]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d01a      	beq.n	800841a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2bfe      	cmp	r3, #254	; 0xfe
 80083e8:	d812      	bhi.n	8008410 <cmp_lfn+0x88>
 80083ea:	89bb      	ldrh	r3, [r7, #12]
 80083ec:	4618      	mov	r0, r3
 80083ee:	f001 fd41 	bl	8009e74 <ff_wtoupper>
 80083f2:	4603      	mov	r3, r0
 80083f4:	461c      	mov	r4, r3
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	1c5a      	adds	r2, r3, #1
 80083fa:	617a      	str	r2, [r7, #20]
 80083fc:	005b      	lsls	r3, r3, #1
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	4413      	add	r3, r2
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	4618      	mov	r0, r3
 8008406:	f001 fd35 	bl	8009e74 <ff_wtoupper>
 800840a:	4603      	mov	r3, r0
 800840c:	429c      	cmp	r4, r3
 800840e:	d001      	beq.n	8008414 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008410:	2300      	movs	r3, #0
 8008412:	e022      	b.n	800845a <cmp_lfn+0xd2>
			}
			wc = uc;
 8008414:	89bb      	ldrh	r3, [r7, #12]
 8008416:	81fb      	strh	r3, [r7, #14]
 8008418:	e006      	b.n	8008428 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800841a:	89bb      	ldrh	r3, [r7, #12]
 800841c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008420:	4293      	cmp	r3, r2
 8008422:	d001      	beq.n	8008428 <cmp_lfn+0xa0>
 8008424:	2300      	movs	r3, #0
 8008426:	e018      	b.n	800845a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	3301      	adds	r3, #1
 800842c:	613b      	str	r3, [r7, #16]
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2b0c      	cmp	r3, #12
 8008432:	d9c8      	bls.n	80083c6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00b      	beq.n	8008458 <cmp_lfn+0xd0>
 8008440:	89fb      	ldrh	r3, [r7, #14]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d008      	beq.n	8008458 <cmp_lfn+0xd0>
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	005b      	lsls	r3, r3, #1
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	4413      	add	r3, r2
 800844e:	881b      	ldrh	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d001      	beq.n	8008458 <cmp_lfn+0xd0>
 8008454:	2300      	movs	r3, #0
 8008456:	e000      	b.n	800845a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008458:	2301      	movs	r3, #1
}
 800845a:	4618      	mov	r0, r3
 800845c:	371c      	adds	r7, #28
 800845e:	46bd      	mov	sp, r7
 8008460:	bd90      	pop	{r4, r7, pc}
 8008462:	bf00      	nop
 8008464:	0800c5f8 	.word	0x0800c5f8

08008468 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b088      	sub	sp, #32
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	4611      	mov	r1, r2
 8008474:	461a      	mov	r2, r3
 8008476:	460b      	mov	r3, r1
 8008478:	71fb      	strb	r3, [r7, #7]
 800847a:	4613      	mov	r3, r2
 800847c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	330d      	adds	r3, #13
 8008482:	79ba      	ldrb	r2, [r7, #6]
 8008484:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	330b      	adds	r3, #11
 800848a:	220f      	movs	r2, #15
 800848c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	330c      	adds	r3, #12
 8008492:	2200      	movs	r2, #0
 8008494:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	331a      	adds	r3, #26
 800849a:	2100      	movs	r1, #0
 800849c:	4618      	mov	r0, r3
 800849e:	f7fe ff36 	bl	800730e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80084a2:	79fb      	ldrb	r3, [r7, #7]
 80084a4:	1e5a      	subs	r2, r3, #1
 80084a6:	4613      	mov	r3, r2
 80084a8:	005b      	lsls	r3, r3, #1
 80084aa:	4413      	add	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4413      	add	r3, r2
 80084b0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80084b2:	2300      	movs	r3, #0
 80084b4:	82fb      	strh	r3, [r7, #22]
 80084b6:	2300      	movs	r3, #0
 80084b8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80084ba:	8afb      	ldrh	r3, [r7, #22]
 80084bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d007      	beq.n	80084d4 <put_lfn+0x6c>
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	61fa      	str	r2, [r7, #28]
 80084ca:	005b      	lsls	r3, r3, #1
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4413      	add	r3, r2
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80084d4:	4a17      	ldr	r2, [pc, #92]	; (8008534 <put_lfn+0xcc>)
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	4413      	add	r3, r2
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	461a      	mov	r2, r3
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	4413      	add	r3, r2
 80084e2:	8afa      	ldrh	r2, [r7, #22]
 80084e4:	4611      	mov	r1, r2
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe ff11 	bl	800730e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80084ec:	8afb      	ldrh	r3, [r7, #22]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d102      	bne.n	80084f8 <put_lfn+0x90>
 80084f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80084f6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	3301      	adds	r3, #1
 80084fc:	61bb      	str	r3, [r7, #24]
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	2b0c      	cmp	r3, #12
 8008502:	d9da      	bls.n	80084ba <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008504:	8afb      	ldrh	r3, [r7, #22]
 8008506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800850a:	4293      	cmp	r3, r2
 800850c:	d006      	beq.n	800851c <put_lfn+0xb4>
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	005b      	lsls	r3, r3, #1
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	4413      	add	r3, r2
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d103      	bne.n	8008524 <put_lfn+0xbc>
 800851c:	79fb      	ldrb	r3, [r7, #7]
 800851e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008522:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	79fa      	ldrb	r2, [r7, #7]
 8008528:	701a      	strb	r2, [r3, #0]
}
 800852a:	bf00      	nop
 800852c:	3720      	adds	r7, #32
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	0800c5f8 	.word	0x0800c5f8

08008538 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08c      	sub	sp, #48	; 0x30
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
 8008544:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008546:	220b      	movs	r2, #11
 8008548:	68b9      	ldr	r1, [r7, #8]
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f7fe ff26 	bl	800739c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2b05      	cmp	r3, #5
 8008554:	d92b      	bls.n	80085ae <gen_numname+0x76>
		sr = seq;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800855a:	e022      	b.n	80085a2 <gen_numname+0x6a>
			wc = *lfn++;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	1c9a      	adds	r2, r3, #2
 8008560:	607a      	str	r2, [r7, #4]
 8008562:	881b      	ldrh	r3, [r3, #0]
 8008564:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008566:	2300      	movs	r3, #0
 8008568:	62bb      	str	r3, [r7, #40]	; 0x28
 800856a:	e017      	b.n	800859c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	005a      	lsls	r2, r3, #1
 8008570:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	4413      	add	r3, r2
 8008578:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800857a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800857c:	085b      	lsrs	r3, r3, #1
 800857e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d005      	beq.n	8008596 <gen_numname+0x5e>
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008590:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008594:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	3301      	adds	r3, #1
 800859a:	62bb      	str	r3, [r7, #40]	; 0x28
 800859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859e:	2b0f      	cmp	r3, #15
 80085a0:	d9e4      	bls.n	800856c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1d8      	bne.n	800855c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80085ae:	2307      	movs	r3, #7
 80085b0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	f003 030f 	and.w	r3, r3, #15
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	3330      	adds	r3, #48	; 0x30
 80085be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80085c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80085c6:	2b39      	cmp	r3, #57	; 0x39
 80085c8:	d904      	bls.n	80085d4 <gen_numname+0x9c>
 80085ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80085ce:	3307      	adds	r3, #7
 80085d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	1e5a      	subs	r2, r3, #1
 80085d8:	62ba      	str	r2, [r7, #40]	; 0x28
 80085da:	3330      	adds	r3, #48	; 0x30
 80085dc:	443b      	add	r3, r7
 80085de:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80085e2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	091b      	lsrs	r3, r3, #4
 80085ea:	603b      	str	r3, [r7, #0]
	} while (seq);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1df      	bne.n	80085b2 <gen_numname+0x7a>
	ns[i] = '~';
 80085f2:	f107 0214 	add.w	r2, r7, #20
 80085f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f8:	4413      	add	r3, r2
 80085fa:	227e      	movs	r2, #126	; 0x7e
 80085fc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80085fe:	2300      	movs	r3, #0
 8008600:	627b      	str	r3, [r7, #36]	; 0x24
 8008602:	e002      	b.n	800860a <gen_numname+0xd2>
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	3301      	adds	r3, #1
 8008608:	627b      	str	r3, [r7, #36]	; 0x24
 800860a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800860c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860e:	429a      	cmp	r2, r3
 8008610:	d205      	bcs.n	800861e <gen_numname+0xe6>
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	4413      	add	r3, r2
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	2b20      	cmp	r3, #32
 800861c:	d1f2      	bne.n	8008604 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800861e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008620:	2b07      	cmp	r3, #7
 8008622:	d807      	bhi.n	8008634 <gen_numname+0xfc>
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	1c5a      	adds	r2, r3, #1
 8008628:	62ba      	str	r2, [r7, #40]	; 0x28
 800862a:	3330      	adds	r3, #48	; 0x30
 800862c:	443b      	add	r3, r7
 800862e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008632:	e000      	b.n	8008636 <gen_numname+0xfe>
 8008634:	2120      	movs	r1, #32
 8008636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008638:	1c5a      	adds	r2, r3, #1
 800863a:	627a      	str	r2, [r7, #36]	; 0x24
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	4413      	add	r3, r2
 8008640:	460a      	mov	r2, r1
 8008642:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	2b07      	cmp	r3, #7
 8008648:	d9e9      	bls.n	800861e <gen_numname+0xe6>
}
 800864a:	bf00      	nop
 800864c:	bf00      	nop
 800864e:	3730      	adds	r7, #48	; 0x30
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800865c:	2300      	movs	r3, #0
 800865e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008660:	230b      	movs	r3, #11
 8008662:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	b2da      	uxtb	r2, r3
 8008668:	0852      	lsrs	r2, r2, #1
 800866a:	01db      	lsls	r3, r3, #7
 800866c:	4313      	orrs	r3, r2
 800866e:	b2da      	uxtb	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	1c59      	adds	r1, r3, #1
 8008674:	6079      	str	r1, [r7, #4]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	4413      	add	r3, r2
 800867a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	3b01      	subs	r3, #1
 8008680:	60bb      	str	r3, [r7, #8]
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1ed      	bne.n	8008664 <sum_sfn+0x10>
	return sum;
 8008688:	7bfb      	ldrb	r3, [r7, #15]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b086      	sub	sp, #24
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80086a4:	2100      	movs	r1, #0
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7ff fc88 	bl	8007fbc <dir_sdi>
 80086ac:	4603      	mov	r3, r0
 80086ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80086b0:	7dfb      	ldrb	r3, [r7, #23]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d001      	beq.n	80086ba <dir_find+0x24>
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
 80086b8:	e0a9      	b.n	800880e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80086ba:	23ff      	movs	r3, #255	; 0xff
 80086bc:	753b      	strb	r3, [r7, #20]
 80086be:	7d3b      	ldrb	r3, [r7, #20]
 80086c0:	757b      	strb	r3, [r7, #21]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086c8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	4619      	mov	r1, r3
 80086d0:	6938      	ldr	r0, [r7, #16]
 80086d2:	f7ff f891 	bl	80077f8 <move_window>
 80086d6:	4603      	mov	r3, r0
 80086d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f040 8090 	bne.w	8008802 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80086ea:	7dbb      	ldrb	r3, [r7, #22]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d102      	bne.n	80086f6 <dir_find+0x60>
 80086f0:	2304      	movs	r3, #4
 80086f2:	75fb      	strb	r3, [r7, #23]
 80086f4:	e08a      	b.n	800880c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	330b      	adds	r3, #11
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008702:	73fb      	strb	r3, [r7, #15]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	7bfa      	ldrb	r2, [r7, #15]
 8008708:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800870a:	7dbb      	ldrb	r3, [r7, #22]
 800870c:	2be5      	cmp	r3, #229	; 0xe5
 800870e:	d007      	beq.n	8008720 <dir_find+0x8a>
 8008710:	7bfb      	ldrb	r3, [r7, #15]
 8008712:	f003 0308 	and.w	r3, r3, #8
 8008716:	2b00      	cmp	r3, #0
 8008718:	d009      	beq.n	800872e <dir_find+0x98>
 800871a:	7bfb      	ldrb	r3, [r7, #15]
 800871c:	2b0f      	cmp	r3, #15
 800871e:	d006      	beq.n	800872e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008720:	23ff      	movs	r3, #255	; 0xff
 8008722:	757b      	strb	r3, [r7, #21]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800872a:	631a      	str	r2, [r3, #48]	; 0x30
 800872c:	e05e      	b.n	80087ec <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800872e:	7bfb      	ldrb	r3, [r7, #15]
 8008730:	2b0f      	cmp	r3, #15
 8008732:	d136      	bne.n	80087a2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800873a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800873e:	2b00      	cmp	r3, #0
 8008740:	d154      	bne.n	80087ec <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008742:	7dbb      	ldrb	r3, [r7, #22]
 8008744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00d      	beq.n	8008768 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a1b      	ldr	r3, [r3, #32]
 8008750:	7b5b      	ldrb	r3, [r3, #13]
 8008752:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008754:	7dbb      	ldrb	r3, [r7, #22]
 8008756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800875a:	75bb      	strb	r3, [r7, #22]
 800875c:	7dbb      	ldrb	r3, [r7, #22]
 800875e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	695a      	ldr	r2, [r3, #20]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008768:	7dba      	ldrb	r2, [r7, #22]
 800876a:	7d7b      	ldrb	r3, [r7, #21]
 800876c:	429a      	cmp	r2, r3
 800876e:	d115      	bne.n	800879c <dir_find+0x106>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	330d      	adds	r3, #13
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	7d3a      	ldrb	r2, [r7, #20]
 800877a:	429a      	cmp	r2, r3
 800877c:	d10e      	bne.n	800879c <dir_find+0x106>
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	691a      	ldr	r2, [r3, #16]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	4619      	mov	r1, r3
 8008788:	4610      	mov	r0, r2
 800878a:	f7ff fdfd 	bl	8008388 <cmp_lfn>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d003      	beq.n	800879c <dir_find+0x106>
 8008794:	7d7b      	ldrb	r3, [r7, #21]
 8008796:	3b01      	subs	r3, #1
 8008798:	b2db      	uxtb	r3, r3
 800879a:	e000      	b.n	800879e <dir_find+0x108>
 800879c:	23ff      	movs	r3, #255	; 0xff
 800879e:	757b      	strb	r3, [r7, #21]
 80087a0:	e024      	b.n	80087ec <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80087a2:	7d7b      	ldrb	r3, [r7, #21]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d109      	bne.n	80087bc <dir_find+0x126>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a1b      	ldr	r3, [r3, #32]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff ff51 	bl	8008654 <sum_sfn>
 80087b2:	4603      	mov	r3, r0
 80087b4:	461a      	mov	r2, r3
 80087b6:	7d3b      	ldrb	r3, [r7, #20]
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d024      	beq.n	8008806 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10a      	bne.n	80087e0 <dir_find+0x14a>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a18      	ldr	r0, [r3, #32]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	3324      	adds	r3, #36	; 0x24
 80087d2:	220b      	movs	r2, #11
 80087d4:	4619      	mov	r1, r3
 80087d6:	f7fe fe1d 	bl	8007414 <mem_cmp>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d014      	beq.n	800880a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80087e0:	23ff      	movs	r3, #255	; 0xff
 80087e2:	757b      	strb	r3, [r7, #21]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087ea:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80087ec:	2100      	movs	r1, #0
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7ff fc6d 	bl	80080ce <dir_next>
 80087f4:	4603      	mov	r3, r0
 80087f6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f43f af65 	beq.w	80086ca <dir_find+0x34>
 8008800:	e004      	b.n	800880c <dir_find+0x176>
		if (res != FR_OK) break;
 8008802:	bf00      	nop
 8008804:	e002      	b.n	800880c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008806:	bf00      	nop
 8008808:	e000      	b.n	800880c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800880a:	bf00      	nop

	return res;
 800880c:	7dfb      	ldrb	r3, [r7, #23]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
	...

08008818 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08c      	sub	sp, #48	; 0x30
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800882c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <dir_register+0x20>
 8008834:	2306      	movs	r3, #6
 8008836:	e0e0      	b.n	80089fa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008838:	2300      	movs	r3, #0
 800883a:	627b      	str	r3, [r7, #36]	; 0x24
 800883c:	e002      	b.n	8008844 <dir_register+0x2c>
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	3301      	adds	r3, #1
 8008842:	627b      	str	r3, [r7, #36]	; 0x24
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	691a      	ldr	r2, [r3, #16]
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	005b      	lsls	r3, r3, #1
 800884c:	4413      	add	r3, r2
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1f4      	bne.n	800883e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800885a:	f107 030c 	add.w	r3, r7, #12
 800885e:	220c      	movs	r2, #12
 8008860:	4618      	mov	r0, r3
 8008862:	f7fe fd9b 	bl	800739c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008866:	7dfb      	ldrb	r3, [r7, #23]
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b00      	cmp	r3, #0
 800886e:	d032      	beq.n	80088d6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2240      	movs	r2, #64	; 0x40
 8008874:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008878:	2301      	movs	r3, #1
 800887a:	62bb      	str	r3, [r7, #40]	; 0x28
 800887c:	e016      	b.n	80088ac <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	691a      	ldr	r2, [r3, #16]
 8008888:	f107 010c 	add.w	r1, r7, #12
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	f7ff fe53 	bl	8008538 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7ff feff 	bl	8008696 <dir_find>
 8008898:	4603      	mov	r3, r0
 800889a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800889e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d106      	bne.n	80088b4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80088a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a8:	3301      	adds	r3, #1
 80088aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80088ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ae:	2b63      	cmp	r3, #99	; 0x63
 80088b0:	d9e5      	bls.n	800887e <dir_register+0x66>
 80088b2:	e000      	b.n	80088b6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80088b4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80088b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b8:	2b64      	cmp	r3, #100	; 0x64
 80088ba:	d101      	bne.n	80088c0 <dir_register+0xa8>
 80088bc:	2307      	movs	r3, #7
 80088be:	e09c      	b.n	80089fa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80088c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088c4:	2b04      	cmp	r3, #4
 80088c6:	d002      	beq.n	80088ce <dir_register+0xb6>
 80088c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088cc:	e095      	b.n	80089fa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80088ce:	7dfa      	ldrb	r2, [r7, #23]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	f003 0302 	and.w	r3, r3, #2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d007      	beq.n	80088f0 <dir_register+0xd8>
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	330c      	adds	r3, #12
 80088e4:	4a47      	ldr	r2, [pc, #284]	; (8008a04 <dir_register+0x1ec>)
 80088e6:	fba2 2303 	umull	r2, r3, r2, r3
 80088ea:	089b      	lsrs	r3, r3, #2
 80088ec:	3301      	adds	r3, #1
 80088ee:	e000      	b.n	80088f2 <dir_register+0xda>
 80088f0:	2301      	movs	r3, #1
 80088f2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80088f4:	6a39      	ldr	r1, [r7, #32]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7ff fcbf 	bl	800827a <dir_alloc>
 80088fc:	4603      	mov	r3, r0
 80088fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008902:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008906:	2b00      	cmp	r3, #0
 8008908:	d148      	bne.n	800899c <dir_register+0x184>
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	3b01      	subs	r3, #1
 800890e:	623b      	str	r3, [r7, #32]
 8008910:	6a3b      	ldr	r3, [r7, #32]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d042      	beq.n	800899c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	695a      	ldr	r2, [r3, #20]
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	015b      	lsls	r3, r3, #5
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	4619      	mov	r1, r3
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff fb4a 	bl	8007fbc <dir_sdi>
 8008928:	4603      	mov	r3, r0
 800892a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800892e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008932:	2b00      	cmp	r3, #0
 8008934:	d132      	bne.n	800899c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	3324      	adds	r3, #36	; 0x24
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff fe8a 	bl	8008654 <sum_sfn>
 8008940:	4603      	mov	r3, r0
 8008942:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	69db      	ldr	r3, [r3, #28]
 8008948:	4619      	mov	r1, r3
 800894a:	69f8      	ldr	r0, [r7, #28]
 800894c:	f7fe ff54 	bl	80077f8 <move_window>
 8008950:	4603      	mov	r3, r0
 8008952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800895a:	2b00      	cmp	r3, #0
 800895c:	d11d      	bne.n	800899a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	6918      	ldr	r0, [r3, #16]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a19      	ldr	r1, [r3, #32]
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	b2da      	uxtb	r2, r3
 800896a:	7efb      	ldrb	r3, [r7, #27]
 800896c:	f7ff fd7c 	bl	8008468 <put_lfn>
				fs->wflag = 1;
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	2201      	movs	r2, #1
 8008974:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008976:	2100      	movs	r1, #0
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7ff fba8 	bl	80080ce <dir_next>
 800897e:	4603      	mov	r3, r0
 8008980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008984:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008988:	2b00      	cmp	r3, #0
 800898a:	d107      	bne.n	800899c <dir_register+0x184>
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	3b01      	subs	r3, #1
 8008990:	623b      	str	r3, [r7, #32]
 8008992:	6a3b      	ldr	r3, [r7, #32]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1d5      	bne.n	8008944 <dir_register+0x12c>
 8008998:	e000      	b.n	800899c <dir_register+0x184>
				if (res != FR_OK) break;
 800899a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800899c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d128      	bne.n	80089f6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	69db      	ldr	r3, [r3, #28]
 80089a8:	4619      	mov	r1, r3
 80089aa:	69f8      	ldr	r0, [r7, #28]
 80089ac:	f7fe ff24 	bl	80077f8 <move_window>
 80089b0:	4603      	mov	r3, r0
 80089b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80089b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d11b      	bne.n	80089f6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	2220      	movs	r2, #32
 80089c4:	2100      	movs	r1, #0
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fe fd09 	bl	80073de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a18      	ldr	r0, [r3, #32]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3324      	adds	r3, #36	; 0x24
 80089d4:	220b      	movs	r2, #11
 80089d6:	4619      	mov	r1, r3
 80089d8:	f7fe fce0 	bl	800739c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	330c      	adds	r3, #12
 80089e8:	f002 0218 	and.w	r2, r2, #24
 80089ec:	b2d2      	uxtb	r2, r2
 80089ee:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	2201      	movs	r2, #1
 80089f4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80089f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3730      	adds	r7, #48	; 0x30
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	4ec4ec4f 	.word	0x4ec4ec4f

08008a08 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b08a      	sub	sp, #40	; 0x28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	613b      	str	r3, [r7, #16]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	2300      	movs	r3, #0
 8008a22:	617b      	str	r3, [r7, #20]
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	1c5a      	adds	r2, r3, #1
 8008a2c:	61ba      	str	r2, [r7, #24]
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	4413      	add	r3, r2
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008a36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a38:	2b1f      	cmp	r3, #31
 8008a3a:	d940      	bls.n	8008abe <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008a3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a3e:	2b2f      	cmp	r3, #47	; 0x2f
 8008a40:	d006      	beq.n	8008a50 <create_name+0x48>
 8008a42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a44:	2b5c      	cmp	r3, #92	; 0x5c
 8008a46:	d110      	bne.n	8008a6a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008a48:	e002      	b.n	8008a50 <create_name+0x48>
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	61bb      	str	r3, [r7, #24]
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	4413      	add	r3, r2
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	2b2f      	cmp	r3, #47	; 0x2f
 8008a5a:	d0f6      	beq.n	8008a4a <create_name+0x42>
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	4413      	add	r3, r2
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	2b5c      	cmp	r3, #92	; 0x5c
 8008a66:	d0f0      	beq.n	8008a4a <create_name+0x42>
			break;
 8008a68:	e02a      	b.n	8008ac0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2bfe      	cmp	r3, #254	; 0xfe
 8008a6e:	d901      	bls.n	8008a74 <create_name+0x6c>
 8008a70:	2306      	movs	r3, #6
 8008a72:	e17d      	b.n	8008d70 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008a74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008a7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f001 f9bc 	bl	8009dfc <ff_convert>
 8008a84:	4603      	mov	r3, r0
 8008a86:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008a88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <create_name+0x8a>
 8008a8e:	2306      	movs	r3, #6
 8008a90:	e16e      	b.n	8008d70 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a94:	2b7f      	cmp	r3, #127	; 0x7f
 8008a96:	d809      	bhi.n	8008aac <create_name+0xa4>
 8008a98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	488d      	ldr	r0, [pc, #564]	; (8008cd4 <create_name+0x2cc>)
 8008a9e:	f7fe fce0 	bl	8007462 <chk_chr>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <create_name+0xa4>
 8008aa8:	2306      	movs	r3, #6
 8008aaa:	e161      	b.n	8008d70 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	1c5a      	adds	r2, r3, #1
 8008ab0:	617a      	str	r2, [r7, #20]
 8008ab2:	005b      	lsls	r3, r3, #1
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008aba:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008abc:	e7b4      	b.n	8008a28 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008abe:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	441a      	add	r2, r3
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008aca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008acc:	2b1f      	cmp	r3, #31
 8008ace:	d801      	bhi.n	8008ad4 <create_name+0xcc>
 8008ad0:	2304      	movs	r3, #4
 8008ad2:	e000      	b.n	8008ad6 <create_name+0xce>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008ada:	e011      	b.n	8008b00 <create_name+0xf8>
		w = lfn[di - 1];
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	4413      	add	r3, r2
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008aee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008af0:	2b20      	cmp	r3, #32
 8008af2:	d002      	beq.n	8008afa <create_name+0xf2>
 8008af4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008af6:	2b2e      	cmp	r3, #46	; 0x2e
 8008af8:	d106      	bne.n	8008b08 <create_name+0x100>
		di--;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	3b01      	subs	r3, #1
 8008afe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1ea      	bne.n	8008adc <create_name+0xd4>
 8008b06:	e000      	b.n	8008b0a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008b08:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	005b      	lsls	r3, r3, #1
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	4413      	add	r3, r2
 8008b12:	2200      	movs	r2, #0
 8008b14:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d101      	bne.n	8008b20 <create_name+0x118>
 8008b1c:	2306      	movs	r3, #6
 8008b1e:	e127      	b.n	8008d70 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3324      	adds	r3, #36	; 0x24
 8008b24:	220b      	movs	r2, #11
 8008b26:	2120      	movs	r1, #32
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fe fc58 	bl	80073de <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008b2e:	2300      	movs	r3, #0
 8008b30:	61bb      	str	r3, [r7, #24]
 8008b32:	e002      	b.n	8008b3a <create_name+0x132>
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	3301      	adds	r3, #1
 8008b38:	61bb      	str	r3, [r7, #24]
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	005b      	lsls	r3, r3, #1
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	4413      	add	r3, r2
 8008b42:	881b      	ldrh	r3, [r3, #0]
 8008b44:	2b20      	cmp	r3, #32
 8008b46:	d0f5      	beq.n	8008b34 <create_name+0x12c>
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	005b      	lsls	r3, r3, #1
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	4413      	add	r3, r2
 8008b50:	881b      	ldrh	r3, [r3, #0]
 8008b52:	2b2e      	cmp	r3, #46	; 0x2e
 8008b54:	d0ee      	beq.n	8008b34 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d009      	beq.n	8008b70 <create_name+0x168>
 8008b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b60:	f043 0303 	orr.w	r3, r3, #3
 8008b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008b68:	e002      	b.n	8008b70 <create_name+0x168>
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d009      	beq.n	8008b8a <create_name+0x182>
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	4413      	add	r3, r2
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	2b2e      	cmp	r3, #46	; 0x2e
 8008b88:	d1ef      	bne.n	8008b6a <create_name+0x162>

	i = b = 0; ni = 8;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008b90:	2300      	movs	r3, #0
 8008b92:	623b      	str	r3, [r7, #32]
 8008b94:	2308      	movs	r3, #8
 8008b96:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	1c5a      	adds	r2, r3, #1
 8008b9c:	61ba      	str	r2, [r7, #24]
 8008b9e:	005b      	lsls	r3, r3, #1
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	881b      	ldrh	r3, [r3, #0]
 8008ba6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008ba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 8090 	beq.w	8008cd0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008bb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bb2:	2b20      	cmp	r3, #32
 8008bb4:	d006      	beq.n	8008bc4 <create_name+0x1bc>
 8008bb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bb8:	2b2e      	cmp	r3, #46	; 0x2e
 8008bba:	d10a      	bne.n	8008bd2 <create_name+0x1ca>
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d006      	beq.n	8008bd2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bc8:	f043 0303 	orr.w	r3, r3, #3
 8008bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008bd0:	e07d      	b.n	8008cce <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008bd2:	6a3a      	ldr	r2, [r7, #32]
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d203      	bcs.n	8008be2 <create_name+0x1da>
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d123      	bne.n	8008c2a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	2b0b      	cmp	r3, #11
 8008be6:	d106      	bne.n	8008bf6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bec:	f043 0303 	orr.w	r3, r3, #3
 8008bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008bf4:	e075      	b.n	8008ce2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d005      	beq.n	8008c0a <create_name+0x202>
 8008bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c02:	f043 0303 	orr.w	r3, r3, #3
 8008c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008c0a:	69ba      	ldr	r2, [r7, #24]
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d866      	bhi.n	8008ce0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	61bb      	str	r3, [r7, #24]
 8008c16:	2308      	movs	r3, #8
 8008c18:	623b      	str	r3, [r7, #32]
 8008c1a:	230b      	movs	r3, #11
 8008c1c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008c1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008c28:	e051      	b.n	8008cce <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008c2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c2c:	2b7f      	cmp	r3, #127	; 0x7f
 8008c2e:	d914      	bls.n	8008c5a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c32:	2100      	movs	r1, #0
 8008c34:	4618      	mov	r0, r3
 8008c36:	f001 f8e1 	bl	8009dfc <ff_convert>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d004      	beq.n	8008c4e <create_name+0x246>
 8008c44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c46:	3b80      	subs	r3, #128	; 0x80
 8008c48:	4a23      	ldr	r2, [pc, #140]	; (8008cd8 <create_name+0x2d0>)
 8008c4a:	5cd3      	ldrb	r3, [r2, r3]
 8008c4c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c52:	f043 0302 	orr.w	r3, r3, #2
 8008c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008c5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d007      	beq.n	8008c70 <create_name+0x268>
 8008c60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c62:	4619      	mov	r1, r3
 8008c64:	481d      	ldr	r0, [pc, #116]	; (8008cdc <create_name+0x2d4>)
 8008c66:	f7fe fbfc 	bl	8007462 <chk_chr>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d008      	beq.n	8008c82 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008c70:	235f      	movs	r3, #95	; 0x5f
 8008c72:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c78:	f043 0303 	orr.w	r3, r3, #3
 8008c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c80:	e01b      	b.n	8008cba <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c84:	2b40      	cmp	r3, #64	; 0x40
 8008c86:	d909      	bls.n	8008c9c <create_name+0x294>
 8008c88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c8a:	2b5a      	cmp	r3, #90	; 0x5a
 8008c8c:	d806      	bhi.n	8008c9c <create_name+0x294>
					b |= 2;
 8008c8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c92:	f043 0302 	orr.w	r3, r3, #2
 8008c96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008c9a:	e00e      	b.n	8008cba <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008c9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c9e:	2b60      	cmp	r3, #96	; 0x60
 8008ca0:	d90b      	bls.n	8008cba <create_name+0x2b2>
 8008ca2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ca4:	2b7a      	cmp	r3, #122	; 0x7a
 8008ca6:	d808      	bhi.n	8008cba <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008ca8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008cac:	f043 0301 	orr.w	r3, r3, #1
 8008cb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008cb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cb6:	3b20      	subs	r3, #32
 8008cb8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008cba:	6a3b      	ldr	r3, [r7, #32]
 8008cbc:	1c5a      	adds	r2, r3, #1
 8008cbe:	623a      	str	r2, [r7, #32]
 8008cc0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008cc2:	b2d1      	uxtb	r1, r2
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	460a      	mov	r2, r1
 8008cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008cce:	e763      	b.n	8008b98 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008cd0:	bf00      	nop
 8008cd2:	e006      	b.n	8008ce2 <create_name+0x2da>
 8008cd4:	0800c50c 	.word	0x0800c50c
 8008cd8:	0800c578 	.word	0x0800c578
 8008cdc:	0800c518 	.word	0x0800c518
			if (si > di) break;			/* No extension */
 8008ce0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008ce8:	2be5      	cmp	r3, #229	; 0xe5
 8008cea:	d103      	bne.n	8008cf4 <create_name+0x2ec>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2205      	movs	r2, #5
 8008cf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	2b08      	cmp	r3, #8
 8008cf8:	d104      	bne.n	8008d04 <create_name+0x2fc>
 8008cfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008d04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d08:	f003 030c 	and.w	r3, r3, #12
 8008d0c:	2b0c      	cmp	r3, #12
 8008d0e:	d005      	beq.n	8008d1c <create_name+0x314>
 8008d10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d14:	f003 0303 	and.w	r3, r3, #3
 8008d18:	2b03      	cmp	r3, #3
 8008d1a:	d105      	bne.n	8008d28 <create_name+0x320>
 8008d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d20:	f043 0302 	orr.w	r3, r3, #2
 8008d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d2c:	f003 0302 	and.w	r3, r3, #2
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d117      	bne.n	8008d64 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008d34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d38:	f003 0303 	and.w	r3, r3, #3
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d105      	bne.n	8008d4c <create_name+0x344>
 8008d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d44:	f043 0310 	orr.w	r3, r3, #16
 8008d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008d4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d50:	f003 030c 	and.w	r3, r3, #12
 8008d54:	2b04      	cmp	r3, #4
 8008d56:	d105      	bne.n	8008d64 <create_name+0x35c>
 8008d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d5c:	f043 0308 	orr.w	r3, r3, #8
 8008d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008d6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8008d6e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3728      	adds	r7, #40	; 0x28
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008d8c:	e002      	b.n	8008d94 <follow_path+0x1c>
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	3301      	adds	r3, #1
 8008d92:	603b      	str	r3, [r7, #0]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	2b2f      	cmp	r3, #47	; 0x2f
 8008d9a:	d0f8      	beq.n	8008d8e <follow_path+0x16>
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	2b5c      	cmp	r3, #92	; 0x5c
 8008da2:	d0f4      	beq.n	8008d8e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	2200      	movs	r2, #0
 8008da8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	2b1f      	cmp	r3, #31
 8008db0:	d80a      	bhi.n	8008dc8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2280      	movs	r2, #128	; 0x80
 8008db6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008dba:	2100      	movs	r1, #0
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff f8fd 	bl	8007fbc <dir_sdi>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	75fb      	strb	r3, [r7, #23]
 8008dc6:	e048      	b.n	8008e5a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008dc8:	463b      	mov	r3, r7
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff fe1b 	bl	8008a08 <create_name>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008dd6:	7dfb      	ldrb	r3, [r7, #23]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d139      	bne.n	8008e50 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7ff fc5a 	bl	8008696 <dir_find>
 8008de2:	4603      	mov	r3, r0
 8008de4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008dec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00a      	beq.n	8008e0a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008df4:	7dfb      	ldrb	r3, [r7, #23]
 8008df6:	2b04      	cmp	r3, #4
 8008df8:	d12c      	bne.n	8008e54 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008dfa:	7afb      	ldrb	r3, [r7, #11]
 8008dfc:	f003 0304 	and.w	r3, r3, #4
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d127      	bne.n	8008e54 <follow_path+0xdc>
 8008e04:	2305      	movs	r3, #5
 8008e06:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008e08:	e024      	b.n	8008e54 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e0a:	7afb      	ldrb	r3, [r7, #11]
 8008e0c:	f003 0304 	and.w	r3, r3, #4
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d121      	bne.n	8008e58 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	799b      	ldrb	r3, [r3, #6]
 8008e18:	f003 0310 	and.w	r3, r3, #16
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d102      	bne.n	8008e26 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008e20:	2305      	movs	r3, #5
 8008e22:	75fb      	strb	r3, [r7, #23]
 8008e24:	e019      	b.n	8008e5a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	8992      	ldrh	r2, [r2, #12]
 8008e34:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e38:	fb00 f202 	mul.w	r2, r0, r2
 8008e3c:	1a9b      	subs	r3, r3, r2
 8008e3e:	440b      	add	r3, r1
 8008e40:	4619      	mov	r1, r3
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f7ff fa60 	bl	8008308 <ld_clust>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e4e:	e7bb      	b.n	8008dc8 <follow_path+0x50>
			if (res != FR_OK) break;
 8008e50:	bf00      	nop
 8008e52:	e002      	b.n	8008e5a <follow_path+0xe2>
				break;
 8008e54:	bf00      	nop
 8008e56:	e000      	b.n	8008e5a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e58:	bf00      	nop
			}
		}
	}

	return res;
 8008e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3718      	adds	r7, #24
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e70:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d031      	beq.n	8008ede <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	617b      	str	r3, [r7, #20]
 8008e80:	e002      	b.n	8008e88 <get_ldnumber+0x24>
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	3301      	adds	r3, #1
 8008e86:	617b      	str	r3, [r7, #20]
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	2b1f      	cmp	r3, #31
 8008e8e:	d903      	bls.n	8008e98 <get_ldnumber+0x34>
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	2b3a      	cmp	r3, #58	; 0x3a
 8008e96:	d1f4      	bne.n	8008e82 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	2b3a      	cmp	r3, #58	; 0x3a
 8008e9e:	d11c      	bne.n	8008eda <get_ldnumber+0x76>
			tp = *path;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	60fa      	str	r2, [r7, #12]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	3b30      	subs	r3, #48	; 0x30
 8008eb0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2b09      	cmp	r3, #9
 8008eb6:	d80e      	bhi.n	8008ed6 <get_ldnumber+0x72>
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d10a      	bne.n	8008ed6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d107      	bne.n	8008ed6 <get_ldnumber+0x72>
					vol = (int)i;
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	617b      	str	r3, [r7, #20]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	e002      	b.n	8008ee0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008eda:	2300      	movs	r3, #0
 8008edc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008ede:	693b      	ldr	r3, [r7, #16]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	371c      	adds	r7, #28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	70da      	strb	r2, [r3, #3]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f02:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7fe fc76 	bl	80077f8 <move_window>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <check_fs+0x2a>
 8008f12:	2304      	movs	r3, #4
 8008f14:	e038      	b.n	8008f88 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	3338      	adds	r3, #56	; 0x38
 8008f1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe f9ba 	bl	8007298 <ld_word>
 8008f24:	4603      	mov	r3, r0
 8008f26:	461a      	mov	r2, r3
 8008f28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d001      	beq.n	8008f34 <check_fs+0x48>
 8008f30:	2303      	movs	r3, #3
 8008f32:	e029      	b.n	8008f88 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008f3a:	2be9      	cmp	r3, #233	; 0xe9
 8008f3c:	d009      	beq.n	8008f52 <check_fs+0x66>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008f44:	2beb      	cmp	r3, #235	; 0xeb
 8008f46:	d11e      	bne.n	8008f86 <check_fs+0x9a>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008f4e:	2b90      	cmp	r3, #144	; 0x90
 8008f50:	d119      	bne.n	8008f86 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	3338      	adds	r3, #56	; 0x38
 8008f56:	3336      	adds	r3, #54	; 0x36
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fe f9b5 	bl	80072c8 <ld_dword>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008f64:	4a0a      	ldr	r2, [pc, #40]	; (8008f90 <check_fs+0xa4>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d101      	bne.n	8008f6e <check_fs+0x82>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	e00c      	b.n	8008f88 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3338      	adds	r3, #56	; 0x38
 8008f72:	3352      	adds	r3, #82	; 0x52
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7fe f9a7 	bl	80072c8 <ld_dword>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	4a05      	ldr	r2, [pc, #20]	; (8008f94 <check_fs+0xa8>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d101      	bne.n	8008f86 <check_fs+0x9a>
 8008f82:	2300      	movs	r3, #0
 8008f84:	e000      	b.n	8008f88 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008f86:	2302      	movs	r3, #2
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	00544146 	.word	0x00544146
 8008f94:	33544146 	.word	0x33544146

08008f98 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b096      	sub	sp, #88	; 0x58
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f7ff ff59 	bl	8008e64 <get_ldnumber>
 8008fb2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	da01      	bge.n	8008fbe <find_volume+0x26>
 8008fba:	230b      	movs	r3, #11
 8008fbc:	e265      	b.n	800948a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008fbe:	4a9f      	ldr	r2, [pc, #636]	; (800923c <find_volume+0x2a4>)
 8008fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fc6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d101      	bne.n	8008fd2 <find_volume+0x3a>
 8008fce:	230c      	movs	r3, #12
 8008fd0:	e25b      	b.n	800948a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fd6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008fd8:	79fb      	ldrb	r3, [r7, #7]
 8008fda:	f023 0301 	bic.w	r3, r3, #1
 8008fde:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d01a      	beq.n	800901e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fea:	785b      	ldrb	r3, [r3, #1]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fe f8b5 	bl	800715c <disk_status>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008ff8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ffc:	f003 0301 	and.w	r3, r3, #1
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10c      	bne.n	800901e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009004:	79fb      	ldrb	r3, [r7, #7]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d007      	beq.n	800901a <find_volume+0x82>
 800900a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800900e:	f003 0304 	and.w	r3, r3, #4
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009016:	230a      	movs	r3, #10
 8009018:	e237      	b.n	800948a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800901a:	2300      	movs	r3, #0
 800901c:	e235      	b.n	800948a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800901e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009020:	2200      	movs	r2, #0
 8009022:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009026:	b2da      	uxtb	r2, r3
 8009028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800902c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902e:	785b      	ldrb	r3, [r3, #1]
 8009030:	4618      	mov	r0, r3
 8009032:	f7fe f8ad 	bl	8007190 <disk_initialize>
 8009036:	4603      	mov	r3, r0
 8009038:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800903c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009040:	f003 0301 	and.w	r3, r3, #1
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009048:	2303      	movs	r3, #3
 800904a:	e21e      	b.n	800948a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800904c:	79fb      	ldrb	r3, [r7, #7]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d007      	beq.n	8009062 <find_volume+0xca>
 8009052:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009056:	f003 0304 	and.w	r3, r3, #4
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800905e:	230a      	movs	r3, #10
 8009060:	e213      	b.n	800948a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009064:	7858      	ldrb	r0, [r3, #1]
 8009066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009068:	330c      	adds	r3, #12
 800906a:	461a      	mov	r2, r3
 800906c:	2102      	movs	r1, #2
 800906e:	f7fe f8f5 	bl	800725c <disk_ioctl>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <find_volume+0xe4>
 8009078:	2301      	movs	r3, #1
 800907a:	e206      	b.n	800948a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907e:	899b      	ldrh	r3, [r3, #12]
 8009080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009084:	d80d      	bhi.n	80090a2 <find_volume+0x10a>
 8009086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009088:	899b      	ldrh	r3, [r3, #12]
 800908a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800908e:	d308      	bcc.n	80090a2 <find_volume+0x10a>
 8009090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009092:	899b      	ldrh	r3, [r3, #12]
 8009094:	461a      	mov	r2, r3
 8009096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009098:	899b      	ldrh	r3, [r3, #12]
 800909a:	3b01      	subs	r3, #1
 800909c:	4013      	ands	r3, r2
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <find_volume+0x10e>
 80090a2:	2301      	movs	r3, #1
 80090a4:	e1f1      	b.n	800948a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80090a6:	2300      	movs	r3, #0
 80090a8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80090aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80090ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80090ae:	f7ff ff1d 	bl	8008eec <check_fs>
 80090b2:	4603      	mov	r3, r0
 80090b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80090b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d149      	bne.n	8009154 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80090c0:	2300      	movs	r3, #0
 80090c2:	643b      	str	r3, [r7, #64]	; 0x40
 80090c4:	e01e      	b.n	8009104 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80090c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80090cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090ce:	011b      	lsls	r3, r3, #4
 80090d0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80090d4:	4413      	add	r3, r2
 80090d6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80090d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090da:	3304      	adds	r3, #4
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d006      	beq.n	80090f0 <find_volume+0x158>
 80090e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e4:	3308      	adds	r3, #8
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fe f8ee 	bl	80072c8 <ld_dword>
 80090ec:	4602      	mov	r2, r0
 80090ee:	e000      	b.n	80090f2 <find_volume+0x15a>
 80090f0:	2200      	movs	r2, #0
 80090f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	3358      	adds	r3, #88	; 0x58
 80090f8:	443b      	add	r3, r7
 80090fa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80090fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009100:	3301      	adds	r3, #1
 8009102:	643b      	str	r3, [r7, #64]	; 0x40
 8009104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009106:	2b03      	cmp	r3, #3
 8009108:	d9dd      	bls.n	80090c6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800910a:	2300      	movs	r3, #0
 800910c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800910e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <find_volume+0x182>
 8009114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009116:	3b01      	subs	r3, #1
 8009118:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800911a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	3358      	adds	r3, #88	; 0x58
 8009120:	443b      	add	r3, r7
 8009122:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009126:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800912a:	2b00      	cmp	r3, #0
 800912c:	d005      	beq.n	800913a <find_volume+0x1a2>
 800912e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009130:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009132:	f7ff fedb 	bl	8008eec <check_fs>
 8009136:	4603      	mov	r3, r0
 8009138:	e000      	b.n	800913c <find_volume+0x1a4>
 800913a:	2303      	movs	r3, #3
 800913c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009140:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009144:	2b01      	cmp	r3, #1
 8009146:	d905      	bls.n	8009154 <find_volume+0x1bc>
 8009148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800914a:	3301      	adds	r3, #1
 800914c:	643b      	str	r3, [r7, #64]	; 0x40
 800914e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009150:	2b03      	cmp	r3, #3
 8009152:	d9e2      	bls.n	800911a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009154:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009158:	2b04      	cmp	r3, #4
 800915a:	d101      	bne.n	8009160 <find_volume+0x1c8>
 800915c:	2301      	movs	r3, #1
 800915e:	e194      	b.n	800948a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009160:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009164:	2b01      	cmp	r3, #1
 8009166:	d901      	bls.n	800916c <find_volume+0x1d4>
 8009168:	230d      	movs	r3, #13
 800916a:	e18e      	b.n	800948a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800916c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916e:	3338      	adds	r3, #56	; 0x38
 8009170:	330b      	adds	r3, #11
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe f890 	bl	8007298 <ld_word>
 8009178:	4603      	mov	r3, r0
 800917a:	461a      	mov	r2, r3
 800917c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917e:	899b      	ldrh	r3, [r3, #12]
 8009180:	429a      	cmp	r2, r3
 8009182:	d001      	beq.n	8009188 <find_volume+0x1f0>
 8009184:	230d      	movs	r3, #13
 8009186:	e180      	b.n	800948a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	3338      	adds	r3, #56	; 0x38
 800918c:	3316      	adds	r3, #22
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe f882 	bl	8007298 <ld_word>
 8009194:	4603      	mov	r3, r0
 8009196:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800919a:	2b00      	cmp	r3, #0
 800919c:	d106      	bne.n	80091ac <find_volume+0x214>
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	3338      	adds	r3, #56	; 0x38
 80091a2:	3324      	adds	r3, #36	; 0x24
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fe f88f 	bl	80072c8 <ld_dword>
 80091aa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80091ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091b0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80091b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80091b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80091bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091be:	789b      	ldrb	r3, [r3, #2]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d005      	beq.n	80091d0 <find_volume+0x238>
 80091c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c6:	789b      	ldrb	r3, [r3, #2]
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d001      	beq.n	80091d0 <find_volume+0x238>
 80091cc:	230d      	movs	r3, #13
 80091ce:	e15c      	b.n	800948a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80091d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d2:	789b      	ldrb	r3, [r3, #2]
 80091d4:	461a      	mov	r2, r3
 80091d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091d8:	fb02 f303 	mul.w	r3, r2, r3
 80091dc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80091de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80091ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ec:	895b      	ldrh	r3, [r3, #10]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d008      	beq.n	8009204 <find_volume+0x26c>
 80091f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f4:	895b      	ldrh	r3, [r3, #10]
 80091f6:	461a      	mov	r2, r3
 80091f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fa:	895b      	ldrh	r3, [r3, #10]
 80091fc:	3b01      	subs	r3, #1
 80091fe:	4013      	ands	r3, r2
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <find_volume+0x270>
 8009204:	230d      	movs	r3, #13
 8009206:	e140      	b.n	800948a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920a:	3338      	adds	r3, #56	; 0x38
 800920c:	3311      	adds	r3, #17
 800920e:	4618      	mov	r0, r3
 8009210:	f7fe f842 	bl	8007298 <ld_word>
 8009214:	4603      	mov	r3, r0
 8009216:	461a      	mov	r2, r3
 8009218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800921c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921e:	891b      	ldrh	r3, [r3, #8]
 8009220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009222:	8992      	ldrh	r2, [r2, #12]
 8009224:	0952      	lsrs	r2, r2, #5
 8009226:	b292      	uxth	r2, r2
 8009228:	fbb3 f1f2 	udiv	r1, r3, r2
 800922c:	fb01 f202 	mul.w	r2, r1, r2
 8009230:	1a9b      	subs	r3, r3, r2
 8009232:	b29b      	uxth	r3, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	d003      	beq.n	8009240 <find_volume+0x2a8>
 8009238:	230d      	movs	r3, #13
 800923a:	e126      	b.n	800948a <find_volume+0x4f2>
 800923c:	20017454 	.word	0x20017454

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009242:	3338      	adds	r3, #56	; 0x38
 8009244:	3313      	adds	r3, #19
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe f826 	bl	8007298 <ld_word>
 800924c:	4603      	mov	r3, r0
 800924e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009252:	2b00      	cmp	r3, #0
 8009254:	d106      	bne.n	8009264 <find_volume+0x2cc>
 8009256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009258:	3338      	adds	r3, #56	; 0x38
 800925a:	3320      	adds	r3, #32
 800925c:	4618      	mov	r0, r3
 800925e:	f7fe f833 	bl	80072c8 <ld_dword>
 8009262:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009266:	3338      	adds	r3, #56	; 0x38
 8009268:	330e      	adds	r3, #14
 800926a:	4618      	mov	r0, r3
 800926c:	f7fe f814 	bl	8007298 <ld_word>
 8009270:	4603      	mov	r3, r0
 8009272:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009274:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <find_volume+0x2e6>
 800927a:	230d      	movs	r3, #13
 800927c:	e105      	b.n	800948a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800927e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009282:	4413      	add	r3, r2
 8009284:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009286:	8911      	ldrh	r1, [r2, #8]
 8009288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800928a:	8992      	ldrh	r2, [r2, #12]
 800928c:	0952      	lsrs	r2, r2, #5
 800928e:	b292      	uxth	r2, r2
 8009290:	fbb1 f2f2 	udiv	r2, r1, r2
 8009294:	b292      	uxth	r2, r2
 8009296:	4413      	add	r3, r2
 8009298:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800929a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800929c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929e:	429a      	cmp	r2, r3
 80092a0:	d201      	bcs.n	80092a6 <find_volume+0x30e>
 80092a2:	230d      	movs	r3, #13
 80092a4:	e0f1      	b.n	800948a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80092a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ae:	8952      	ldrh	r2, [r2, #10]
 80092b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80092b4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80092b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <find_volume+0x328>
 80092bc:	230d      	movs	r3, #13
 80092be:	e0e4      	b.n	800948a <find_volume+0x4f2>
		fmt = FS_FAT32;
 80092c0:	2303      	movs	r3, #3
 80092c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d802      	bhi.n	80092d6 <find_volume+0x33e>
 80092d0:	2302      	movs	r3, #2
 80092d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80092dc:	4293      	cmp	r3, r2
 80092de:	d802      	bhi.n	80092e6 <find_volume+0x34e>
 80092e0:	2301      	movs	r3, #1
 80092e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	1c9a      	adds	r2, r3, #2
 80092ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ec:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80092ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092f2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80092f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80092f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092f8:	441a      	add	r2, r3
 80092fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80092fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	441a      	add	r2, r3
 8009304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009306:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8009308:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800930c:	2b03      	cmp	r3, #3
 800930e:	d11e      	bne.n	800934e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009312:	3338      	adds	r3, #56	; 0x38
 8009314:	332a      	adds	r3, #42	; 0x2a
 8009316:	4618      	mov	r0, r3
 8009318:	f7fd ffbe 	bl	8007298 <ld_word>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <find_volume+0x38e>
 8009322:	230d      	movs	r3, #13
 8009324:	e0b1      	b.n	800948a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009328:	891b      	ldrh	r3, [r3, #8]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <find_volume+0x39a>
 800932e:	230d      	movs	r3, #13
 8009330:	e0ab      	b.n	800948a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009334:	3338      	adds	r3, #56	; 0x38
 8009336:	332c      	adds	r3, #44	; 0x2c
 8009338:	4618      	mov	r0, r3
 800933a:	f7fd ffc5 	bl	80072c8 <ld_dword>
 800933e:	4602      	mov	r2, r0
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009346:	69db      	ldr	r3, [r3, #28]
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	647b      	str	r3, [r7, #68]	; 0x44
 800934c:	e01f      	b.n	800938e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800934e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009350:	891b      	ldrh	r3, [r3, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d101      	bne.n	800935a <find_volume+0x3c2>
 8009356:	230d      	movs	r3, #13
 8009358:	e097      	b.n	800948a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800935a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800935e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009360:	441a      	add	r2, r3
 8009362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009364:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009366:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800936a:	2b02      	cmp	r3, #2
 800936c:	d103      	bne.n	8009376 <find_volume+0x3de>
 800936e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	005b      	lsls	r3, r3, #1
 8009374:	e00a      	b.n	800938c <find_volume+0x3f4>
 8009376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009378:	69da      	ldr	r2, [r3, #28]
 800937a:	4613      	mov	r3, r2
 800937c:	005b      	lsls	r3, r3, #1
 800937e:	4413      	add	r3, r2
 8009380:	085a      	lsrs	r2, r3, #1
 8009382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009384:	69db      	ldr	r3, [r3, #28]
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800938c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800938e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009390:	6a1a      	ldr	r2, [r3, #32]
 8009392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009394:	899b      	ldrh	r3, [r3, #12]
 8009396:	4619      	mov	r1, r3
 8009398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800939a:	440b      	add	r3, r1
 800939c:	3b01      	subs	r3, #1
 800939e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80093a0:	8989      	ldrh	r1, [r1, #12]
 80093a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d201      	bcs.n	80093ae <find_volume+0x416>
 80093aa:	230d      	movs	r3, #13
 80093ac:	e06d      	b.n	800948a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80093ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093b4:	619a      	str	r2, [r3, #24]
 80093b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b8:	699a      	ldr	r2, [r3, #24]
 80093ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093bc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80093be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c0:	2280      	movs	r2, #128	; 0x80
 80093c2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80093c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093c8:	2b03      	cmp	r3, #3
 80093ca:	d149      	bne.n	8009460 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80093cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ce:	3338      	adds	r3, #56	; 0x38
 80093d0:	3330      	adds	r3, #48	; 0x30
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fd ff60 	bl	8007298 <ld_word>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d140      	bne.n	8009460 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80093de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093e0:	3301      	adds	r3, #1
 80093e2:	4619      	mov	r1, r3
 80093e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80093e6:	f7fe fa07 	bl	80077f8 <move_window>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d137      	bne.n	8009460 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80093f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f2:	2200      	movs	r2, #0
 80093f4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80093f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f8:	3338      	adds	r3, #56	; 0x38
 80093fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fd ff4a 	bl	8007298 <ld_word>
 8009404:	4603      	mov	r3, r0
 8009406:	461a      	mov	r2, r3
 8009408:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800940c:	429a      	cmp	r2, r3
 800940e:	d127      	bne.n	8009460 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009412:	3338      	adds	r3, #56	; 0x38
 8009414:	4618      	mov	r0, r3
 8009416:	f7fd ff57 	bl	80072c8 <ld_dword>
 800941a:	4603      	mov	r3, r0
 800941c:	4a1d      	ldr	r2, [pc, #116]	; (8009494 <find_volume+0x4fc>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d11e      	bne.n	8009460 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009424:	3338      	adds	r3, #56	; 0x38
 8009426:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800942a:	4618      	mov	r0, r3
 800942c:	f7fd ff4c 	bl	80072c8 <ld_dword>
 8009430:	4603      	mov	r3, r0
 8009432:	4a19      	ldr	r2, [pc, #100]	; (8009498 <find_volume+0x500>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d113      	bne.n	8009460 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943a:	3338      	adds	r3, #56	; 0x38
 800943c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009440:	4618      	mov	r0, r3
 8009442:	f7fd ff41 	bl	80072c8 <ld_dword>
 8009446:	4602      	mov	r2, r0
 8009448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800944c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944e:	3338      	adds	r3, #56	; 0x38
 8009450:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009454:	4618      	mov	r0, r3
 8009456:	f7fd ff37 	bl	80072c8 <ld_dword>
 800945a:	4602      	mov	r2, r0
 800945c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009462:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009466:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009468:	4b0c      	ldr	r3, [pc, #48]	; (800949c <find_volume+0x504>)
 800946a:	881b      	ldrh	r3, [r3, #0]
 800946c:	3301      	adds	r3, #1
 800946e:	b29a      	uxth	r2, r3
 8009470:	4b0a      	ldr	r3, [pc, #40]	; (800949c <find_volume+0x504>)
 8009472:	801a      	strh	r2, [r3, #0]
 8009474:	4b09      	ldr	r3, [pc, #36]	; (800949c <find_volume+0x504>)
 8009476:	881a      	ldrh	r2, [r3, #0]
 8009478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800947c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947e:	4a08      	ldr	r2, [pc, #32]	; (80094a0 <find_volume+0x508>)
 8009480:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009482:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009484:	f7fe f950 	bl	8007728 <clear_lock>
#endif
	return FR_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3758      	adds	r7, #88	; 0x58
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	41615252 	.word	0x41615252
 8009498:	61417272 	.word	0x61417272
 800949c:	20017458 	.word	0x20017458
 80094a0:	2001747c 	.word	0x2001747c

080094a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80094ae:	2309      	movs	r3, #9
 80094b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d01c      	beq.n	80094f2 <validate+0x4e>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d018      	beq.n	80094f2 <validate+0x4e>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d013      	beq.n	80094f2 <validate+0x4e>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	889a      	ldrh	r2, [r3, #4]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	88db      	ldrh	r3, [r3, #6]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d10c      	bne.n	80094f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	785b      	ldrb	r3, [r3, #1]
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fd fe3c 	bl	800715c <disk_status>
 80094e4:	4603      	mov	r3, r0
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d101      	bne.n	80094f2 <validate+0x4e>
			res = FR_OK;
 80094ee:	2300      	movs	r3, #0
 80094f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d102      	bne.n	80094fe <validate+0x5a>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	e000      	b.n	8009500 <validate+0x5c>
 80094fe:	2300      	movs	r3, #0
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	6013      	str	r3, [r2, #0]
	return res;
 8009504:	7bfb      	ldrb	r3, [r7, #15]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
	...

08009510 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b088      	sub	sp, #32
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	4613      	mov	r3, r2
 800951c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009522:	f107 0310 	add.w	r3, r7, #16
 8009526:	4618      	mov	r0, r3
 8009528:	f7ff fc9c 	bl	8008e64 <get_ldnumber>
 800952c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	2b00      	cmp	r3, #0
 8009532:	da01      	bge.n	8009538 <f_mount+0x28>
 8009534:	230b      	movs	r3, #11
 8009536:	e02b      	b.n	8009590 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009538:	4a17      	ldr	r2, [pc, #92]	; (8009598 <f_mount+0x88>)
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009540:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d005      	beq.n	8009554 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009548:	69b8      	ldr	r0, [r7, #24]
 800954a:	f7fe f8ed 	bl	8007728 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	2200      	movs	r2, #0
 8009552:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	490d      	ldr	r1, [pc, #52]	; (8009598 <f_mount+0x88>)
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d002      	beq.n	8009576 <f_mount+0x66>
 8009570:	79fb      	ldrb	r3, [r7, #7]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d001      	beq.n	800957a <f_mount+0x6a>
 8009576:	2300      	movs	r3, #0
 8009578:	e00a      	b.n	8009590 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800957a:	f107 010c 	add.w	r1, r7, #12
 800957e:	f107 0308 	add.w	r3, r7, #8
 8009582:	2200      	movs	r2, #0
 8009584:	4618      	mov	r0, r3
 8009586:	f7ff fd07 	bl	8008f98 <find_volume>
 800958a:	4603      	mov	r3, r0
 800958c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800958e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3720      	adds	r7, #32
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	20017454 	.word	0x20017454

0800959c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b09a      	sub	sp, #104	; 0x68
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	4613      	mov	r3, r2
 80095a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d101      	bne.n	80095b4 <f_open+0x18>
 80095b0:	2309      	movs	r3, #9
 80095b2:	e1bb      	b.n	800992c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80095b4:	79fb      	ldrb	r3, [r7, #7]
 80095b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80095bc:	79fa      	ldrb	r2, [r7, #7]
 80095be:	f107 0114 	add.w	r1, r7, #20
 80095c2:	f107 0308 	add.w	r3, r7, #8
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7ff fce6 	bl	8008f98 <find_volume>
 80095cc:	4603      	mov	r3, r0
 80095ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80095d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f040 819f 	bne.w	800991a <f_open+0x37e>
		dj.obj.fs = fs;
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	f107 0318 	add.w	r3, r7, #24
 80095e6:	4611      	mov	r1, r2
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7ff fbc5 	bl	8008d78 <follow_path>
 80095ee:	4603      	mov	r3, r0
 80095f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80095f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d11a      	bne.n	8009632 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80095fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009600:	b25b      	sxtb	r3, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	da03      	bge.n	800960e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009606:	2306      	movs	r3, #6
 8009608:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800960c:	e011      	b.n	8009632 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800960e:	79fb      	ldrb	r3, [r7, #7]
 8009610:	f023 0301 	bic.w	r3, r3, #1
 8009614:	2b00      	cmp	r3, #0
 8009616:	bf14      	ite	ne
 8009618:	2301      	movne	r3, #1
 800961a:	2300      	moveq	r3, #0
 800961c:	b2db      	uxtb	r3, r3
 800961e:	461a      	mov	r2, r3
 8009620:	f107 0318 	add.w	r3, r7, #24
 8009624:	4611      	mov	r1, r2
 8009626:	4618      	mov	r0, r3
 8009628:	f7fd ff36 	bl	8007498 <chk_lock>
 800962c:	4603      	mov	r3, r0
 800962e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009632:	79fb      	ldrb	r3, [r7, #7]
 8009634:	f003 031c 	and.w	r3, r3, #28
 8009638:	2b00      	cmp	r3, #0
 800963a:	d07f      	beq.n	800973c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800963c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009640:	2b00      	cmp	r3, #0
 8009642:	d017      	beq.n	8009674 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009644:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009648:	2b04      	cmp	r3, #4
 800964a:	d10e      	bne.n	800966a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800964c:	f7fd ff80 	bl	8007550 <enq_lock>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d006      	beq.n	8009664 <f_open+0xc8>
 8009656:	f107 0318 	add.w	r3, r7, #24
 800965a:	4618      	mov	r0, r3
 800965c:	f7ff f8dc 	bl	8008818 <dir_register>
 8009660:	4603      	mov	r3, r0
 8009662:	e000      	b.n	8009666 <f_open+0xca>
 8009664:	2312      	movs	r3, #18
 8009666:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800966a:	79fb      	ldrb	r3, [r7, #7]
 800966c:	f043 0308 	orr.w	r3, r3, #8
 8009670:	71fb      	strb	r3, [r7, #7]
 8009672:	e010      	b.n	8009696 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009674:	7fbb      	ldrb	r3, [r7, #30]
 8009676:	f003 0311 	and.w	r3, r3, #17
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <f_open+0xea>
					res = FR_DENIED;
 800967e:	2307      	movs	r3, #7
 8009680:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009684:	e007      	b.n	8009696 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009686:	79fb      	ldrb	r3, [r7, #7]
 8009688:	f003 0304 	and.w	r3, r3, #4
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <f_open+0xfa>
 8009690:	2308      	movs	r3, #8
 8009692:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009696:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800969a:	2b00      	cmp	r3, #0
 800969c:	d168      	bne.n	8009770 <f_open+0x1d4>
 800969e:	79fb      	ldrb	r3, [r7, #7]
 80096a0:	f003 0308 	and.w	r3, r3, #8
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d063      	beq.n	8009770 <f_open+0x1d4>
				dw = GET_FATTIME();
 80096a8:	f7fd fcf6 	bl	8007098 <get_fattime>
 80096ac:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80096ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b0:	330e      	adds	r3, #14
 80096b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fd fe45 	bl	8007344 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80096ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096bc:	3316      	adds	r3, #22
 80096be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7fd fe3f 	bl	8007344 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80096c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c8:	330b      	adds	r3, #11
 80096ca:	2220      	movs	r2, #32
 80096cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096d2:	4611      	mov	r1, r2
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fe fe17 	bl	8008308 <ld_clust>
 80096da:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096e0:	2200      	movs	r2, #0
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fe fe2f 	bl	8008346 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80096e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ea:	331c      	adds	r3, #28
 80096ec:	2100      	movs	r1, #0
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fd fe28 	bl	8007344 <st_dword>
					fs->wflag = 1;
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	2201      	movs	r2, #1
 80096f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80096fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d037      	beq.n	8009770 <f_open+0x1d4>
						dw = fs->winsect;
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009704:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009706:	f107 0318 	add.w	r3, r7, #24
 800970a:	2200      	movs	r2, #0
 800970c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800970e:	4618      	mov	r0, r3
 8009710:	f7fe fb1f 	bl	8007d52 <remove_chain>
 8009714:	4603      	mov	r3, r0
 8009716:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800971a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800971e:	2b00      	cmp	r3, #0
 8009720:	d126      	bne.n	8009770 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009726:	4618      	mov	r0, r3
 8009728:	f7fe f866 	bl	80077f8 <move_window>
 800972c:	4603      	mov	r3, r0
 800972e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009736:	3a01      	subs	r2, #1
 8009738:	615a      	str	r2, [r3, #20]
 800973a:	e019      	b.n	8009770 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800973c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009740:	2b00      	cmp	r3, #0
 8009742:	d115      	bne.n	8009770 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009744:	7fbb      	ldrb	r3, [r7, #30]
 8009746:	f003 0310 	and.w	r3, r3, #16
 800974a:	2b00      	cmp	r3, #0
 800974c:	d003      	beq.n	8009756 <f_open+0x1ba>
					res = FR_NO_FILE;
 800974e:	2304      	movs	r3, #4
 8009750:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009754:	e00c      	b.n	8009770 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009756:	79fb      	ldrb	r3, [r7, #7]
 8009758:	f003 0302 	and.w	r3, r3, #2
 800975c:	2b00      	cmp	r3, #0
 800975e:	d007      	beq.n	8009770 <f_open+0x1d4>
 8009760:	7fbb      	ldrb	r3, [r7, #30]
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	2b00      	cmp	r3, #0
 8009768:	d002      	beq.n	8009770 <f_open+0x1d4>
						res = FR_DENIED;
 800976a:	2307      	movs	r3, #7
 800976c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009770:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009774:	2b00      	cmp	r3, #0
 8009776:	d128      	bne.n	80097ca <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009778:	79fb      	ldrb	r3, [r7, #7]
 800977a:	f003 0308 	and.w	r3, r3, #8
 800977e:	2b00      	cmp	r3, #0
 8009780:	d003      	beq.n	800978a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009782:	79fb      	ldrb	r3, [r7, #7]
 8009784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009788:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009798:	79fb      	ldrb	r3, [r7, #7]
 800979a:	f023 0301 	bic.w	r3, r3, #1
 800979e:	2b00      	cmp	r3, #0
 80097a0:	bf14      	ite	ne
 80097a2:	2301      	movne	r3, #1
 80097a4:	2300      	moveq	r3, #0
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	461a      	mov	r2, r3
 80097aa:	f107 0318 	add.w	r3, r7, #24
 80097ae:	4611      	mov	r1, r2
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fd feef 	bl	8007594 <inc_lock>
 80097b6:	4602      	mov	r2, r0
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d102      	bne.n	80097ca <f_open+0x22e>
 80097c4:	2302      	movs	r3, #2
 80097c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80097ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f040 80a3 	bne.w	800991a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097d8:	4611      	mov	r1, r2
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fe fd94 	bl	8008308 <ld_clust>
 80097e0:	4602      	mov	r2, r0
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80097e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e8:	331c      	adds	r3, #28
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fd fd6c 	bl	80072c8 <ld_dword>
 80097f0:	4602      	mov	r2, r0
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	88da      	ldrh	r2, [r3, #6]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	79fa      	ldrb	r2, [r7, #7]
 800980e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2200      	movs	r2, #0
 8009814:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	3330      	adds	r3, #48	; 0x30
 8009826:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800982a:	2100      	movs	r1, #0
 800982c:	4618      	mov	r0, r3
 800982e:	f7fd fdd6 	bl	80073de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009832:	79fb      	ldrb	r3, [r7, #7]
 8009834:	f003 0320 	and.w	r3, r3, #32
 8009838:	2b00      	cmp	r3, #0
 800983a:	d06e      	beq.n	800991a <f_open+0x37e>
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d06a      	beq.n	800991a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	68da      	ldr	r2, [r3, #12]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	895b      	ldrh	r3, [r3, #10]
 8009850:	461a      	mov	r2, r3
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	899b      	ldrh	r3, [r3, #12]
 8009856:	fb02 f303 	mul.w	r3, r2, r3
 800985a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009868:	e016      	b.n	8009898 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800986e:	4618      	mov	r0, r3
 8009870:	f7fe f87f 	bl	8007972 <get_fat>
 8009874:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009878:	2b01      	cmp	r3, #1
 800987a:	d802      	bhi.n	8009882 <f_open+0x2e6>
 800987c:	2302      	movs	r3, #2
 800987e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009888:	d102      	bne.n	8009890 <f_open+0x2f4>
 800988a:	2301      	movs	r3, #1
 800988c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009890:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009898:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800989c:	2b00      	cmp	r3, #0
 800989e:	d103      	bne.n	80098a8 <f_open+0x30c>
 80098a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80098a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d8e0      	bhi.n	800986a <f_open+0x2ce>
				}
				fp->clust = clst;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80098ac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80098ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d131      	bne.n	800991a <f_open+0x37e>
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	899b      	ldrh	r3, [r3, #12]
 80098ba:	461a      	mov	r2, r3
 80098bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098be:	fbb3 f1f2 	udiv	r1, r3, r2
 80098c2:	fb01 f202 	mul.w	r2, r1, r2
 80098c6:	1a9b      	subs	r3, r3, r2
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d026      	beq.n	800991a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7fe f82f 	bl	8007934 <clust2sect>
 80098d6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80098d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d103      	bne.n	80098e6 <f_open+0x34a>
						res = FR_INT_ERR;
 80098de:	2302      	movs	r3, #2
 80098e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80098e4:	e019      	b.n	800991a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	899b      	ldrh	r3, [r3, #12]
 80098ea:	461a      	mov	r2, r3
 80098ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80098f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098f4:	441a      	add	r2, r3
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	7858      	ldrb	r0, [r3, #1]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6a1a      	ldr	r2, [r3, #32]
 8009908:	2301      	movs	r3, #1
 800990a:	f7fd fc67 	bl	80071dc <disk_read>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d002      	beq.n	800991a <f_open+0x37e>
 8009914:	2301      	movs	r3, #1
 8009916:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800991a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800991e:	2b00      	cmp	r3, #0
 8009920:	d002      	beq.n	8009928 <f_open+0x38c>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009928:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800992c:	4618      	mov	r0, r3
 800992e:	3768      	adds	r7, #104	; 0x68
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b08e      	sub	sp, #56	; 0x38
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	2200      	movs	r2, #0
 800994a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f107 0214 	add.w	r2, r7, #20
 8009952:	4611      	mov	r1, r2
 8009954:	4618      	mov	r0, r3
 8009956:	f7ff fda5 	bl	80094a4 <validate>
 800995a:	4603      	mov	r3, r0
 800995c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009960:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009964:	2b00      	cmp	r3, #0
 8009966:	d107      	bne.n	8009978 <f_read+0x44>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	7d5b      	ldrb	r3, [r3, #21]
 800996c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009970:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <f_read+0x4a>
 8009978:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800997c:	e135      	b.n	8009bea <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	7d1b      	ldrb	r3, [r3, #20]
 8009982:	f003 0301 	and.w	r3, r3, #1
 8009986:	2b00      	cmp	r3, #0
 8009988:	d101      	bne.n	800998e <f_read+0x5a>
 800998a:	2307      	movs	r3, #7
 800998c:	e12d      	b.n	8009bea <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	68da      	ldr	r2, [r3, #12]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	429a      	cmp	r2, r3
 80099a0:	f240 811e 	bls.w	8009be0 <f_read+0x2ac>
 80099a4:	6a3b      	ldr	r3, [r7, #32]
 80099a6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80099a8:	e11a      	b.n	8009be0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	8992      	ldrh	r2, [r2, #12]
 80099b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80099b6:	fb01 f202 	mul.w	r2, r1, r2
 80099ba:	1a9b      	subs	r3, r3, r2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f040 80d5 	bne.w	8009b6c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	8992      	ldrh	r2, [r2, #12]
 80099ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	8952      	ldrh	r2, [r2, #10]
 80099d2:	3a01      	subs	r2, #1
 80099d4:	4013      	ands	r3, r2
 80099d6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d12f      	bne.n	8009a3e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d103      	bne.n	80099ee <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	633b      	str	r3, [r7, #48]	; 0x30
 80099ec:	e013      	b.n	8009a16 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d007      	beq.n	8009a06 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	4619      	mov	r1, r3
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f7fe faa5 	bl	8007f4c <clmt_clust>
 8009a02:	6338      	str	r0, [r7, #48]	; 0x30
 8009a04:	e007      	b.n	8009a16 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	69db      	ldr	r3, [r3, #28]
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	4610      	mov	r0, r2
 8009a10:	f7fd ffaf 	bl	8007972 <get_fat>
 8009a14:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d804      	bhi.n	8009a26 <f_read+0xf2>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2202      	movs	r2, #2
 8009a20:	755a      	strb	r2, [r3, #21]
 8009a22:	2302      	movs	r3, #2
 8009a24:	e0e1      	b.n	8009bea <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a2c:	d104      	bne.n	8009a38 <f_read+0x104>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2201      	movs	r2, #1
 8009a32:	755a      	strb	r2, [r3, #21]
 8009a34:	2301      	movs	r3, #1
 8009a36:	e0d8      	b.n	8009bea <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a3c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009a3e:	697a      	ldr	r2, [r7, #20]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	69db      	ldr	r3, [r3, #28]
 8009a44:	4619      	mov	r1, r3
 8009a46:	4610      	mov	r0, r2
 8009a48:	f7fd ff74 	bl	8007934 <clust2sect>
 8009a4c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d104      	bne.n	8009a5e <f_read+0x12a>
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2202      	movs	r2, #2
 8009a58:	755a      	strb	r2, [r3, #21]
 8009a5a:	2302      	movs	r3, #2
 8009a5c:	e0c5      	b.n	8009bea <f_read+0x2b6>
			sect += csect;
 8009a5e:	69ba      	ldr	r2, [r7, #24]
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	4413      	add	r3, r2
 8009a64:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	899b      	ldrh	r3, [r3, #12]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a72:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d041      	beq.n	8009afe <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009a7a:	69fa      	ldr	r2, [r7, #28]
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	4413      	add	r3, r2
 8009a80:	697a      	ldr	r2, [r7, #20]
 8009a82:	8952      	ldrh	r2, [r2, #10]
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d905      	bls.n	8009a94 <f_read+0x160>
					cc = fs->csize - csect;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	895b      	ldrh	r3, [r3, #10]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	7858      	ldrb	r0, [r3, #1]
 8009a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9a:	69ba      	ldr	r2, [r7, #24]
 8009a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a9e:	f7fd fb9d 	bl	80071dc <disk_read>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d004      	beq.n	8009ab2 <f_read+0x17e>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	755a      	strb	r2, [r3, #21]
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e09b      	b.n	8009bea <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	7d1b      	ldrb	r3, [r3, #20]
 8009ab6:	b25b      	sxtb	r3, r3
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	da18      	bge.n	8009aee <f_read+0x1ba>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6a1a      	ldr	r2, [r3, #32]
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d911      	bls.n	8009aee <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6a1a      	ldr	r2, [r3, #32]
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	697a      	ldr	r2, [r7, #20]
 8009ad4:	8992      	ldrh	r2, [r2, #12]
 8009ad6:	fb02 f303 	mul.w	r3, r2, r3
 8009ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009adc:	18d0      	adds	r0, r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	899b      	ldrh	r3, [r3, #12]
 8009ae8:	461a      	mov	r2, r3
 8009aea:	f7fd fc57 	bl	800739c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	899b      	ldrh	r3, [r3, #12]
 8009af2:	461a      	mov	r2, r3
 8009af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af6:	fb02 f303 	mul.w	r3, r2, r3
 8009afa:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009afc:	e05c      	b.n	8009bb8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6a1b      	ldr	r3, [r3, #32]
 8009b02:	69ba      	ldr	r2, [r7, #24]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d02e      	beq.n	8009b66 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	7d1b      	ldrb	r3, [r3, #20]
 8009b0c:	b25b      	sxtb	r3, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	da18      	bge.n	8009b44 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	7858      	ldrb	r0, [r3, #1]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6a1a      	ldr	r2, [r3, #32]
 8009b20:	2301      	movs	r3, #1
 8009b22:	f7fd fb7b 	bl	800721c <disk_write>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d004      	beq.n	8009b36 <f_read+0x202>
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	755a      	strb	r2, [r3, #21]
 8009b32:	2301      	movs	r3, #1
 8009b34:	e059      	b.n	8009bea <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	7d1b      	ldrb	r3, [r3, #20]
 8009b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b3e:	b2da      	uxtb	r2, r3
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	7858      	ldrb	r0, [r3, #1]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b4e:	2301      	movs	r3, #1
 8009b50:	69ba      	ldr	r2, [r7, #24]
 8009b52:	f7fd fb43 	bl	80071dc <disk_read>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d004      	beq.n	8009b66 <f_read+0x232>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	755a      	strb	r2, [r3, #21]
 8009b62:	2301      	movs	r3, #1
 8009b64:	e041      	b.n	8009bea <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	69ba      	ldr	r2, [r7, #24]
 8009b6a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	899b      	ldrh	r3, [r3, #12]
 8009b70:	4618      	mov	r0, r3
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	8992      	ldrh	r2, [r2, #12]
 8009b7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b7e:	fb01 f202 	mul.w	r2, r1, r2
 8009b82:	1a9b      	subs	r3, r3, r2
 8009b84:	1ac3      	subs	r3, r0, r3
 8009b86:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d901      	bls.n	8009b94 <f_read+0x260>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	699b      	ldr	r3, [r3, #24]
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	8992      	ldrh	r2, [r2, #12]
 8009ba2:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ba6:	fb00 f202 	mul.w	r2, r0, r2
 8009baa:	1a9b      	subs	r3, r3, r2
 8009bac:	440b      	add	r3, r1
 8009bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bb4:	f7fd fbf2 	bl	800739c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbc:	4413      	add	r3, r2
 8009bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	699a      	ldr	r2, [r3, #24]
 8009bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc6:	441a      	add	r2, r3
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	619a      	str	r2, [r3, #24]
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd2:	441a      	add	r2, r3
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	601a      	str	r2, [r3, #0]
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f47f aee1 	bne.w	80099aa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3738      	adds	r7, #56	; 0x38
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b086      	sub	sp, #24
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f107 0208 	add.w	r2, r7, #8
 8009c00:	4611      	mov	r1, r2
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7ff fc4e 	bl	80094a4 <validate>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009c0c:	7dfb      	ldrb	r3, [r7, #23]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d168      	bne.n	8009ce4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	7d1b      	ldrb	r3, [r3, #20]
 8009c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d062      	beq.n	8009ce4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	7d1b      	ldrb	r3, [r3, #20]
 8009c22:	b25b      	sxtb	r3, r3
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	da15      	bge.n	8009c54 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	7858      	ldrb	r0, [r3, #1]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a1a      	ldr	r2, [r3, #32]
 8009c36:	2301      	movs	r3, #1
 8009c38:	f7fd faf0 	bl	800721c <disk_write>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <f_sync+0x54>
 8009c42:	2301      	movs	r3, #1
 8009c44:	e04f      	b.n	8009ce6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	7d1b      	ldrb	r3, [r3, #20]
 8009c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009c54:	f7fd fa20 	bl	8007098 <get_fattime>
 8009c58:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c60:	4619      	mov	r1, r3
 8009c62:	4610      	mov	r0, r2
 8009c64:	f7fd fdc8 	bl	80077f8 <move_window>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009c6c:	7dfb      	ldrb	r3, [r7, #23]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d138      	bne.n	8009ce4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c76:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	330b      	adds	r3, #11
 8009c7c:	781a      	ldrb	r2, [r3, #0]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	330b      	adds	r3, #11
 8009c82:	f042 0220 	orr.w	r2, r2, #32
 8009c86:	b2d2      	uxtb	r2, r2
 8009c88:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6818      	ldr	r0, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	461a      	mov	r2, r3
 8009c94:	68f9      	ldr	r1, [r7, #12]
 8009c96:	f7fe fb56 	bl	8008346 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f103 021c 	add.w	r2, r3, #28
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	f7fd fb4c 	bl	8007344 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	3316      	adds	r3, #22
 8009cb0:	6939      	ldr	r1, [r7, #16]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7fd fb46 	bl	8007344 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	3312      	adds	r3, #18
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fd fb25 	bl	800730e <st_word>
					fs->wflag = 1;
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7fd fdc1 	bl	8007854 <sync_fs>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	7d1b      	ldrb	r3, [r3, #20]
 8009cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cde:	b2da      	uxtb	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3718      	adds	r7, #24
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7ff ff7b 	bl	8009bf2 <f_sync>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d118      	bne.n	8009d38 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f107 0208 	add.w	r2, r7, #8
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7ff fbc8 	bl	80094a4 <validate>
 8009d14:	4603      	mov	r3, r0
 8009d16:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d10c      	bne.n	8009d38 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fd fcc4 	bl	80076b0 <dec_lock>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009d2c:	7bfb      	ldrb	r3, [r7, #15]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d102      	bne.n	8009d38 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
	...

08009d44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b087      	sub	sp, #28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009d52:	2301      	movs	r3, #1
 8009d54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009d56:	2300      	movs	r3, #0
 8009d58:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009d5a:	4b1f      	ldr	r3, [pc, #124]	; (8009dd8 <FATFS_LinkDriverEx+0x94>)
 8009d5c:	7a5b      	ldrb	r3, [r3, #9]
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d131      	bne.n	8009dc8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009d64:	4b1c      	ldr	r3, [pc, #112]	; (8009dd8 <FATFS_LinkDriverEx+0x94>)
 8009d66:	7a5b      	ldrb	r3, [r3, #9]
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	4b1a      	ldr	r3, [pc, #104]	; (8009dd8 <FATFS_LinkDriverEx+0x94>)
 8009d6e:	2100      	movs	r1, #0
 8009d70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009d72:	4b19      	ldr	r3, [pc, #100]	; (8009dd8 <FATFS_LinkDriverEx+0x94>)
 8009d74:	7a5b      	ldrb	r3, [r3, #9]
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	4a17      	ldr	r2, [pc, #92]	; (8009dd8 <FATFS_LinkDriverEx+0x94>)
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4413      	add	r3, r2
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009d82:	4b15      	ldr	r3, [pc, #84]	; (8009dd8 <FATFS_LinkDriverEx+0x94>)
 8009d84:	7a5b      	ldrb	r3, [r3, #9]
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	461a      	mov	r2, r3
 8009d8a:	4b13      	ldr	r3, [pc, #76]	; (8009dd8 <FATFS_LinkDriverEx+0x94>)
 8009d8c:	4413      	add	r3, r2
 8009d8e:	79fa      	ldrb	r2, [r7, #7]
 8009d90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009d92:	4b11      	ldr	r3, [pc, #68]	; (8009dd8 <FATFS_LinkDriverEx+0x94>)
 8009d94:	7a5b      	ldrb	r3, [r3, #9]
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	1c5a      	adds	r2, r3, #1
 8009d9a:	b2d1      	uxtb	r1, r2
 8009d9c:	4a0e      	ldr	r2, [pc, #56]	; (8009dd8 <FATFS_LinkDriverEx+0x94>)
 8009d9e:	7251      	strb	r1, [r2, #9]
 8009da0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009da2:	7dbb      	ldrb	r3, [r7, #22]
 8009da4:	3330      	adds	r3, #48	; 0x30
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	3301      	adds	r3, #1
 8009db0:	223a      	movs	r2, #58	; 0x3a
 8009db2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	3302      	adds	r3, #2
 8009db8:	222f      	movs	r2, #47	; 0x2f
 8009dba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	3303      	adds	r3, #3
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	371c      	adds	r7, #28
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	2001767c 	.word	0x2001767c

08009ddc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009de6:	2200      	movs	r2, #0
 8009de8:	6839      	ldr	r1, [r7, #0]
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7ff ffaa 	bl	8009d44 <FATFS_LinkDriverEx>
 8009df0:	4603      	mov	r3, r0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
	...

08009dfc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	4603      	mov	r3, r0
 8009e04:	6039      	str	r1, [r7, #0]
 8009e06:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009e08:	88fb      	ldrh	r3, [r7, #6]
 8009e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8009e0c:	d802      	bhi.n	8009e14 <ff_convert+0x18>
		c = chr;
 8009e0e:	88fb      	ldrh	r3, [r7, #6]
 8009e10:	81fb      	strh	r3, [r7, #14]
 8009e12:	e025      	b.n	8009e60 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00b      	beq.n	8009e32 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009e1a:	88fb      	ldrh	r3, [r7, #6]
 8009e1c:	2bff      	cmp	r3, #255	; 0xff
 8009e1e:	d805      	bhi.n	8009e2c <ff_convert+0x30>
 8009e20:	88fb      	ldrh	r3, [r7, #6]
 8009e22:	3b80      	subs	r3, #128	; 0x80
 8009e24:	4a12      	ldr	r2, [pc, #72]	; (8009e70 <ff_convert+0x74>)
 8009e26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e2a:	e000      	b.n	8009e2e <ff_convert+0x32>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	81fb      	strh	r3, [r7, #14]
 8009e30:	e016      	b.n	8009e60 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009e32:	2300      	movs	r3, #0
 8009e34:	81fb      	strh	r3, [r7, #14]
 8009e36:	e009      	b.n	8009e4c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009e38:	89fb      	ldrh	r3, [r7, #14]
 8009e3a:	4a0d      	ldr	r2, [pc, #52]	; (8009e70 <ff_convert+0x74>)
 8009e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e40:	88fa      	ldrh	r2, [r7, #6]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d006      	beq.n	8009e54 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009e46:	89fb      	ldrh	r3, [r7, #14]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	81fb      	strh	r3, [r7, #14]
 8009e4c:	89fb      	ldrh	r3, [r7, #14]
 8009e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8009e50:	d9f2      	bls.n	8009e38 <ff_convert+0x3c>
 8009e52:	e000      	b.n	8009e56 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009e54:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009e56:	89fb      	ldrh	r3, [r7, #14]
 8009e58:	3380      	adds	r3, #128	; 0x80
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009e60:	89fb      	ldrh	r3, [r7, #14]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3714      	adds	r7, #20
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	0800c608 	.word	0x0800c608

08009e74 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009e7e:	88fb      	ldrh	r3, [r7, #6]
 8009e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e84:	d201      	bcs.n	8009e8a <ff_wtoupper+0x16>
 8009e86:	4b3e      	ldr	r3, [pc, #248]	; (8009f80 <ff_wtoupper+0x10c>)
 8009e88:	e000      	b.n	8009e8c <ff_wtoupper+0x18>
 8009e8a:	4b3e      	ldr	r3, [pc, #248]	; (8009f84 <ff_wtoupper+0x110>)
 8009e8c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	1c9a      	adds	r2, r3, #2
 8009e92:	617a      	str	r2, [r7, #20]
 8009e94:	881b      	ldrh	r3, [r3, #0]
 8009e96:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009e98:	8a7b      	ldrh	r3, [r7, #18]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d068      	beq.n	8009f70 <ff_wtoupper+0xfc>
 8009e9e:	88fa      	ldrh	r2, [r7, #6]
 8009ea0:	8a7b      	ldrh	r3, [r7, #18]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d364      	bcc.n	8009f70 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	1c9a      	adds	r2, r3, #2
 8009eaa:	617a      	str	r2, [r7, #20]
 8009eac:	881b      	ldrh	r3, [r3, #0]
 8009eae:	823b      	strh	r3, [r7, #16]
 8009eb0:	8a3b      	ldrh	r3, [r7, #16]
 8009eb2:	0a1b      	lsrs	r3, r3, #8
 8009eb4:	81fb      	strh	r3, [r7, #14]
 8009eb6:	8a3b      	ldrh	r3, [r7, #16]
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009ebc:	88fa      	ldrh	r2, [r7, #6]
 8009ebe:	8a79      	ldrh	r1, [r7, #18]
 8009ec0:	8a3b      	ldrh	r3, [r7, #16]
 8009ec2:	440b      	add	r3, r1
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	da49      	bge.n	8009f5c <ff_wtoupper+0xe8>
			switch (cmd) {
 8009ec8:	89fb      	ldrh	r3, [r7, #14]
 8009eca:	2b08      	cmp	r3, #8
 8009ecc:	d84f      	bhi.n	8009f6e <ff_wtoupper+0xfa>
 8009ece:	a201      	add	r2, pc, #4	; (adr r2, 8009ed4 <ff_wtoupper+0x60>)
 8009ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed4:	08009ef9 	.word	0x08009ef9
 8009ed8:	08009f0b 	.word	0x08009f0b
 8009edc:	08009f21 	.word	0x08009f21
 8009ee0:	08009f29 	.word	0x08009f29
 8009ee4:	08009f31 	.word	0x08009f31
 8009ee8:	08009f39 	.word	0x08009f39
 8009eec:	08009f41 	.word	0x08009f41
 8009ef0:	08009f49 	.word	0x08009f49
 8009ef4:	08009f51 	.word	0x08009f51
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009ef8:	88fa      	ldrh	r2, [r7, #6]
 8009efa:	8a7b      	ldrh	r3, [r7, #18]
 8009efc:	1ad3      	subs	r3, r2, r3
 8009efe:	005b      	lsls	r3, r3, #1
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	4413      	add	r3, r2
 8009f04:	881b      	ldrh	r3, [r3, #0]
 8009f06:	80fb      	strh	r3, [r7, #6]
 8009f08:	e027      	b.n	8009f5a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009f0a:	88fa      	ldrh	r2, [r7, #6]
 8009f0c:	8a7b      	ldrh	r3, [r7, #18]
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	f003 0301 	and.w	r3, r3, #1
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	88fa      	ldrh	r2, [r7, #6]
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	80fb      	strh	r3, [r7, #6]
 8009f1e:	e01c      	b.n	8009f5a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009f20:	88fb      	ldrh	r3, [r7, #6]
 8009f22:	3b10      	subs	r3, #16
 8009f24:	80fb      	strh	r3, [r7, #6]
 8009f26:	e018      	b.n	8009f5a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009f28:	88fb      	ldrh	r3, [r7, #6]
 8009f2a:	3b20      	subs	r3, #32
 8009f2c:	80fb      	strh	r3, [r7, #6]
 8009f2e:	e014      	b.n	8009f5a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009f30:	88fb      	ldrh	r3, [r7, #6]
 8009f32:	3b30      	subs	r3, #48	; 0x30
 8009f34:	80fb      	strh	r3, [r7, #6]
 8009f36:	e010      	b.n	8009f5a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009f38:	88fb      	ldrh	r3, [r7, #6]
 8009f3a:	3b1a      	subs	r3, #26
 8009f3c:	80fb      	strh	r3, [r7, #6]
 8009f3e:	e00c      	b.n	8009f5a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009f40:	88fb      	ldrh	r3, [r7, #6]
 8009f42:	3308      	adds	r3, #8
 8009f44:	80fb      	strh	r3, [r7, #6]
 8009f46:	e008      	b.n	8009f5a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009f48:	88fb      	ldrh	r3, [r7, #6]
 8009f4a:	3b50      	subs	r3, #80	; 0x50
 8009f4c:	80fb      	strh	r3, [r7, #6]
 8009f4e:	e004      	b.n	8009f5a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009f50:	88fb      	ldrh	r3, [r7, #6]
 8009f52:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8009f56:	80fb      	strh	r3, [r7, #6]
 8009f58:	bf00      	nop
			}
			break;
 8009f5a:	e008      	b.n	8009f6e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009f5c:	89fb      	ldrh	r3, [r7, #14]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d195      	bne.n	8009e8e <ff_wtoupper+0x1a>
 8009f62:	8a3b      	ldrh	r3, [r7, #16]
 8009f64:	005b      	lsls	r3, r3, #1
 8009f66:	697a      	ldr	r2, [r7, #20]
 8009f68:	4413      	add	r3, r2
 8009f6a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009f6c:	e78f      	b.n	8009e8e <ff_wtoupper+0x1a>
			break;
 8009f6e:	bf00      	nop
	}

	return chr;
 8009f70:	88fb      	ldrh	r3, [r7, #6]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	371c      	adds	r7, #28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	0800c708 	.word	0x0800c708
 8009f84:	0800c8fc 	.word	0x0800c8fc

08009f88 <__errno>:
 8009f88:	4b01      	ldr	r3, [pc, #4]	; (8009f90 <__errno+0x8>)
 8009f8a:	6818      	ldr	r0, [r3, #0]
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	200000a4 	.word	0x200000a4

08009f94 <__libc_init_array>:
 8009f94:	b570      	push	{r4, r5, r6, lr}
 8009f96:	4d0d      	ldr	r5, [pc, #52]	; (8009fcc <__libc_init_array+0x38>)
 8009f98:	4c0d      	ldr	r4, [pc, #52]	; (8009fd0 <__libc_init_array+0x3c>)
 8009f9a:	1b64      	subs	r4, r4, r5
 8009f9c:	10a4      	asrs	r4, r4, #2
 8009f9e:	2600      	movs	r6, #0
 8009fa0:	42a6      	cmp	r6, r4
 8009fa2:	d109      	bne.n	8009fb8 <__libc_init_array+0x24>
 8009fa4:	4d0b      	ldr	r5, [pc, #44]	; (8009fd4 <__libc_init_array+0x40>)
 8009fa6:	4c0c      	ldr	r4, [pc, #48]	; (8009fd8 <__libc_init_array+0x44>)
 8009fa8:	f001 fef6 	bl	800bd98 <_init>
 8009fac:	1b64      	subs	r4, r4, r5
 8009fae:	10a4      	asrs	r4, r4, #2
 8009fb0:	2600      	movs	r6, #0
 8009fb2:	42a6      	cmp	r6, r4
 8009fb4:	d105      	bne.n	8009fc2 <__libc_init_array+0x2e>
 8009fb6:	bd70      	pop	{r4, r5, r6, pc}
 8009fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fbc:	4798      	blx	r3
 8009fbe:	3601      	adds	r6, #1
 8009fc0:	e7ee      	b.n	8009fa0 <__libc_init_array+0xc>
 8009fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fc6:	4798      	blx	r3
 8009fc8:	3601      	adds	r6, #1
 8009fca:	e7f2      	b.n	8009fb2 <__libc_init_array+0x1e>
 8009fcc:	0800cb74 	.word	0x0800cb74
 8009fd0:	0800cb74 	.word	0x0800cb74
 8009fd4:	0800cb74 	.word	0x0800cb74
 8009fd8:	0800cb78 	.word	0x0800cb78

08009fdc <memcmp>:
 8009fdc:	b510      	push	{r4, lr}
 8009fde:	3901      	subs	r1, #1
 8009fe0:	4402      	add	r2, r0
 8009fe2:	4290      	cmp	r0, r2
 8009fe4:	d101      	bne.n	8009fea <memcmp+0xe>
 8009fe6:	2000      	movs	r0, #0
 8009fe8:	e005      	b.n	8009ff6 <memcmp+0x1a>
 8009fea:	7803      	ldrb	r3, [r0, #0]
 8009fec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	d001      	beq.n	8009ff8 <memcmp+0x1c>
 8009ff4:	1b18      	subs	r0, r3, r4
 8009ff6:	bd10      	pop	{r4, pc}
 8009ff8:	3001      	adds	r0, #1
 8009ffa:	e7f2      	b.n	8009fe2 <memcmp+0x6>

08009ffc <memcpy>:
 8009ffc:	440a      	add	r2, r1
 8009ffe:	4291      	cmp	r1, r2
 800a000:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a004:	d100      	bne.n	800a008 <memcpy+0xc>
 800a006:	4770      	bx	lr
 800a008:	b510      	push	{r4, lr}
 800a00a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a00e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a012:	4291      	cmp	r1, r2
 800a014:	d1f9      	bne.n	800a00a <memcpy+0xe>
 800a016:	bd10      	pop	{r4, pc}

0800a018 <memset>:
 800a018:	4402      	add	r2, r0
 800a01a:	4603      	mov	r3, r0
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d100      	bne.n	800a022 <memset+0xa>
 800a020:	4770      	bx	lr
 800a022:	f803 1b01 	strb.w	r1, [r3], #1
 800a026:	e7f9      	b.n	800a01c <memset+0x4>

0800a028 <_free_r>:
 800a028:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a02a:	2900      	cmp	r1, #0
 800a02c:	d044      	beq.n	800a0b8 <_free_r+0x90>
 800a02e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a032:	9001      	str	r0, [sp, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	f1a1 0404 	sub.w	r4, r1, #4
 800a03a:	bfb8      	it	lt
 800a03c:	18e4      	addlt	r4, r4, r3
 800a03e:	f000 fe9b 	bl	800ad78 <__malloc_lock>
 800a042:	4a1e      	ldr	r2, [pc, #120]	; (800a0bc <_free_r+0x94>)
 800a044:	9801      	ldr	r0, [sp, #4]
 800a046:	6813      	ldr	r3, [r2, #0]
 800a048:	b933      	cbnz	r3, 800a058 <_free_r+0x30>
 800a04a:	6063      	str	r3, [r4, #4]
 800a04c:	6014      	str	r4, [r2, #0]
 800a04e:	b003      	add	sp, #12
 800a050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a054:	f000 be96 	b.w	800ad84 <__malloc_unlock>
 800a058:	42a3      	cmp	r3, r4
 800a05a:	d908      	bls.n	800a06e <_free_r+0x46>
 800a05c:	6825      	ldr	r5, [r4, #0]
 800a05e:	1961      	adds	r1, r4, r5
 800a060:	428b      	cmp	r3, r1
 800a062:	bf01      	itttt	eq
 800a064:	6819      	ldreq	r1, [r3, #0]
 800a066:	685b      	ldreq	r3, [r3, #4]
 800a068:	1949      	addeq	r1, r1, r5
 800a06a:	6021      	streq	r1, [r4, #0]
 800a06c:	e7ed      	b.n	800a04a <_free_r+0x22>
 800a06e:	461a      	mov	r2, r3
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	b10b      	cbz	r3, 800a078 <_free_r+0x50>
 800a074:	42a3      	cmp	r3, r4
 800a076:	d9fa      	bls.n	800a06e <_free_r+0x46>
 800a078:	6811      	ldr	r1, [r2, #0]
 800a07a:	1855      	adds	r5, r2, r1
 800a07c:	42a5      	cmp	r5, r4
 800a07e:	d10b      	bne.n	800a098 <_free_r+0x70>
 800a080:	6824      	ldr	r4, [r4, #0]
 800a082:	4421      	add	r1, r4
 800a084:	1854      	adds	r4, r2, r1
 800a086:	42a3      	cmp	r3, r4
 800a088:	6011      	str	r1, [r2, #0]
 800a08a:	d1e0      	bne.n	800a04e <_free_r+0x26>
 800a08c:	681c      	ldr	r4, [r3, #0]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	6053      	str	r3, [r2, #4]
 800a092:	4421      	add	r1, r4
 800a094:	6011      	str	r1, [r2, #0]
 800a096:	e7da      	b.n	800a04e <_free_r+0x26>
 800a098:	d902      	bls.n	800a0a0 <_free_r+0x78>
 800a09a:	230c      	movs	r3, #12
 800a09c:	6003      	str	r3, [r0, #0]
 800a09e:	e7d6      	b.n	800a04e <_free_r+0x26>
 800a0a0:	6825      	ldr	r5, [r4, #0]
 800a0a2:	1961      	adds	r1, r4, r5
 800a0a4:	428b      	cmp	r3, r1
 800a0a6:	bf04      	itt	eq
 800a0a8:	6819      	ldreq	r1, [r3, #0]
 800a0aa:	685b      	ldreq	r3, [r3, #4]
 800a0ac:	6063      	str	r3, [r4, #4]
 800a0ae:	bf04      	itt	eq
 800a0b0:	1949      	addeq	r1, r1, r5
 800a0b2:	6021      	streq	r1, [r4, #0]
 800a0b4:	6054      	str	r4, [r2, #4]
 800a0b6:	e7ca      	b.n	800a04e <_free_r+0x26>
 800a0b8:	b003      	add	sp, #12
 800a0ba:	bd30      	pop	{r4, r5, pc}
 800a0bc:	20017688 	.word	0x20017688

0800a0c0 <sbrk_aligned>:
 800a0c0:	b570      	push	{r4, r5, r6, lr}
 800a0c2:	4e0e      	ldr	r6, [pc, #56]	; (800a0fc <sbrk_aligned+0x3c>)
 800a0c4:	460c      	mov	r4, r1
 800a0c6:	6831      	ldr	r1, [r6, #0]
 800a0c8:	4605      	mov	r5, r0
 800a0ca:	b911      	cbnz	r1, 800a0d2 <sbrk_aligned+0x12>
 800a0cc:	f000 fa8a 	bl	800a5e4 <_sbrk_r>
 800a0d0:	6030      	str	r0, [r6, #0]
 800a0d2:	4621      	mov	r1, r4
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	f000 fa85 	bl	800a5e4 <_sbrk_r>
 800a0da:	1c43      	adds	r3, r0, #1
 800a0dc:	d00a      	beq.n	800a0f4 <sbrk_aligned+0x34>
 800a0de:	1cc4      	adds	r4, r0, #3
 800a0e0:	f024 0403 	bic.w	r4, r4, #3
 800a0e4:	42a0      	cmp	r0, r4
 800a0e6:	d007      	beq.n	800a0f8 <sbrk_aligned+0x38>
 800a0e8:	1a21      	subs	r1, r4, r0
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	f000 fa7a 	bl	800a5e4 <_sbrk_r>
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	d101      	bne.n	800a0f8 <sbrk_aligned+0x38>
 800a0f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	bd70      	pop	{r4, r5, r6, pc}
 800a0fc:	2001768c 	.word	0x2001768c

0800a100 <_malloc_r>:
 800a100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a104:	1ccd      	adds	r5, r1, #3
 800a106:	f025 0503 	bic.w	r5, r5, #3
 800a10a:	3508      	adds	r5, #8
 800a10c:	2d0c      	cmp	r5, #12
 800a10e:	bf38      	it	cc
 800a110:	250c      	movcc	r5, #12
 800a112:	2d00      	cmp	r5, #0
 800a114:	4607      	mov	r7, r0
 800a116:	db01      	blt.n	800a11c <_malloc_r+0x1c>
 800a118:	42a9      	cmp	r1, r5
 800a11a:	d905      	bls.n	800a128 <_malloc_r+0x28>
 800a11c:	230c      	movs	r3, #12
 800a11e:	603b      	str	r3, [r7, #0]
 800a120:	2600      	movs	r6, #0
 800a122:	4630      	mov	r0, r6
 800a124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a128:	4e2e      	ldr	r6, [pc, #184]	; (800a1e4 <_malloc_r+0xe4>)
 800a12a:	f000 fe25 	bl	800ad78 <__malloc_lock>
 800a12e:	6833      	ldr	r3, [r6, #0]
 800a130:	461c      	mov	r4, r3
 800a132:	bb34      	cbnz	r4, 800a182 <_malloc_r+0x82>
 800a134:	4629      	mov	r1, r5
 800a136:	4638      	mov	r0, r7
 800a138:	f7ff ffc2 	bl	800a0c0 <sbrk_aligned>
 800a13c:	1c43      	adds	r3, r0, #1
 800a13e:	4604      	mov	r4, r0
 800a140:	d14d      	bne.n	800a1de <_malloc_r+0xde>
 800a142:	6834      	ldr	r4, [r6, #0]
 800a144:	4626      	mov	r6, r4
 800a146:	2e00      	cmp	r6, #0
 800a148:	d140      	bne.n	800a1cc <_malloc_r+0xcc>
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	4631      	mov	r1, r6
 800a14e:	4638      	mov	r0, r7
 800a150:	eb04 0803 	add.w	r8, r4, r3
 800a154:	f000 fa46 	bl	800a5e4 <_sbrk_r>
 800a158:	4580      	cmp	r8, r0
 800a15a:	d13a      	bne.n	800a1d2 <_malloc_r+0xd2>
 800a15c:	6821      	ldr	r1, [r4, #0]
 800a15e:	3503      	adds	r5, #3
 800a160:	1a6d      	subs	r5, r5, r1
 800a162:	f025 0503 	bic.w	r5, r5, #3
 800a166:	3508      	adds	r5, #8
 800a168:	2d0c      	cmp	r5, #12
 800a16a:	bf38      	it	cc
 800a16c:	250c      	movcc	r5, #12
 800a16e:	4629      	mov	r1, r5
 800a170:	4638      	mov	r0, r7
 800a172:	f7ff ffa5 	bl	800a0c0 <sbrk_aligned>
 800a176:	3001      	adds	r0, #1
 800a178:	d02b      	beq.n	800a1d2 <_malloc_r+0xd2>
 800a17a:	6823      	ldr	r3, [r4, #0]
 800a17c:	442b      	add	r3, r5
 800a17e:	6023      	str	r3, [r4, #0]
 800a180:	e00e      	b.n	800a1a0 <_malloc_r+0xa0>
 800a182:	6822      	ldr	r2, [r4, #0]
 800a184:	1b52      	subs	r2, r2, r5
 800a186:	d41e      	bmi.n	800a1c6 <_malloc_r+0xc6>
 800a188:	2a0b      	cmp	r2, #11
 800a18a:	d916      	bls.n	800a1ba <_malloc_r+0xba>
 800a18c:	1961      	adds	r1, r4, r5
 800a18e:	42a3      	cmp	r3, r4
 800a190:	6025      	str	r5, [r4, #0]
 800a192:	bf18      	it	ne
 800a194:	6059      	strne	r1, [r3, #4]
 800a196:	6863      	ldr	r3, [r4, #4]
 800a198:	bf08      	it	eq
 800a19a:	6031      	streq	r1, [r6, #0]
 800a19c:	5162      	str	r2, [r4, r5]
 800a19e:	604b      	str	r3, [r1, #4]
 800a1a0:	4638      	mov	r0, r7
 800a1a2:	f104 060b 	add.w	r6, r4, #11
 800a1a6:	f000 fded 	bl	800ad84 <__malloc_unlock>
 800a1aa:	f026 0607 	bic.w	r6, r6, #7
 800a1ae:	1d23      	adds	r3, r4, #4
 800a1b0:	1af2      	subs	r2, r6, r3
 800a1b2:	d0b6      	beq.n	800a122 <_malloc_r+0x22>
 800a1b4:	1b9b      	subs	r3, r3, r6
 800a1b6:	50a3      	str	r3, [r4, r2]
 800a1b8:	e7b3      	b.n	800a122 <_malloc_r+0x22>
 800a1ba:	6862      	ldr	r2, [r4, #4]
 800a1bc:	42a3      	cmp	r3, r4
 800a1be:	bf0c      	ite	eq
 800a1c0:	6032      	streq	r2, [r6, #0]
 800a1c2:	605a      	strne	r2, [r3, #4]
 800a1c4:	e7ec      	b.n	800a1a0 <_malloc_r+0xa0>
 800a1c6:	4623      	mov	r3, r4
 800a1c8:	6864      	ldr	r4, [r4, #4]
 800a1ca:	e7b2      	b.n	800a132 <_malloc_r+0x32>
 800a1cc:	4634      	mov	r4, r6
 800a1ce:	6876      	ldr	r6, [r6, #4]
 800a1d0:	e7b9      	b.n	800a146 <_malloc_r+0x46>
 800a1d2:	230c      	movs	r3, #12
 800a1d4:	603b      	str	r3, [r7, #0]
 800a1d6:	4638      	mov	r0, r7
 800a1d8:	f000 fdd4 	bl	800ad84 <__malloc_unlock>
 800a1dc:	e7a1      	b.n	800a122 <_malloc_r+0x22>
 800a1de:	6025      	str	r5, [r4, #0]
 800a1e0:	e7de      	b.n	800a1a0 <_malloc_r+0xa0>
 800a1e2:	bf00      	nop
 800a1e4:	20017688 	.word	0x20017688

0800a1e8 <_puts_r>:
 800a1e8:	b570      	push	{r4, r5, r6, lr}
 800a1ea:	460e      	mov	r6, r1
 800a1ec:	4605      	mov	r5, r0
 800a1ee:	b118      	cbz	r0, 800a1f8 <_puts_r+0x10>
 800a1f0:	6983      	ldr	r3, [r0, #24]
 800a1f2:	b90b      	cbnz	r3, 800a1f8 <_puts_r+0x10>
 800a1f4:	f000 fca8 	bl	800ab48 <__sinit>
 800a1f8:	69ab      	ldr	r3, [r5, #24]
 800a1fa:	68ac      	ldr	r4, [r5, #8]
 800a1fc:	b913      	cbnz	r3, 800a204 <_puts_r+0x1c>
 800a1fe:	4628      	mov	r0, r5
 800a200:	f000 fca2 	bl	800ab48 <__sinit>
 800a204:	4b2c      	ldr	r3, [pc, #176]	; (800a2b8 <_puts_r+0xd0>)
 800a206:	429c      	cmp	r4, r3
 800a208:	d120      	bne.n	800a24c <_puts_r+0x64>
 800a20a:	686c      	ldr	r4, [r5, #4]
 800a20c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a20e:	07db      	lsls	r3, r3, #31
 800a210:	d405      	bmi.n	800a21e <_puts_r+0x36>
 800a212:	89a3      	ldrh	r3, [r4, #12]
 800a214:	0598      	lsls	r0, r3, #22
 800a216:	d402      	bmi.n	800a21e <_puts_r+0x36>
 800a218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a21a:	f000 fd33 	bl	800ac84 <__retarget_lock_acquire_recursive>
 800a21e:	89a3      	ldrh	r3, [r4, #12]
 800a220:	0719      	lsls	r1, r3, #28
 800a222:	d51d      	bpl.n	800a260 <_puts_r+0x78>
 800a224:	6923      	ldr	r3, [r4, #16]
 800a226:	b1db      	cbz	r3, 800a260 <_puts_r+0x78>
 800a228:	3e01      	subs	r6, #1
 800a22a:	68a3      	ldr	r3, [r4, #8]
 800a22c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a230:	3b01      	subs	r3, #1
 800a232:	60a3      	str	r3, [r4, #8]
 800a234:	bb39      	cbnz	r1, 800a286 <_puts_r+0x9e>
 800a236:	2b00      	cmp	r3, #0
 800a238:	da38      	bge.n	800a2ac <_puts_r+0xc4>
 800a23a:	4622      	mov	r2, r4
 800a23c:	210a      	movs	r1, #10
 800a23e:	4628      	mov	r0, r5
 800a240:	f000 fa86 	bl	800a750 <__swbuf_r>
 800a244:	3001      	adds	r0, #1
 800a246:	d011      	beq.n	800a26c <_puts_r+0x84>
 800a248:	250a      	movs	r5, #10
 800a24a:	e011      	b.n	800a270 <_puts_r+0x88>
 800a24c:	4b1b      	ldr	r3, [pc, #108]	; (800a2bc <_puts_r+0xd4>)
 800a24e:	429c      	cmp	r4, r3
 800a250:	d101      	bne.n	800a256 <_puts_r+0x6e>
 800a252:	68ac      	ldr	r4, [r5, #8]
 800a254:	e7da      	b.n	800a20c <_puts_r+0x24>
 800a256:	4b1a      	ldr	r3, [pc, #104]	; (800a2c0 <_puts_r+0xd8>)
 800a258:	429c      	cmp	r4, r3
 800a25a:	bf08      	it	eq
 800a25c:	68ec      	ldreq	r4, [r5, #12]
 800a25e:	e7d5      	b.n	800a20c <_puts_r+0x24>
 800a260:	4621      	mov	r1, r4
 800a262:	4628      	mov	r0, r5
 800a264:	f000 fad8 	bl	800a818 <__swsetup_r>
 800a268:	2800      	cmp	r0, #0
 800a26a:	d0dd      	beq.n	800a228 <_puts_r+0x40>
 800a26c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a270:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a272:	07da      	lsls	r2, r3, #31
 800a274:	d405      	bmi.n	800a282 <_puts_r+0x9a>
 800a276:	89a3      	ldrh	r3, [r4, #12]
 800a278:	059b      	lsls	r3, r3, #22
 800a27a:	d402      	bmi.n	800a282 <_puts_r+0x9a>
 800a27c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a27e:	f000 fd02 	bl	800ac86 <__retarget_lock_release_recursive>
 800a282:	4628      	mov	r0, r5
 800a284:	bd70      	pop	{r4, r5, r6, pc}
 800a286:	2b00      	cmp	r3, #0
 800a288:	da04      	bge.n	800a294 <_puts_r+0xac>
 800a28a:	69a2      	ldr	r2, [r4, #24]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	dc06      	bgt.n	800a29e <_puts_r+0xb6>
 800a290:	290a      	cmp	r1, #10
 800a292:	d004      	beq.n	800a29e <_puts_r+0xb6>
 800a294:	6823      	ldr	r3, [r4, #0]
 800a296:	1c5a      	adds	r2, r3, #1
 800a298:	6022      	str	r2, [r4, #0]
 800a29a:	7019      	strb	r1, [r3, #0]
 800a29c:	e7c5      	b.n	800a22a <_puts_r+0x42>
 800a29e:	4622      	mov	r2, r4
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	f000 fa55 	bl	800a750 <__swbuf_r>
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	d1bf      	bne.n	800a22a <_puts_r+0x42>
 800a2aa:	e7df      	b.n	800a26c <_puts_r+0x84>
 800a2ac:	6823      	ldr	r3, [r4, #0]
 800a2ae:	250a      	movs	r5, #10
 800a2b0:	1c5a      	adds	r2, r3, #1
 800a2b2:	6022      	str	r2, [r4, #0]
 800a2b4:	701d      	strb	r5, [r3, #0]
 800a2b6:	e7db      	b.n	800a270 <_puts_r+0x88>
 800a2b8:	0800c9dc 	.word	0x0800c9dc
 800a2bc:	0800c9fc 	.word	0x0800c9fc
 800a2c0:	0800c9bc 	.word	0x0800c9bc

0800a2c4 <puts>:
 800a2c4:	4b02      	ldr	r3, [pc, #8]	; (800a2d0 <puts+0xc>)
 800a2c6:	4601      	mov	r1, r0
 800a2c8:	6818      	ldr	r0, [r3, #0]
 800a2ca:	f7ff bf8d 	b.w	800a1e8 <_puts_r>
 800a2ce:	bf00      	nop
 800a2d0:	200000a4 	.word	0x200000a4

0800a2d4 <swapfunc>:
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	b510      	push	{r4, lr}
 800a2d8:	d00a      	beq.n	800a2f0 <swapfunc+0x1c>
 800a2da:	0892      	lsrs	r2, r2, #2
 800a2dc:	3a01      	subs	r2, #1
 800a2de:	6803      	ldr	r3, [r0, #0]
 800a2e0:	680c      	ldr	r4, [r1, #0]
 800a2e2:	f840 4b04 	str.w	r4, [r0], #4
 800a2e6:	2a00      	cmp	r2, #0
 800a2e8:	f841 3b04 	str.w	r3, [r1], #4
 800a2ec:	dcf6      	bgt.n	800a2dc <swapfunc+0x8>
 800a2ee:	bd10      	pop	{r4, pc}
 800a2f0:	4402      	add	r2, r0
 800a2f2:	780c      	ldrb	r4, [r1, #0]
 800a2f4:	7803      	ldrb	r3, [r0, #0]
 800a2f6:	f800 4b01 	strb.w	r4, [r0], #1
 800a2fa:	f801 3b01 	strb.w	r3, [r1], #1
 800a2fe:	1a13      	subs	r3, r2, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	dcf6      	bgt.n	800a2f2 <swapfunc+0x1e>
 800a304:	e7f3      	b.n	800a2ee <swapfunc+0x1a>

0800a306 <med3.constprop.0>:
 800a306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a308:	460c      	mov	r4, r1
 800a30a:	4615      	mov	r5, r2
 800a30c:	4607      	mov	r7, r0
 800a30e:	461e      	mov	r6, r3
 800a310:	4798      	blx	r3
 800a312:	2800      	cmp	r0, #0
 800a314:	4629      	mov	r1, r5
 800a316:	4620      	mov	r0, r4
 800a318:	da0a      	bge.n	800a330 <med3.constprop.0+0x2a>
 800a31a:	47b0      	blx	r6
 800a31c:	2800      	cmp	r0, #0
 800a31e:	db05      	blt.n	800a32c <med3.constprop.0+0x26>
 800a320:	4629      	mov	r1, r5
 800a322:	4638      	mov	r0, r7
 800a324:	47b0      	blx	r6
 800a326:	2800      	cmp	r0, #0
 800a328:	db0a      	blt.n	800a340 <med3.constprop.0+0x3a>
 800a32a:	463c      	mov	r4, r7
 800a32c:	4620      	mov	r0, r4
 800a32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a330:	47b0      	blx	r6
 800a332:	2800      	cmp	r0, #0
 800a334:	dcfa      	bgt.n	800a32c <med3.constprop.0+0x26>
 800a336:	4629      	mov	r1, r5
 800a338:	4638      	mov	r0, r7
 800a33a:	47b0      	blx	r6
 800a33c:	2800      	cmp	r0, #0
 800a33e:	dbf4      	blt.n	800a32a <med3.constprop.0+0x24>
 800a340:	462c      	mov	r4, r5
 800a342:	e7f3      	b.n	800a32c <med3.constprop.0+0x26>

0800a344 <qsort>:
 800a344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a348:	469a      	mov	sl, r3
 800a34a:	ea40 0302 	orr.w	r3, r0, r2
 800a34e:	079b      	lsls	r3, r3, #30
 800a350:	b097      	sub	sp, #92	; 0x5c
 800a352:	4606      	mov	r6, r0
 800a354:	4614      	mov	r4, r2
 800a356:	d11a      	bne.n	800a38e <qsort+0x4a>
 800a358:	f1b2 0804 	subs.w	r8, r2, #4
 800a35c:	bf18      	it	ne
 800a35e:	f04f 0801 	movne.w	r8, #1
 800a362:	2300      	movs	r3, #0
 800a364:	9302      	str	r3, [sp, #8]
 800a366:	1933      	adds	r3, r6, r4
 800a368:	fb04 f701 	mul.w	r7, r4, r1
 800a36c:	9301      	str	r3, [sp, #4]
 800a36e:	2906      	cmp	r1, #6
 800a370:	eb06 0307 	add.w	r3, r6, r7
 800a374:	9303      	str	r3, [sp, #12]
 800a376:	d82a      	bhi.n	800a3ce <qsort+0x8a>
 800a378:	9b01      	ldr	r3, [sp, #4]
 800a37a:	9a03      	ldr	r2, [sp, #12]
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d310      	bcc.n	800a3a2 <qsort+0x5e>
 800a380:	9b02      	ldr	r3, [sp, #8]
 800a382:	2b00      	cmp	r3, #0
 800a384:	f040 811e 	bne.w	800a5c4 <qsort+0x280>
 800a388:	b017      	add	sp, #92	; 0x5c
 800a38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38e:	f04f 0802 	mov.w	r8, #2
 800a392:	e7e6      	b.n	800a362 <qsort+0x1e>
 800a394:	4643      	mov	r3, r8
 800a396:	4622      	mov	r2, r4
 800a398:	4639      	mov	r1, r7
 800a39a:	4628      	mov	r0, r5
 800a39c:	f7ff ff9a 	bl	800a2d4 <swapfunc>
 800a3a0:	e00e      	b.n	800a3c0 <qsort+0x7c>
 800a3a2:	9d01      	ldr	r5, [sp, #4]
 800a3a4:	e00d      	b.n	800a3c2 <qsort+0x7e>
 800a3a6:	1b2f      	subs	r7, r5, r4
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	4638      	mov	r0, r7
 800a3ac:	47d0      	blx	sl
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	dd09      	ble.n	800a3c6 <qsort+0x82>
 800a3b2:	f1b8 0f00 	cmp.w	r8, #0
 800a3b6:	d1ed      	bne.n	800a394 <qsort+0x50>
 800a3b8:	682b      	ldr	r3, [r5, #0]
 800a3ba:	683a      	ldr	r2, [r7, #0]
 800a3bc:	602a      	str	r2, [r5, #0]
 800a3be:	603b      	str	r3, [r7, #0]
 800a3c0:	463d      	mov	r5, r7
 800a3c2:	42ae      	cmp	r6, r5
 800a3c4:	d3ef      	bcc.n	800a3a6 <qsort+0x62>
 800a3c6:	9b01      	ldr	r3, [sp, #4]
 800a3c8:	4423      	add	r3, r4
 800a3ca:	9301      	str	r3, [sp, #4]
 800a3cc:	e7d4      	b.n	800a378 <qsort+0x34>
 800a3ce:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800a3d2:	1b3f      	subs	r7, r7, r4
 800a3d4:	2907      	cmp	r1, #7
 800a3d6:	fb04 6909 	mla	r9, r4, r9, r6
 800a3da:	4437      	add	r7, r6
 800a3dc:	d022      	beq.n	800a424 <qsort+0xe0>
 800a3de:	2928      	cmp	r1, #40	; 0x28
 800a3e0:	d945      	bls.n	800a46e <qsort+0x12a>
 800a3e2:	08c9      	lsrs	r1, r1, #3
 800a3e4:	fb04 f501 	mul.w	r5, r4, r1
 800a3e8:	4653      	mov	r3, sl
 800a3ea:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800a3ee:	1971      	adds	r1, r6, r5
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	f7ff ff88 	bl	800a306 <med3.constprop.0>
 800a3f6:	4649      	mov	r1, r9
 800a3f8:	eb09 0205 	add.w	r2, r9, r5
 800a3fc:	4653      	mov	r3, sl
 800a3fe:	4683      	mov	fp, r0
 800a400:	1b48      	subs	r0, r1, r5
 800a402:	f7ff ff80 	bl	800a306 <med3.constprop.0>
 800a406:	463a      	mov	r2, r7
 800a408:	4681      	mov	r9, r0
 800a40a:	4653      	mov	r3, sl
 800a40c:	1b79      	subs	r1, r7, r5
 800a40e:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800a412:	f7ff ff78 	bl	800a306 <med3.constprop.0>
 800a416:	4602      	mov	r2, r0
 800a418:	4649      	mov	r1, r9
 800a41a:	4653      	mov	r3, sl
 800a41c:	4658      	mov	r0, fp
 800a41e:	f7ff ff72 	bl	800a306 <med3.constprop.0>
 800a422:	4681      	mov	r9, r0
 800a424:	f1b8 0f00 	cmp.w	r8, #0
 800a428:	d124      	bne.n	800a474 <qsort+0x130>
 800a42a:	6833      	ldr	r3, [r6, #0]
 800a42c:	f8d9 2000 	ldr.w	r2, [r9]
 800a430:	6032      	str	r2, [r6, #0]
 800a432:	f8c9 3000 	str.w	r3, [r9]
 800a436:	eb06 0b04 	add.w	fp, r6, r4
 800a43a:	46b9      	mov	r9, r7
 800a43c:	465d      	mov	r5, fp
 800a43e:	2300      	movs	r3, #0
 800a440:	45bb      	cmp	fp, r7
 800a442:	d835      	bhi.n	800a4b0 <qsort+0x16c>
 800a444:	4631      	mov	r1, r6
 800a446:	4658      	mov	r0, fp
 800a448:	9304      	str	r3, [sp, #16]
 800a44a:	47d0      	blx	sl
 800a44c:	2800      	cmp	r0, #0
 800a44e:	9b04      	ldr	r3, [sp, #16]
 800a450:	dc3e      	bgt.n	800a4d0 <qsort+0x18c>
 800a452:	d10a      	bne.n	800a46a <qsort+0x126>
 800a454:	f1b8 0f00 	cmp.w	r8, #0
 800a458:	d113      	bne.n	800a482 <qsort+0x13e>
 800a45a:	682b      	ldr	r3, [r5, #0]
 800a45c:	f8db 2000 	ldr.w	r2, [fp]
 800a460:	602a      	str	r2, [r5, #0]
 800a462:	f8cb 3000 	str.w	r3, [fp]
 800a466:	4425      	add	r5, r4
 800a468:	2301      	movs	r3, #1
 800a46a:	44a3      	add	fp, r4
 800a46c:	e7e8      	b.n	800a440 <qsort+0xfc>
 800a46e:	463a      	mov	r2, r7
 800a470:	46b3      	mov	fp, r6
 800a472:	e7d1      	b.n	800a418 <qsort+0xd4>
 800a474:	4643      	mov	r3, r8
 800a476:	4622      	mov	r2, r4
 800a478:	4649      	mov	r1, r9
 800a47a:	4630      	mov	r0, r6
 800a47c:	f7ff ff2a 	bl	800a2d4 <swapfunc>
 800a480:	e7d9      	b.n	800a436 <qsort+0xf2>
 800a482:	4643      	mov	r3, r8
 800a484:	4622      	mov	r2, r4
 800a486:	4659      	mov	r1, fp
 800a488:	4628      	mov	r0, r5
 800a48a:	f7ff ff23 	bl	800a2d4 <swapfunc>
 800a48e:	e7ea      	b.n	800a466 <qsort+0x122>
 800a490:	d10b      	bne.n	800a4aa <qsort+0x166>
 800a492:	f1b8 0f00 	cmp.w	r8, #0
 800a496:	d114      	bne.n	800a4c2 <qsort+0x17e>
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	f8d9 2000 	ldr.w	r2, [r9]
 800a49e:	603a      	str	r2, [r7, #0]
 800a4a0:	f8c9 3000 	str.w	r3, [r9]
 800a4a4:	eba9 0904 	sub.w	r9, r9, r4
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	9f04      	ldr	r7, [sp, #16]
 800a4ac:	45bb      	cmp	fp, r7
 800a4ae:	d90f      	bls.n	800a4d0 <qsort+0x18c>
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d143      	bne.n	800a53c <qsort+0x1f8>
 800a4b4:	9b01      	ldr	r3, [sp, #4]
 800a4b6:	9a03      	ldr	r2, [sp, #12]
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	f4bf af61 	bcs.w	800a380 <qsort+0x3c>
 800a4be:	9d01      	ldr	r5, [sp, #4]
 800a4c0:	e036      	b.n	800a530 <qsort+0x1ec>
 800a4c2:	4643      	mov	r3, r8
 800a4c4:	4622      	mov	r2, r4
 800a4c6:	4649      	mov	r1, r9
 800a4c8:	4638      	mov	r0, r7
 800a4ca:	f7ff ff03 	bl	800a2d4 <swapfunc>
 800a4ce:	e7e9      	b.n	800a4a4 <qsort+0x160>
 800a4d0:	4631      	mov	r1, r6
 800a4d2:	4638      	mov	r0, r7
 800a4d4:	9305      	str	r3, [sp, #20]
 800a4d6:	47d0      	blx	sl
 800a4d8:	1b3b      	subs	r3, r7, r4
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	9304      	str	r3, [sp, #16]
 800a4de:	9b05      	ldr	r3, [sp, #20]
 800a4e0:	dad6      	bge.n	800a490 <qsort+0x14c>
 800a4e2:	f1b8 0f00 	cmp.w	r8, #0
 800a4e6:	d006      	beq.n	800a4f6 <qsort+0x1b2>
 800a4e8:	4643      	mov	r3, r8
 800a4ea:	4622      	mov	r2, r4
 800a4ec:	4639      	mov	r1, r7
 800a4ee:	4658      	mov	r0, fp
 800a4f0:	f7ff fef0 	bl	800a2d4 <swapfunc>
 800a4f4:	e005      	b.n	800a502 <qsort+0x1be>
 800a4f6:	f8db 3000 	ldr.w	r3, [fp]
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	f8cb 2000 	str.w	r2, [fp]
 800a500:	603b      	str	r3, [r7, #0]
 800a502:	9f04      	ldr	r7, [sp, #16]
 800a504:	e7b0      	b.n	800a468 <qsort+0x124>
 800a506:	4643      	mov	r3, r8
 800a508:	4622      	mov	r2, r4
 800a50a:	4639      	mov	r1, r7
 800a50c:	4628      	mov	r0, r5
 800a50e:	f7ff fee1 	bl	800a2d4 <swapfunc>
 800a512:	e00c      	b.n	800a52e <qsort+0x1ea>
 800a514:	1b2f      	subs	r7, r5, r4
 800a516:	4629      	mov	r1, r5
 800a518:	4638      	mov	r0, r7
 800a51a:	47d0      	blx	sl
 800a51c:	2800      	cmp	r0, #0
 800a51e:	dd09      	ble.n	800a534 <qsort+0x1f0>
 800a520:	f1b8 0f00 	cmp.w	r8, #0
 800a524:	d1ef      	bne.n	800a506 <qsort+0x1c2>
 800a526:	682b      	ldr	r3, [r5, #0]
 800a528:	683a      	ldr	r2, [r7, #0]
 800a52a:	602a      	str	r2, [r5, #0]
 800a52c:	603b      	str	r3, [r7, #0]
 800a52e:	463d      	mov	r5, r7
 800a530:	42ae      	cmp	r6, r5
 800a532:	d3ef      	bcc.n	800a514 <qsort+0x1d0>
 800a534:	9b01      	ldr	r3, [sp, #4]
 800a536:	4423      	add	r3, r4
 800a538:	9301      	str	r3, [sp, #4]
 800a53a:	e7bb      	b.n	800a4b4 <qsort+0x170>
 800a53c:	ebab 0305 	sub.w	r3, fp, r5
 800a540:	1baa      	subs	r2, r5, r6
 800a542:	429a      	cmp	r2, r3
 800a544:	bfa8      	it	ge
 800a546:	461a      	movge	r2, r3
 800a548:	9301      	str	r3, [sp, #4]
 800a54a:	b12a      	cbz	r2, 800a558 <qsort+0x214>
 800a54c:	4643      	mov	r3, r8
 800a54e:	ebab 0102 	sub.w	r1, fp, r2
 800a552:	4630      	mov	r0, r6
 800a554:	f7ff febe 	bl	800a2d4 <swapfunc>
 800a558:	9b03      	ldr	r3, [sp, #12]
 800a55a:	eba3 0209 	sub.w	r2, r3, r9
 800a55e:	eba9 0707 	sub.w	r7, r9, r7
 800a562:	1b12      	subs	r2, r2, r4
 800a564:	42ba      	cmp	r2, r7
 800a566:	bf28      	it	cs
 800a568:	463a      	movcs	r2, r7
 800a56a:	b12a      	cbz	r2, 800a578 <qsort+0x234>
 800a56c:	9903      	ldr	r1, [sp, #12]
 800a56e:	4643      	mov	r3, r8
 800a570:	1a89      	subs	r1, r1, r2
 800a572:	4658      	mov	r0, fp
 800a574:	f7ff feae 	bl	800a2d4 <swapfunc>
 800a578:	9d01      	ldr	r5, [sp, #4]
 800a57a:	9b03      	ldr	r3, [sp, #12]
 800a57c:	42af      	cmp	r7, r5
 800a57e:	eba3 0007 	sub.w	r0, r3, r7
 800a582:	d904      	bls.n	800a58e <qsort+0x24a>
 800a584:	4633      	mov	r3, r6
 800a586:	463d      	mov	r5, r7
 800a588:	9f01      	ldr	r7, [sp, #4]
 800a58a:	4606      	mov	r6, r0
 800a58c:	4618      	mov	r0, r3
 800a58e:	42a7      	cmp	r7, r4
 800a590:	d921      	bls.n	800a5d6 <qsort+0x292>
 800a592:	fbb7 f1f4 	udiv	r1, r7, r4
 800a596:	9b02      	ldr	r3, [sp, #8]
 800a598:	2b07      	cmp	r3, #7
 800a59a:	d80d      	bhi.n	800a5b8 <qsort+0x274>
 800a59c:	fbb5 f5f4 	udiv	r5, r5, r4
 800a5a0:	aa16      	add	r2, sp, #88	; 0x58
 800a5a2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5a6:	f843 6c40 	str.w	r6, [r3, #-64]
 800a5aa:	f843 5c3c 	str.w	r5, [r3, #-60]
 800a5ae:	9b02      	ldr	r3, [sp, #8]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	9302      	str	r3, [sp, #8]
 800a5b4:	4606      	mov	r6, r0
 800a5b6:	e6d6      	b.n	800a366 <qsort+0x22>
 800a5b8:	4653      	mov	r3, sl
 800a5ba:	4622      	mov	r2, r4
 800a5bc:	f7ff fec2 	bl	800a344 <qsort>
 800a5c0:	42a5      	cmp	r5, r4
 800a5c2:	d80b      	bhi.n	800a5dc <qsort+0x298>
 800a5c4:	9b02      	ldr	r3, [sp, #8]
 800a5c6:	aa16      	add	r2, sp, #88	; 0x58
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	9302      	str	r3, [sp, #8]
 800a5cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5d0:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 800a5d4:	e7ee      	b.n	800a5b4 <qsort+0x270>
 800a5d6:	42a5      	cmp	r5, r4
 800a5d8:	f67f aed2 	bls.w	800a380 <qsort+0x3c>
 800a5dc:	fbb5 f1f4 	udiv	r1, r5, r4
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	e7e7      	b.n	800a5b4 <qsort+0x270>

0800a5e4 <_sbrk_r>:
 800a5e4:	b538      	push	{r3, r4, r5, lr}
 800a5e6:	4d06      	ldr	r5, [pc, #24]	; (800a600 <_sbrk_r+0x1c>)
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	4608      	mov	r0, r1
 800a5ee:	602b      	str	r3, [r5, #0]
 800a5f0:	f7f8 fc2a 	bl	8002e48 <_sbrk>
 800a5f4:	1c43      	adds	r3, r0, #1
 800a5f6:	d102      	bne.n	800a5fe <_sbrk_r+0x1a>
 800a5f8:	682b      	ldr	r3, [r5, #0]
 800a5fa:	b103      	cbz	r3, 800a5fe <_sbrk_r+0x1a>
 800a5fc:	6023      	str	r3, [r4, #0]
 800a5fe:	bd38      	pop	{r3, r4, r5, pc}
 800a600:	20017694 	.word	0x20017694

0800a604 <siprintf>:
 800a604:	b40e      	push	{r1, r2, r3}
 800a606:	b500      	push	{lr}
 800a608:	b09c      	sub	sp, #112	; 0x70
 800a60a:	ab1d      	add	r3, sp, #116	; 0x74
 800a60c:	9002      	str	r0, [sp, #8]
 800a60e:	9006      	str	r0, [sp, #24]
 800a610:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a614:	4809      	ldr	r0, [pc, #36]	; (800a63c <siprintf+0x38>)
 800a616:	9107      	str	r1, [sp, #28]
 800a618:	9104      	str	r1, [sp, #16]
 800a61a:	4909      	ldr	r1, [pc, #36]	; (800a640 <siprintf+0x3c>)
 800a61c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a620:	9105      	str	r1, [sp, #20]
 800a622:	6800      	ldr	r0, [r0, #0]
 800a624:	9301      	str	r3, [sp, #4]
 800a626:	a902      	add	r1, sp, #8
 800a628:	f000 fc0e 	bl	800ae48 <_svfiprintf_r>
 800a62c:	9b02      	ldr	r3, [sp, #8]
 800a62e:	2200      	movs	r2, #0
 800a630:	701a      	strb	r2, [r3, #0]
 800a632:	b01c      	add	sp, #112	; 0x70
 800a634:	f85d eb04 	ldr.w	lr, [sp], #4
 800a638:	b003      	add	sp, #12
 800a63a:	4770      	bx	lr
 800a63c:	200000a4 	.word	0x200000a4
 800a640:	ffff0208 	.word	0xffff0208

0800a644 <siscanf>:
 800a644:	b40e      	push	{r1, r2, r3}
 800a646:	b510      	push	{r4, lr}
 800a648:	b09f      	sub	sp, #124	; 0x7c
 800a64a:	ac21      	add	r4, sp, #132	; 0x84
 800a64c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a650:	f854 2b04 	ldr.w	r2, [r4], #4
 800a654:	9201      	str	r2, [sp, #4]
 800a656:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a65a:	9004      	str	r0, [sp, #16]
 800a65c:	9008      	str	r0, [sp, #32]
 800a65e:	f7f5 fdc1 	bl	80001e4 <strlen>
 800a662:	4b0c      	ldr	r3, [pc, #48]	; (800a694 <siscanf+0x50>)
 800a664:	9005      	str	r0, [sp, #20]
 800a666:	9009      	str	r0, [sp, #36]	; 0x24
 800a668:	930d      	str	r3, [sp, #52]	; 0x34
 800a66a:	480b      	ldr	r0, [pc, #44]	; (800a698 <siscanf+0x54>)
 800a66c:	9a01      	ldr	r2, [sp, #4]
 800a66e:	6800      	ldr	r0, [r0, #0]
 800a670:	9403      	str	r4, [sp, #12]
 800a672:	2300      	movs	r3, #0
 800a674:	9311      	str	r3, [sp, #68]	; 0x44
 800a676:	9316      	str	r3, [sp, #88]	; 0x58
 800a678:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a67c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a680:	a904      	add	r1, sp, #16
 800a682:	4623      	mov	r3, r4
 800a684:	f000 fd3a 	bl	800b0fc <__ssvfiscanf_r>
 800a688:	b01f      	add	sp, #124	; 0x7c
 800a68a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a68e:	b003      	add	sp, #12
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	0800a6bf 	.word	0x0800a6bf
 800a698:	200000a4 	.word	0x200000a4

0800a69c <__sread>:
 800a69c:	b510      	push	{r4, lr}
 800a69e:	460c      	mov	r4, r1
 800a6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a4:	f001 f988 	bl	800b9b8 <_read_r>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	bfab      	itete	ge
 800a6ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a6ae:	89a3      	ldrhlt	r3, [r4, #12]
 800a6b0:	181b      	addge	r3, r3, r0
 800a6b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a6b6:	bfac      	ite	ge
 800a6b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a6ba:	81a3      	strhlt	r3, [r4, #12]
 800a6bc:	bd10      	pop	{r4, pc}

0800a6be <__seofread>:
 800a6be:	2000      	movs	r0, #0
 800a6c0:	4770      	bx	lr

0800a6c2 <__swrite>:
 800a6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c6:	461f      	mov	r7, r3
 800a6c8:	898b      	ldrh	r3, [r1, #12]
 800a6ca:	05db      	lsls	r3, r3, #23
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	460c      	mov	r4, r1
 800a6d0:	4616      	mov	r6, r2
 800a6d2:	d505      	bpl.n	800a6e0 <__swrite+0x1e>
 800a6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6d8:	2302      	movs	r3, #2
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f000 fad4 	bl	800ac88 <_lseek_r>
 800a6e0:	89a3      	ldrh	r3, [r4, #12]
 800a6e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6ea:	81a3      	strh	r3, [r4, #12]
 800a6ec:	4632      	mov	r2, r6
 800a6ee:	463b      	mov	r3, r7
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f6:	f000 b87d 	b.w	800a7f4 <_write_r>

0800a6fa <__sseek>:
 800a6fa:	b510      	push	{r4, lr}
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a702:	f000 fac1 	bl	800ac88 <_lseek_r>
 800a706:	1c43      	adds	r3, r0, #1
 800a708:	89a3      	ldrh	r3, [r4, #12]
 800a70a:	bf15      	itete	ne
 800a70c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a70e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a712:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a716:	81a3      	strheq	r3, [r4, #12]
 800a718:	bf18      	it	ne
 800a71a:	81a3      	strhne	r3, [r4, #12]
 800a71c:	bd10      	pop	{r4, pc}

0800a71e <__sclose>:
 800a71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a722:	f000 b8e7 	b.w	800a8f4 <_close_r>

0800a726 <strncmp>:
 800a726:	b510      	push	{r4, lr}
 800a728:	b17a      	cbz	r2, 800a74a <strncmp+0x24>
 800a72a:	4603      	mov	r3, r0
 800a72c:	3901      	subs	r1, #1
 800a72e:	1884      	adds	r4, r0, r2
 800a730:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a734:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a738:	4290      	cmp	r0, r2
 800a73a:	d101      	bne.n	800a740 <strncmp+0x1a>
 800a73c:	42a3      	cmp	r3, r4
 800a73e:	d101      	bne.n	800a744 <strncmp+0x1e>
 800a740:	1a80      	subs	r0, r0, r2
 800a742:	bd10      	pop	{r4, pc}
 800a744:	2800      	cmp	r0, #0
 800a746:	d1f3      	bne.n	800a730 <strncmp+0xa>
 800a748:	e7fa      	b.n	800a740 <strncmp+0x1a>
 800a74a:	4610      	mov	r0, r2
 800a74c:	e7f9      	b.n	800a742 <strncmp+0x1c>
	...

0800a750 <__swbuf_r>:
 800a750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a752:	460e      	mov	r6, r1
 800a754:	4614      	mov	r4, r2
 800a756:	4605      	mov	r5, r0
 800a758:	b118      	cbz	r0, 800a762 <__swbuf_r+0x12>
 800a75a:	6983      	ldr	r3, [r0, #24]
 800a75c:	b90b      	cbnz	r3, 800a762 <__swbuf_r+0x12>
 800a75e:	f000 f9f3 	bl	800ab48 <__sinit>
 800a762:	4b21      	ldr	r3, [pc, #132]	; (800a7e8 <__swbuf_r+0x98>)
 800a764:	429c      	cmp	r4, r3
 800a766:	d12b      	bne.n	800a7c0 <__swbuf_r+0x70>
 800a768:	686c      	ldr	r4, [r5, #4]
 800a76a:	69a3      	ldr	r3, [r4, #24]
 800a76c:	60a3      	str	r3, [r4, #8]
 800a76e:	89a3      	ldrh	r3, [r4, #12]
 800a770:	071a      	lsls	r2, r3, #28
 800a772:	d52f      	bpl.n	800a7d4 <__swbuf_r+0x84>
 800a774:	6923      	ldr	r3, [r4, #16]
 800a776:	b36b      	cbz	r3, 800a7d4 <__swbuf_r+0x84>
 800a778:	6923      	ldr	r3, [r4, #16]
 800a77a:	6820      	ldr	r0, [r4, #0]
 800a77c:	1ac0      	subs	r0, r0, r3
 800a77e:	6963      	ldr	r3, [r4, #20]
 800a780:	b2f6      	uxtb	r6, r6
 800a782:	4283      	cmp	r3, r0
 800a784:	4637      	mov	r7, r6
 800a786:	dc04      	bgt.n	800a792 <__swbuf_r+0x42>
 800a788:	4621      	mov	r1, r4
 800a78a:	4628      	mov	r0, r5
 800a78c:	f000 f948 	bl	800aa20 <_fflush_r>
 800a790:	bb30      	cbnz	r0, 800a7e0 <__swbuf_r+0x90>
 800a792:	68a3      	ldr	r3, [r4, #8]
 800a794:	3b01      	subs	r3, #1
 800a796:	60a3      	str	r3, [r4, #8]
 800a798:	6823      	ldr	r3, [r4, #0]
 800a79a:	1c5a      	adds	r2, r3, #1
 800a79c:	6022      	str	r2, [r4, #0]
 800a79e:	701e      	strb	r6, [r3, #0]
 800a7a0:	6963      	ldr	r3, [r4, #20]
 800a7a2:	3001      	adds	r0, #1
 800a7a4:	4283      	cmp	r3, r0
 800a7a6:	d004      	beq.n	800a7b2 <__swbuf_r+0x62>
 800a7a8:	89a3      	ldrh	r3, [r4, #12]
 800a7aa:	07db      	lsls	r3, r3, #31
 800a7ac:	d506      	bpl.n	800a7bc <__swbuf_r+0x6c>
 800a7ae:	2e0a      	cmp	r6, #10
 800a7b0:	d104      	bne.n	800a7bc <__swbuf_r+0x6c>
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	f000 f933 	bl	800aa20 <_fflush_r>
 800a7ba:	b988      	cbnz	r0, 800a7e0 <__swbuf_r+0x90>
 800a7bc:	4638      	mov	r0, r7
 800a7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7c0:	4b0a      	ldr	r3, [pc, #40]	; (800a7ec <__swbuf_r+0x9c>)
 800a7c2:	429c      	cmp	r4, r3
 800a7c4:	d101      	bne.n	800a7ca <__swbuf_r+0x7a>
 800a7c6:	68ac      	ldr	r4, [r5, #8]
 800a7c8:	e7cf      	b.n	800a76a <__swbuf_r+0x1a>
 800a7ca:	4b09      	ldr	r3, [pc, #36]	; (800a7f0 <__swbuf_r+0xa0>)
 800a7cc:	429c      	cmp	r4, r3
 800a7ce:	bf08      	it	eq
 800a7d0:	68ec      	ldreq	r4, [r5, #12]
 800a7d2:	e7ca      	b.n	800a76a <__swbuf_r+0x1a>
 800a7d4:	4621      	mov	r1, r4
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	f000 f81e 	bl	800a818 <__swsetup_r>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	d0cb      	beq.n	800a778 <__swbuf_r+0x28>
 800a7e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a7e4:	e7ea      	b.n	800a7bc <__swbuf_r+0x6c>
 800a7e6:	bf00      	nop
 800a7e8:	0800c9dc 	.word	0x0800c9dc
 800a7ec:	0800c9fc 	.word	0x0800c9fc
 800a7f0:	0800c9bc 	.word	0x0800c9bc

0800a7f4 <_write_r>:
 800a7f4:	b538      	push	{r3, r4, r5, lr}
 800a7f6:	4d07      	ldr	r5, [pc, #28]	; (800a814 <_write_r+0x20>)
 800a7f8:	4604      	mov	r4, r0
 800a7fa:	4608      	mov	r0, r1
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	2200      	movs	r2, #0
 800a800:	602a      	str	r2, [r5, #0]
 800a802:	461a      	mov	r2, r3
 800a804:	f7f8 facf 	bl	8002da6 <_write>
 800a808:	1c43      	adds	r3, r0, #1
 800a80a:	d102      	bne.n	800a812 <_write_r+0x1e>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	b103      	cbz	r3, 800a812 <_write_r+0x1e>
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	bd38      	pop	{r3, r4, r5, pc}
 800a814:	20017694 	.word	0x20017694

0800a818 <__swsetup_r>:
 800a818:	4b32      	ldr	r3, [pc, #200]	; (800a8e4 <__swsetup_r+0xcc>)
 800a81a:	b570      	push	{r4, r5, r6, lr}
 800a81c:	681d      	ldr	r5, [r3, #0]
 800a81e:	4606      	mov	r6, r0
 800a820:	460c      	mov	r4, r1
 800a822:	b125      	cbz	r5, 800a82e <__swsetup_r+0x16>
 800a824:	69ab      	ldr	r3, [r5, #24]
 800a826:	b913      	cbnz	r3, 800a82e <__swsetup_r+0x16>
 800a828:	4628      	mov	r0, r5
 800a82a:	f000 f98d 	bl	800ab48 <__sinit>
 800a82e:	4b2e      	ldr	r3, [pc, #184]	; (800a8e8 <__swsetup_r+0xd0>)
 800a830:	429c      	cmp	r4, r3
 800a832:	d10f      	bne.n	800a854 <__swsetup_r+0x3c>
 800a834:	686c      	ldr	r4, [r5, #4]
 800a836:	89a3      	ldrh	r3, [r4, #12]
 800a838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a83c:	0719      	lsls	r1, r3, #28
 800a83e:	d42c      	bmi.n	800a89a <__swsetup_r+0x82>
 800a840:	06dd      	lsls	r5, r3, #27
 800a842:	d411      	bmi.n	800a868 <__swsetup_r+0x50>
 800a844:	2309      	movs	r3, #9
 800a846:	6033      	str	r3, [r6, #0]
 800a848:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a84c:	81a3      	strh	r3, [r4, #12]
 800a84e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a852:	e03e      	b.n	800a8d2 <__swsetup_r+0xba>
 800a854:	4b25      	ldr	r3, [pc, #148]	; (800a8ec <__swsetup_r+0xd4>)
 800a856:	429c      	cmp	r4, r3
 800a858:	d101      	bne.n	800a85e <__swsetup_r+0x46>
 800a85a:	68ac      	ldr	r4, [r5, #8]
 800a85c:	e7eb      	b.n	800a836 <__swsetup_r+0x1e>
 800a85e:	4b24      	ldr	r3, [pc, #144]	; (800a8f0 <__swsetup_r+0xd8>)
 800a860:	429c      	cmp	r4, r3
 800a862:	bf08      	it	eq
 800a864:	68ec      	ldreq	r4, [r5, #12]
 800a866:	e7e6      	b.n	800a836 <__swsetup_r+0x1e>
 800a868:	0758      	lsls	r0, r3, #29
 800a86a:	d512      	bpl.n	800a892 <__swsetup_r+0x7a>
 800a86c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a86e:	b141      	cbz	r1, 800a882 <__swsetup_r+0x6a>
 800a870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a874:	4299      	cmp	r1, r3
 800a876:	d002      	beq.n	800a87e <__swsetup_r+0x66>
 800a878:	4630      	mov	r0, r6
 800a87a:	f7ff fbd5 	bl	800a028 <_free_r>
 800a87e:	2300      	movs	r3, #0
 800a880:	6363      	str	r3, [r4, #52]	; 0x34
 800a882:	89a3      	ldrh	r3, [r4, #12]
 800a884:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a888:	81a3      	strh	r3, [r4, #12]
 800a88a:	2300      	movs	r3, #0
 800a88c:	6063      	str	r3, [r4, #4]
 800a88e:	6923      	ldr	r3, [r4, #16]
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	89a3      	ldrh	r3, [r4, #12]
 800a894:	f043 0308 	orr.w	r3, r3, #8
 800a898:	81a3      	strh	r3, [r4, #12]
 800a89a:	6923      	ldr	r3, [r4, #16]
 800a89c:	b94b      	cbnz	r3, 800a8b2 <__swsetup_r+0x9a>
 800a89e:	89a3      	ldrh	r3, [r4, #12]
 800a8a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8a8:	d003      	beq.n	800a8b2 <__swsetup_r+0x9a>
 800a8aa:	4621      	mov	r1, r4
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	f000 fa23 	bl	800acf8 <__smakebuf_r>
 800a8b2:	89a0      	ldrh	r0, [r4, #12]
 800a8b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8b8:	f010 0301 	ands.w	r3, r0, #1
 800a8bc:	d00a      	beq.n	800a8d4 <__swsetup_r+0xbc>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	60a3      	str	r3, [r4, #8]
 800a8c2:	6963      	ldr	r3, [r4, #20]
 800a8c4:	425b      	negs	r3, r3
 800a8c6:	61a3      	str	r3, [r4, #24]
 800a8c8:	6923      	ldr	r3, [r4, #16]
 800a8ca:	b943      	cbnz	r3, 800a8de <__swsetup_r+0xc6>
 800a8cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8d0:	d1ba      	bne.n	800a848 <__swsetup_r+0x30>
 800a8d2:	bd70      	pop	{r4, r5, r6, pc}
 800a8d4:	0781      	lsls	r1, r0, #30
 800a8d6:	bf58      	it	pl
 800a8d8:	6963      	ldrpl	r3, [r4, #20]
 800a8da:	60a3      	str	r3, [r4, #8]
 800a8dc:	e7f4      	b.n	800a8c8 <__swsetup_r+0xb0>
 800a8de:	2000      	movs	r0, #0
 800a8e0:	e7f7      	b.n	800a8d2 <__swsetup_r+0xba>
 800a8e2:	bf00      	nop
 800a8e4:	200000a4 	.word	0x200000a4
 800a8e8:	0800c9dc 	.word	0x0800c9dc
 800a8ec:	0800c9fc 	.word	0x0800c9fc
 800a8f0:	0800c9bc 	.word	0x0800c9bc

0800a8f4 <_close_r>:
 800a8f4:	b538      	push	{r3, r4, r5, lr}
 800a8f6:	4d06      	ldr	r5, [pc, #24]	; (800a910 <_close_r+0x1c>)
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	4608      	mov	r0, r1
 800a8fe:	602b      	str	r3, [r5, #0]
 800a900:	f7f8 fa6d 	bl	8002dde <_close>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d102      	bne.n	800a90e <_close_r+0x1a>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	b103      	cbz	r3, 800a90e <_close_r+0x1a>
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	20017694 	.word	0x20017694

0800a914 <__sflush_r>:
 800a914:	898a      	ldrh	r2, [r1, #12]
 800a916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91a:	4605      	mov	r5, r0
 800a91c:	0710      	lsls	r0, r2, #28
 800a91e:	460c      	mov	r4, r1
 800a920:	d458      	bmi.n	800a9d4 <__sflush_r+0xc0>
 800a922:	684b      	ldr	r3, [r1, #4]
 800a924:	2b00      	cmp	r3, #0
 800a926:	dc05      	bgt.n	800a934 <__sflush_r+0x20>
 800a928:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	dc02      	bgt.n	800a934 <__sflush_r+0x20>
 800a92e:	2000      	movs	r0, #0
 800a930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a934:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a936:	2e00      	cmp	r6, #0
 800a938:	d0f9      	beq.n	800a92e <__sflush_r+0x1a>
 800a93a:	2300      	movs	r3, #0
 800a93c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a940:	682f      	ldr	r7, [r5, #0]
 800a942:	602b      	str	r3, [r5, #0]
 800a944:	d032      	beq.n	800a9ac <__sflush_r+0x98>
 800a946:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a948:	89a3      	ldrh	r3, [r4, #12]
 800a94a:	075a      	lsls	r2, r3, #29
 800a94c:	d505      	bpl.n	800a95a <__sflush_r+0x46>
 800a94e:	6863      	ldr	r3, [r4, #4]
 800a950:	1ac0      	subs	r0, r0, r3
 800a952:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a954:	b10b      	cbz	r3, 800a95a <__sflush_r+0x46>
 800a956:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a958:	1ac0      	subs	r0, r0, r3
 800a95a:	2300      	movs	r3, #0
 800a95c:	4602      	mov	r2, r0
 800a95e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a960:	6a21      	ldr	r1, [r4, #32]
 800a962:	4628      	mov	r0, r5
 800a964:	47b0      	blx	r6
 800a966:	1c43      	adds	r3, r0, #1
 800a968:	89a3      	ldrh	r3, [r4, #12]
 800a96a:	d106      	bne.n	800a97a <__sflush_r+0x66>
 800a96c:	6829      	ldr	r1, [r5, #0]
 800a96e:	291d      	cmp	r1, #29
 800a970:	d82c      	bhi.n	800a9cc <__sflush_r+0xb8>
 800a972:	4a2a      	ldr	r2, [pc, #168]	; (800aa1c <__sflush_r+0x108>)
 800a974:	40ca      	lsrs	r2, r1
 800a976:	07d6      	lsls	r6, r2, #31
 800a978:	d528      	bpl.n	800a9cc <__sflush_r+0xb8>
 800a97a:	2200      	movs	r2, #0
 800a97c:	6062      	str	r2, [r4, #4]
 800a97e:	04d9      	lsls	r1, r3, #19
 800a980:	6922      	ldr	r2, [r4, #16]
 800a982:	6022      	str	r2, [r4, #0]
 800a984:	d504      	bpl.n	800a990 <__sflush_r+0x7c>
 800a986:	1c42      	adds	r2, r0, #1
 800a988:	d101      	bne.n	800a98e <__sflush_r+0x7a>
 800a98a:	682b      	ldr	r3, [r5, #0]
 800a98c:	b903      	cbnz	r3, 800a990 <__sflush_r+0x7c>
 800a98e:	6560      	str	r0, [r4, #84]	; 0x54
 800a990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a992:	602f      	str	r7, [r5, #0]
 800a994:	2900      	cmp	r1, #0
 800a996:	d0ca      	beq.n	800a92e <__sflush_r+0x1a>
 800a998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a99c:	4299      	cmp	r1, r3
 800a99e:	d002      	beq.n	800a9a6 <__sflush_r+0x92>
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	f7ff fb41 	bl	800a028 <_free_r>
 800a9a6:	2000      	movs	r0, #0
 800a9a8:	6360      	str	r0, [r4, #52]	; 0x34
 800a9aa:	e7c1      	b.n	800a930 <__sflush_r+0x1c>
 800a9ac:	6a21      	ldr	r1, [r4, #32]
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	47b0      	blx	r6
 800a9b4:	1c41      	adds	r1, r0, #1
 800a9b6:	d1c7      	bne.n	800a948 <__sflush_r+0x34>
 800a9b8:	682b      	ldr	r3, [r5, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d0c4      	beq.n	800a948 <__sflush_r+0x34>
 800a9be:	2b1d      	cmp	r3, #29
 800a9c0:	d001      	beq.n	800a9c6 <__sflush_r+0xb2>
 800a9c2:	2b16      	cmp	r3, #22
 800a9c4:	d101      	bne.n	800a9ca <__sflush_r+0xb6>
 800a9c6:	602f      	str	r7, [r5, #0]
 800a9c8:	e7b1      	b.n	800a92e <__sflush_r+0x1a>
 800a9ca:	89a3      	ldrh	r3, [r4, #12]
 800a9cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9d0:	81a3      	strh	r3, [r4, #12]
 800a9d2:	e7ad      	b.n	800a930 <__sflush_r+0x1c>
 800a9d4:	690f      	ldr	r7, [r1, #16]
 800a9d6:	2f00      	cmp	r7, #0
 800a9d8:	d0a9      	beq.n	800a92e <__sflush_r+0x1a>
 800a9da:	0793      	lsls	r3, r2, #30
 800a9dc:	680e      	ldr	r6, [r1, #0]
 800a9de:	bf08      	it	eq
 800a9e0:	694b      	ldreq	r3, [r1, #20]
 800a9e2:	600f      	str	r7, [r1, #0]
 800a9e4:	bf18      	it	ne
 800a9e6:	2300      	movne	r3, #0
 800a9e8:	eba6 0807 	sub.w	r8, r6, r7
 800a9ec:	608b      	str	r3, [r1, #8]
 800a9ee:	f1b8 0f00 	cmp.w	r8, #0
 800a9f2:	dd9c      	ble.n	800a92e <__sflush_r+0x1a>
 800a9f4:	6a21      	ldr	r1, [r4, #32]
 800a9f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9f8:	4643      	mov	r3, r8
 800a9fa:	463a      	mov	r2, r7
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	47b0      	blx	r6
 800aa00:	2800      	cmp	r0, #0
 800aa02:	dc06      	bgt.n	800aa12 <__sflush_r+0xfe>
 800aa04:	89a3      	ldrh	r3, [r4, #12]
 800aa06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa0a:	81a3      	strh	r3, [r4, #12]
 800aa0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa10:	e78e      	b.n	800a930 <__sflush_r+0x1c>
 800aa12:	4407      	add	r7, r0
 800aa14:	eba8 0800 	sub.w	r8, r8, r0
 800aa18:	e7e9      	b.n	800a9ee <__sflush_r+0xda>
 800aa1a:	bf00      	nop
 800aa1c:	20400001 	.word	0x20400001

0800aa20 <_fflush_r>:
 800aa20:	b538      	push	{r3, r4, r5, lr}
 800aa22:	690b      	ldr	r3, [r1, #16]
 800aa24:	4605      	mov	r5, r0
 800aa26:	460c      	mov	r4, r1
 800aa28:	b913      	cbnz	r3, 800aa30 <_fflush_r+0x10>
 800aa2a:	2500      	movs	r5, #0
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	bd38      	pop	{r3, r4, r5, pc}
 800aa30:	b118      	cbz	r0, 800aa3a <_fflush_r+0x1a>
 800aa32:	6983      	ldr	r3, [r0, #24]
 800aa34:	b90b      	cbnz	r3, 800aa3a <_fflush_r+0x1a>
 800aa36:	f000 f887 	bl	800ab48 <__sinit>
 800aa3a:	4b14      	ldr	r3, [pc, #80]	; (800aa8c <_fflush_r+0x6c>)
 800aa3c:	429c      	cmp	r4, r3
 800aa3e:	d11b      	bne.n	800aa78 <_fflush_r+0x58>
 800aa40:	686c      	ldr	r4, [r5, #4]
 800aa42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d0ef      	beq.n	800aa2a <_fflush_r+0xa>
 800aa4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa4c:	07d0      	lsls	r0, r2, #31
 800aa4e:	d404      	bmi.n	800aa5a <_fflush_r+0x3a>
 800aa50:	0599      	lsls	r1, r3, #22
 800aa52:	d402      	bmi.n	800aa5a <_fflush_r+0x3a>
 800aa54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa56:	f000 f915 	bl	800ac84 <__retarget_lock_acquire_recursive>
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	4621      	mov	r1, r4
 800aa5e:	f7ff ff59 	bl	800a914 <__sflush_r>
 800aa62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa64:	07da      	lsls	r2, r3, #31
 800aa66:	4605      	mov	r5, r0
 800aa68:	d4e0      	bmi.n	800aa2c <_fflush_r+0xc>
 800aa6a:	89a3      	ldrh	r3, [r4, #12]
 800aa6c:	059b      	lsls	r3, r3, #22
 800aa6e:	d4dd      	bmi.n	800aa2c <_fflush_r+0xc>
 800aa70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa72:	f000 f908 	bl	800ac86 <__retarget_lock_release_recursive>
 800aa76:	e7d9      	b.n	800aa2c <_fflush_r+0xc>
 800aa78:	4b05      	ldr	r3, [pc, #20]	; (800aa90 <_fflush_r+0x70>)
 800aa7a:	429c      	cmp	r4, r3
 800aa7c:	d101      	bne.n	800aa82 <_fflush_r+0x62>
 800aa7e:	68ac      	ldr	r4, [r5, #8]
 800aa80:	e7df      	b.n	800aa42 <_fflush_r+0x22>
 800aa82:	4b04      	ldr	r3, [pc, #16]	; (800aa94 <_fflush_r+0x74>)
 800aa84:	429c      	cmp	r4, r3
 800aa86:	bf08      	it	eq
 800aa88:	68ec      	ldreq	r4, [r5, #12]
 800aa8a:	e7da      	b.n	800aa42 <_fflush_r+0x22>
 800aa8c:	0800c9dc 	.word	0x0800c9dc
 800aa90:	0800c9fc 	.word	0x0800c9fc
 800aa94:	0800c9bc 	.word	0x0800c9bc

0800aa98 <std>:
 800aa98:	2300      	movs	r3, #0
 800aa9a:	b510      	push	{r4, lr}
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	e9c0 3300 	strd	r3, r3, [r0]
 800aaa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aaa6:	6083      	str	r3, [r0, #8]
 800aaa8:	8181      	strh	r1, [r0, #12]
 800aaaa:	6643      	str	r3, [r0, #100]	; 0x64
 800aaac:	81c2      	strh	r2, [r0, #14]
 800aaae:	6183      	str	r3, [r0, #24]
 800aab0:	4619      	mov	r1, r3
 800aab2:	2208      	movs	r2, #8
 800aab4:	305c      	adds	r0, #92	; 0x5c
 800aab6:	f7ff faaf 	bl	800a018 <memset>
 800aaba:	4b05      	ldr	r3, [pc, #20]	; (800aad0 <std+0x38>)
 800aabc:	6263      	str	r3, [r4, #36]	; 0x24
 800aabe:	4b05      	ldr	r3, [pc, #20]	; (800aad4 <std+0x3c>)
 800aac0:	62a3      	str	r3, [r4, #40]	; 0x28
 800aac2:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <std+0x40>)
 800aac4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aac6:	4b05      	ldr	r3, [pc, #20]	; (800aadc <std+0x44>)
 800aac8:	6224      	str	r4, [r4, #32]
 800aaca:	6323      	str	r3, [r4, #48]	; 0x30
 800aacc:	bd10      	pop	{r4, pc}
 800aace:	bf00      	nop
 800aad0:	0800a69d 	.word	0x0800a69d
 800aad4:	0800a6c3 	.word	0x0800a6c3
 800aad8:	0800a6fb 	.word	0x0800a6fb
 800aadc:	0800a71f 	.word	0x0800a71f

0800aae0 <_cleanup_r>:
 800aae0:	4901      	ldr	r1, [pc, #4]	; (800aae8 <_cleanup_r+0x8>)
 800aae2:	f000 b8af 	b.w	800ac44 <_fwalk_reent>
 800aae6:	bf00      	nop
 800aae8:	0800aa21 	.word	0x0800aa21

0800aaec <__sfmoreglue>:
 800aaec:	b570      	push	{r4, r5, r6, lr}
 800aaee:	2268      	movs	r2, #104	; 0x68
 800aaf0:	1e4d      	subs	r5, r1, #1
 800aaf2:	4355      	muls	r5, r2
 800aaf4:	460e      	mov	r6, r1
 800aaf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aafa:	f7ff fb01 	bl	800a100 <_malloc_r>
 800aafe:	4604      	mov	r4, r0
 800ab00:	b140      	cbz	r0, 800ab14 <__sfmoreglue+0x28>
 800ab02:	2100      	movs	r1, #0
 800ab04:	e9c0 1600 	strd	r1, r6, [r0]
 800ab08:	300c      	adds	r0, #12
 800ab0a:	60a0      	str	r0, [r4, #8]
 800ab0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab10:	f7ff fa82 	bl	800a018 <memset>
 800ab14:	4620      	mov	r0, r4
 800ab16:	bd70      	pop	{r4, r5, r6, pc}

0800ab18 <__sfp_lock_acquire>:
 800ab18:	4801      	ldr	r0, [pc, #4]	; (800ab20 <__sfp_lock_acquire+0x8>)
 800ab1a:	f000 b8b3 	b.w	800ac84 <__retarget_lock_acquire_recursive>
 800ab1e:	bf00      	nop
 800ab20:	20017691 	.word	0x20017691

0800ab24 <__sfp_lock_release>:
 800ab24:	4801      	ldr	r0, [pc, #4]	; (800ab2c <__sfp_lock_release+0x8>)
 800ab26:	f000 b8ae 	b.w	800ac86 <__retarget_lock_release_recursive>
 800ab2a:	bf00      	nop
 800ab2c:	20017691 	.word	0x20017691

0800ab30 <__sinit_lock_acquire>:
 800ab30:	4801      	ldr	r0, [pc, #4]	; (800ab38 <__sinit_lock_acquire+0x8>)
 800ab32:	f000 b8a7 	b.w	800ac84 <__retarget_lock_acquire_recursive>
 800ab36:	bf00      	nop
 800ab38:	20017692 	.word	0x20017692

0800ab3c <__sinit_lock_release>:
 800ab3c:	4801      	ldr	r0, [pc, #4]	; (800ab44 <__sinit_lock_release+0x8>)
 800ab3e:	f000 b8a2 	b.w	800ac86 <__retarget_lock_release_recursive>
 800ab42:	bf00      	nop
 800ab44:	20017692 	.word	0x20017692

0800ab48 <__sinit>:
 800ab48:	b510      	push	{r4, lr}
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	f7ff fff0 	bl	800ab30 <__sinit_lock_acquire>
 800ab50:	69a3      	ldr	r3, [r4, #24]
 800ab52:	b11b      	cbz	r3, 800ab5c <__sinit+0x14>
 800ab54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab58:	f7ff bff0 	b.w	800ab3c <__sinit_lock_release>
 800ab5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab60:	6523      	str	r3, [r4, #80]	; 0x50
 800ab62:	4b13      	ldr	r3, [pc, #76]	; (800abb0 <__sinit+0x68>)
 800ab64:	4a13      	ldr	r2, [pc, #76]	; (800abb4 <__sinit+0x6c>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab6a:	42a3      	cmp	r3, r4
 800ab6c:	bf04      	itt	eq
 800ab6e:	2301      	moveq	r3, #1
 800ab70:	61a3      	streq	r3, [r4, #24]
 800ab72:	4620      	mov	r0, r4
 800ab74:	f000 f820 	bl	800abb8 <__sfp>
 800ab78:	6060      	str	r0, [r4, #4]
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f000 f81c 	bl	800abb8 <__sfp>
 800ab80:	60a0      	str	r0, [r4, #8]
 800ab82:	4620      	mov	r0, r4
 800ab84:	f000 f818 	bl	800abb8 <__sfp>
 800ab88:	2200      	movs	r2, #0
 800ab8a:	60e0      	str	r0, [r4, #12]
 800ab8c:	2104      	movs	r1, #4
 800ab8e:	6860      	ldr	r0, [r4, #4]
 800ab90:	f7ff ff82 	bl	800aa98 <std>
 800ab94:	68a0      	ldr	r0, [r4, #8]
 800ab96:	2201      	movs	r2, #1
 800ab98:	2109      	movs	r1, #9
 800ab9a:	f7ff ff7d 	bl	800aa98 <std>
 800ab9e:	68e0      	ldr	r0, [r4, #12]
 800aba0:	2202      	movs	r2, #2
 800aba2:	2112      	movs	r1, #18
 800aba4:	f7ff ff78 	bl	800aa98 <std>
 800aba8:	2301      	movs	r3, #1
 800abaa:	61a3      	str	r3, [r4, #24]
 800abac:	e7d2      	b.n	800ab54 <__sinit+0xc>
 800abae:	bf00      	nop
 800abb0:	0800c9b8 	.word	0x0800c9b8
 800abb4:	0800aae1 	.word	0x0800aae1

0800abb8 <__sfp>:
 800abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abba:	4607      	mov	r7, r0
 800abbc:	f7ff ffac 	bl	800ab18 <__sfp_lock_acquire>
 800abc0:	4b1e      	ldr	r3, [pc, #120]	; (800ac3c <__sfp+0x84>)
 800abc2:	681e      	ldr	r6, [r3, #0]
 800abc4:	69b3      	ldr	r3, [r6, #24]
 800abc6:	b913      	cbnz	r3, 800abce <__sfp+0x16>
 800abc8:	4630      	mov	r0, r6
 800abca:	f7ff ffbd 	bl	800ab48 <__sinit>
 800abce:	3648      	adds	r6, #72	; 0x48
 800abd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800abd4:	3b01      	subs	r3, #1
 800abd6:	d503      	bpl.n	800abe0 <__sfp+0x28>
 800abd8:	6833      	ldr	r3, [r6, #0]
 800abda:	b30b      	cbz	r3, 800ac20 <__sfp+0x68>
 800abdc:	6836      	ldr	r6, [r6, #0]
 800abde:	e7f7      	b.n	800abd0 <__sfp+0x18>
 800abe0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800abe4:	b9d5      	cbnz	r5, 800ac1c <__sfp+0x64>
 800abe6:	4b16      	ldr	r3, [pc, #88]	; (800ac40 <__sfp+0x88>)
 800abe8:	60e3      	str	r3, [r4, #12]
 800abea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800abee:	6665      	str	r5, [r4, #100]	; 0x64
 800abf0:	f000 f847 	bl	800ac82 <__retarget_lock_init_recursive>
 800abf4:	f7ff ff96 	bl	800ab24 <__sfp_lock_release>
 800abf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800abfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac00:	6025      	str	r5, [r4, #0]
 800ac02:	61a5      	str	r5, [r4, #24]
 800ac04:	2208      	movs	r2, #8
 800ac06:	4629      	mov	r1, r5
 800ac08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac0c:	f7ff fa04 	bl	800a018 <memset>
 800ac10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac18:	4620      	mov	r0, r4
 800ac1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac1c:	3468      	adds	r4, #104	; 0x68
 800ac1e:	e7d9      	b.n	800abd4 <__sfp+0x1c>
 800ac20:	2104      	movs	r1, #4
 800ac22:	4638      	mov	r0, r7
 800ac24:	f7ff ff62 	bl	800aaec <__sfmoreglue>
 800ac28:	4604      	mov	r4, r0
 800ac2a:	6030      	str	r0, [r6, #0]
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	d1d5      	bne.n	800abdc <__sfp+0x24>
 800ac30:	f7ff ff78 	bl	800ab24 <__sfp_lock_release>
 800ac34:	230c      	movs	r3, #12
 800ac36:	603b      	str	r3, [r7, #0]
 800ac38:	e7ee      	b.n	800ac18 <__sfp+0x60>
 800ac3a:	bf00      	nop
 800ac3c:	0800c9b8 	.word	0x0800c9b8
 800ac40:	ffff0001 	.word	0xffff0001

0800ac44 <_fwalk_reent>:
 800ac44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac48:	4606      	mov	r6, r0
 800ac4a:	4688      	mov	r8, r1
 800ac4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac50:	2700      	movs	r7, #0
 800ac52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac56:	f1b9 0901 	subs.w	r9, r9, #1
 800ac5a:	d505      	bpl.n	800ac68 <_fwalk_reent+0x24>
 800ac5c:	6824      	ldr	r4, [r4, #0]
 800ac5e:	2c00      	cmp	r4, #0
 800ac60:	d1f7      	bne.n	800ac52 <_fwalk_reent+0xe>
 800ac62:	4638      	mov	r0, r7
 800ac64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac68:	89ab      	ldrh	r3, [r5, #12]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d907      	bls.n	800ac7e <_fwalk_reent+0x3a>
 800ac6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac72:	3301      	adds	r3, #1
 800ac74:	d003      	beq.n	800ac7e <_fwalk_reent+0x3a>
 800ac76:	4629      	mov	r1, r5
 800ac78:	4630      	mov	r0, r6
 800ac7a:	47c0      	blx	r8
 800ac7c:	4307      	orrs	r7, r0
 800ac7e:	3568      	adds	r5, #104	; 0x68
 800ac80:	e7e9      	b.n	800ac56 <_fwalk_reent+0x12>

0800ac82 <__retarget_lock_init_recursive>:
 800ac82:	4770      	bx	lr

0800ac84 <__retarget_lock_acquire_recursive>:
 800ac84:	4770      	bx	lr

0800ac86 <__retarget_lock_release_recursive>:
 800ac86:	4770      	bx	lr

0800ac88 <_lseek_r>:
 800ac88:	b538      	push	{r3, r4, r5, lr}
 800ac8a:	4d07      	ldr	r5, [pc, #28]	; (800aca8 <_lseek_r+0x20>)
 800ac8c:	4604      	mov	r4, r0
 800ac8e:	4608      	mov	r0, r1
 800ac90:	4611      	mov	r1, r2
 800ac92:	2200      	movs	r2, #0
 800ac94:	602a      	str	r2, [r5, #0]
 800ac96:	461a      	mov	r2, r3
 800ac98:	f7f8 f8c8 	bl	8002e2c <_lseek>
 800ac9c:	1c43      	adds	r3, r0, #1
 800ac9e:	d102      	bne.n	800aca6 <_lseek_r+0x1e>
 800aca0:	682b      	ldr	r3, [r5, #0]
 800aca2:	b103      	cbz	r3, 800aca6 <_lseek_r+0x1e>
 800aca4:	6023      	str	r3, [r4, #0]
 800aca6:	bd38      	pop	{r3, r4, r5, pc}
 800aca8:	20017694 	.word	0x20017694

0800acac <__swhatbuf_r>:
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	460e      	mov	r6, r1
 800acb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb4:	2900      	cmp	r1, #0
 800acb6:	b096      	sub	sp, #88	; 0x58
 800acb8:	4614      	mov	r4, r2
 800acba:	461d      	mov	r5, r3
 800acbc:	da08      	bge.n	800acd0 <__swhatbuf_r+0x24>
 800acbe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800acc2:	2200      	movs	r2, #0
 800acc4:	602a      	str	r2, [r5, #0]
 800acc6:	061a      	lsls	r2, r3, #24
 800acc8:	d410      	bmi.n	800acec <__swhatbuf_r+0x40>
 800acca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acce:	e00e      	b.n	800acee <__swhatbuf_r+0x42>
 800acd0:	466a      	mov	r2, sp
 800acd2:	f000 ffed 	bl	800bcb0 <_fstat_r>
 800acd6:	2800      	cmp	r0, #0
 800acd8:	dbf1      	blt.n	800acbe <__swhatbuf_r+0x12>
 800acda:	9a01      	ldr	r2, [sp, #4]
 800acdc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ace0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ace4:	425a      	negs	r2, r3
 800ace6:	415a      	adcs	r2, r3
 800ace8:	602a      	str	r2, [r5, #0]
 800acea:	e7ee      	b.n	800acca <__swhatbuf_r+0x1e>
 800acec:	2340      	movs	r3, #64	; 0x40
 800acee:	2000      	movs	r0, #0
 800acf0:	6023      	str	r3, [r4, #0]
 800acf2:	b016      	add	sp, #88	; 0x58
 800acf4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800acf8 <__smakebuf_r>:
 800acf8:	898b      	ldrh	r3, [r1, #12]
 800acfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acfc:	079d      	lsls	r5, r3, #30
 800acfe:	4606      	mov	r6, r0
 800ad00:	460c      	mov	r4, r1
 800ad02:	d507      	bpl.n	800ad14 <__smakebuf_r+0x1c>
 800ad04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad08:	6023      	str	r3, [r4, #0]
 800ad0a:	6123      	str	r3, [r4, #16]
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	6163      	str	r3, [r4, #20]
 800ad10:	b002      	add	sp, #8
 800ad12:	bd70      	pop	{r4, r5, r6, pc}
 800ad14:	ab01      	add	r3, sp, #4
 800ad16:	466a      	mov	r2, sp
 800ad18:	f7ff ffc8 	bl	800acac <__swhatbuf_r>
 800ad1c:	9900      	ldr	r1, [sp, #0]
 800ad1e:	4605      	mov	r5, r0
 800ad20:	4630      	mov	r0, r6
 800ad22:	f7ff f9ed 	bl	800a100 <_malloc_r>
 800ad26:	b948      	cbnz	r0, 800ad3c <__smakebuf_r+0x44>
 800ad28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad2c:	059a      	lsls	r2, r3, #22
 800ad2e:	d4ef      	bmi.n	800ad10 <__smakebuf_r+0x18>
 800ad30:	f023 0303 	bic.w	r3, r3, #3
 800ad34:	f043 0302 	orr.w	r3, r3, #2
 800ad38:	81a3      	strh	r3, [r4, #12]
 800ad3a:	e7e3      	b.n	800ad04 <__smakebuf_r+0xc>
 800ad3c:	4b0d      	ldr	r3, [pc, #52]	; (800ad74 <__smakebuf_r+0x7c>)
 800ad3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad40:	89a3      	ldrh	r3, [r4, #12]
 800ad42:	6020      	str	r0, [r4, #0]
 800ad44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad48:	81a3      	strh	r3, [r4, #12]
 800ad4a:	9b00      	ldr	r3, [sp, #0]
 800ad4c:	6163      	str	r3, [r4, #20]
 800ad4e:	9b01      	ldr	r3, [sp, #4]
 800ad50:	6120      	str	r0, [r4, #16]
 800ad52:	b15b      	cbz	r3, 800ad6c <__smakebuf_r+0x74>
 800ad54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f000 ffbb 	bl	800bcd4 <_isatty_r>
 800ad5e:	b128      	cbz	r0, 800ad6c <__smakebuf_r+0x74>
 800ad60:	89a3      	ldrh	r3, [r4, #12]
 800ad62:	f023 0303 	bic.w	r3, r3, #3
 800ad66:	f043 0301 	orr.w	r3, r3, #1
 800ad6a:	81a3      	strh	r3, [r4, #12]
 800ad6c:	89a0      	ldrh	r0, [r4, #12]
 800ad6e:	4305      	orrs	r5, r0
 800ad70:	81a5      	strh	r5, [r4, #12]
 800ad72:	e7cd      	b.n	800ad10 <__smakebuf_r+0x18>
 800ad74:	0800aae1 	.word	0x0800aae1

0800ad78 <__malloc_lock>:
 800ad78:	4801      	ldr	r0, [pc, #4]	; (800ad80 <__malloc_lock+0x8>)
 800ad7a:	f7ff bf83 	b.w	800ac84 <__retarget_lock_acquire_recursive>
 800ad7e:	bf00      	nop
 800ad80:	20017690 	.word	0x20017690

0800ad84 <__malloc_unlock>:
 800ad84:	4801      	ldr	r0, [pc, #4]	; (800ad8c <__malloc_unlock+0x8>)
 800ad86:	f7ff bf7e 	b.w	800ac86 <__retarget_lock_release_recursive>
 800ad8a:	bf00      	nop
 800ad8c:	20017690 	.word	0x20017690

0800ad90 <__ssputs_r>:
 800ad90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad94:	688e      	ldr	r6, [r1, #8]
 800ad96:	429e      	cmp	r6, r3
 800ad98:	4682      	mov	sl, r0
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	4690      	mov	r8, r2
 800ad9e:	461f      	mov	r7, r3
 800ada0:	d838      	bhi.n	800ae14 <__ssputs_r+0x84>
 800ada2:	898a      	ldrh	r2, [r1, #12]
 800ada4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ada8:	d032      	beq.n	800ae10 <__ssputs_r+0x80>
 800adaa:	6825      	ldr	r5, [r4, #0]
 800adac:	6909      	ldr	r1, [r1, #16]
 800adae:	eba5 0901 	sub.w	r9, r5, r1
 800adb2:	6965      	ldr	r5, [r4, #20]
 800adb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adbc:	3301      	adds	r3, #1
 800adbe:	444b      	add	r3, r9
 800adc0:	106d      	asrs	r5, r5, #1
 800adc2:	429d      	cmp	r5, r3
 800adc4:	bf38      	it	cc
 800adc6:	461d      	movcc	r5, r3
 800adc8:	0553      	lsls	r3, r2, #21
 800adca:	d531      	bpl.n	800ae30 <__ssputs_r+0xa0>
 800adcc:	4629      	mov	r1, r5
 800adce:	f7ff f997 	bl	800a100 <_malloc_r>
 800add2:	4606      	mov	r6, r0
 800add4:	b950      	cbnz	r0, 800adec <__ssputs_r+0x5c>
 800add6:	230c      	movs	r3, #12
 800add8:	f8ca 3000 	str.w	r3, [sl]
 800addc:	89a3      	ldrh	r3, [r4, #12]
 800adde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ade2:	81a3      	strh	r3, [r4, #12]
 800ade4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ade8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adec:	6921      	ldr	r1, [r4, #16]
 800adee:	464a      	mov	r2, r9
 800adf0:	f7ff f904 	bl	8009ffc <memcpy>
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adfe:	81a3      	strh	r3, [r4, #12]
 800ae00:	6126      	str	r6, [r4, #16]
 800ae02:	6165      	str	r5, [r4, #20]
 800ae04:	444e      	add	r6, r9
 800ae06:	eba5 0509 	sub.w	r5, r5, r9
 800ae0a:	6026      	str	r6, [r4, #0]
 800ae0c:	60a5      	str	r5, [r4, #8]
 800ae0e:	463e      	mov	r6, r7
 800ae10:	42be      	cmp	r6, r7
 800ae12:	d900      	bls.n	800ae16 <__ssputs_r+0x86>
 800ae14:	463e      	mov	r6, r7
 800ae16:	6820      	ldr	r0, [r4, #0]
 800ae18:	4632      	mov	r2, r6
 800ae1a:	4641      	mov	r1, r8
 800ae1c:	f000 ff6a 	bl	800bcf4 <memmove>
 800ae20:	68a3      	ldr	r3, [r4, #8]
 800ae22:	1b9b      	subs	r3, r3, r6
 800ae24:	60a3      	str	r3, [r4, #8]
 800ae26:	6823      	ldr	r3, [r4, #0]
 800ae28:	4433      	add	r3, r6
 800ae2a:	6023      	str	r3, [r4, #0]
 800ae2c:	2000      	movs	r0, #0
 800ae2e:	e7db      	b.n	800ade8 <__ssputs_r+0x58>
 800ae30:	462a      	mov	r2, r5
 800ae32:	f000 ff79 	bl	800bd28 <_realloc_r>
 800ae36:	4606      	mov	r6, r0
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	d1e1      	bne.n	800ae00 <__ssputs_r+0x70>
 800ae3c:	6921      	ldr	r1, [r4, #16]
 800ae3e:	4650      	mov	r0, sl
 800ae40:	f7ff f8f2 	bl	800a028 <_free_r>
 800ae44:	e7c7      	b.n	800add6 <__ssputs_r+0x46>
	...

0800ae48 <_svfiprintf_r>:
 800ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4c:	4698      	mov	r8, r3
 800ae4e:	898b      	ldrh	r3, [r1, #12]
 800ae50:	061b      	lsls	r3, r3, #24
 800ae52:	b09d      	sub	sp, #116	; 0x74
 800ae54:	4607      	mov	r7, r0
 800ae56:	460d      	mov	r5, r1
 800ae58:	4614      	mov	r4, r2
 800ae5a:	d50e      	bpl.n	800ae7a <_svfiprintf_r+0x32>
 800ae5c:	690b      	ldr	r3, [r1, #16]
 800ae5e:	b963      	cbnz	r3, 800ae7a <_svfiprintf_r+0x32>
 800ae60:	2140      	movs	r1, #64	; 0x40
 800ae62:	f7ff f94d 	bl	800a100 <_malloc_r>
 800ae66:	6028      	str	r0, [r5, #0]
 800ae68:	6128      	str	r0, [r5, #16]
 800ae6a:	b920      	cbnz	r0, 800ae76 <_svfiprintf_r+0x2e>
 800ae6c:	230c      	movs	r3, #12
 800ae6e:	603b      	str	r3, [r7, #0]
 800ae70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae74:	e0d1      	b.n	800b01a <_svfiprintf_r+0x1d2>
 800ae76:	2340      	movs	r3, #64	; 0x40
 800ae78:	616b      	str	r3, [r5, #20]
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae7e:	2320      	movs	r3, #32
 800ae80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae84:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae88:	2330      	movs	r3, #48	; 0x30
 800ae8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b034 <_svfiprintf_r+0x1ec>
 800ae8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae92:	f04f 0901 	mov.w	r9, #1
 800ae96:	4623      	mov	r3, r4
 800ae98:	469a      	mov	sl, r3
 800ae9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae9e:	b10a      	cbz	r2, 800aea4 <_svfiprintf_r+0x5c>
 800aea0:	2a25      	cmp	r2, #37	; 0x25
 800aea2:	d1f9      	bne.n	800ae98 <_svfiprintf_r+0x50>
 800aea4:	ebba 0b04 	subs.w	fp, sl, r4
 800aea8:	d00b      	beq.n	800aec2 <_svfiprintf_r+0x7a>
 800aeaa:	465b      	mov	r3, fp
 800aeac:	4622      	mov	r2, r4
 800aeae:	4629      	mov	r1, r5
 800aeb0:	4638      	mov	r0, r7
 800aeb2:	f7ff ff6d 	bl	800ad90 <__ssputs_r>
 800aeb6:	3001      	adds	r0, #1
 800aeb8:	f000 80aa 	beq.w	800b010 <_svfiprintf_r+0x1c8>
 800aebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aebe:	445a      	add	r2, fp
 800aec0:	9209      	str	r2, [sp, #36]	; 0x24
 800aec2:	f89a 3000 	ldrb.w	r3, [sl]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f000 80a2 	beq.w	800b010 <_svfiprintf_r+0x1c8>
 800aecc:	2300      	movs	r3, #0
 800aece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aed6:	f10a 0a01 	add.w	sl, sl, #1
 800aeda:	9304      	str	r3, [sp, #16]
 800aedc:	9307      	str	r3, [sp, #28]
 800aede:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aee2:	931a      	str	r3, [sp, #104]	; 0x68
 800aee4:	4654      	mov	r4, sl
 800aee6:	2205      	movs	r2, #5
 800aee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeec:	4851      	ldr	r0, [pc, #324]	; (800b034 <_svfiprintf_r+0x1ec>)
 800aeee:	f7f5 f987 	bl	8000200 <memchr>
 800aef2:	9a04      	ldr	r2, [sp, #16]
 800aef4:	b9d8      	cbnz	r0, 800af2e <_svfiprintf_r+0xe6>
 800aef6:	06d0      	lsls	r0, r2, #27
 800aef8:	bf44      	itt	mi
 800aefa:	2320      	movmi	r3, #32
 800aefc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af00:	0711      	lsls	r1, r2, #28
 800af02:	bf44      	itt	mi
 800af04:	232b      	movmi	r3, #43	; 0x2b
 800af06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af0a:	f89a 3000 	ldrb.w	r3, [sl]
 800af0e:	2b2a      	cmp	r3, #42	; 0x2a
 800af10:	d015      	beq.n	800af3e <_svfiprintf_r+0xf6>
 800af12:	9a07      	ldr	r2, [sp, #28]
 800af14:	4654      	mov	r4, sl
 800af16:	2000      	movs	r0, #0
 800af18:	f04f 0c0a 	mov.w	ip, #10
 800af1c:	4621      	mov	r1, r4
 800af1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af22:	3b30      	subs	r3, #48	; 0x30
 800af24:	2b09      	cmp	r3, #9
 800af26:	d94e      	bls.n	800afc6 <_svfiprintf_r+0x17e>
 800af28:	b1b0      	cbz	r0, 800af58 <_svfiprintf_r+0x110>
 800af2a:	9207      	str	r2, [sp, #28]
 800af2c:	e014      	b.n	800af58 <_svfiprintf_r+0x110>
 800af2e:	eba0 0308 	sub.w	r3, r0, r8
 800af32:	fa09 f303 	lsl.w	r3, r9, r3
 800af36:	4313      	orrs	r3, r2
 800af38:	9304      	str	r3, [sp, #16]
 800af3a:	46a2      	mov	sl, r4
 800af3c:	e7d2      	b.n	800aee4 <_svfiprintf_r+0x9c>
 800af3e:	9b03      	ldr	r3, [sp, #12]
 800af40:	1d19      	adds	r1, r3, #4
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	9103      	str	r1, [sp, #12]
 800af46:	2b00      	cmp	r3, #0
 800af48:	bfbb      	ittet	lt
 800af4a:	425b      	neglt	r3, r3
 800af4c:	f042 0202 	orrlt.w	r2, r2, #2
 800af50:	9307      	strge	r3, [sp, #28]
 800af52:	9307      	strlt	r3, [sp, #28]
 800af54:	bfb8      	it	lt
 800af56:	9204      	strlt	r2, [sp, #16]
 800af58:	7823      	ldrb	r3, [r4, #0]
 800af5a:	2b2e      	cmp	r3, #46	; 0x2e
 800af5c:	d10c      	bne.n	800af78 <_svfiprintf_r+0x130>
 800af5e:	7863      	ldrb	r3, [r4, #1]
 800af60:	2b2a      	cmp	r3, #42	; 0x2a
 800af62:	d135      	bne.n	800afd0 <_svfiprintf_r+0x188>
 800af64:	9b03      	ldr	r3, [sp, #12]
 800af66:	1d1a      	adds	r2, r3, #4
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	9203      	str	r2, [sp, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	bfb8      	it	lt
 800af70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800af74:	3402      	adds	r4, #2
 800af76:	9305      	str	r3, [sp, #20]
 800af78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b044 <_svfiprintf_r+0x1fc>
 800af7c:	7821      	ldrb	r1, [r4, #0]
 800af7e:	2203      	movs	r2, #3
 800af80:	4650      	mov	r0, sl
 800af82:	f7f5 f93d 	bl	8000200 <memchr>
 800af86:	b140      	cbz	r0, 800af9a <_svfiprintf_r+0x152>
 800af88:	2340      	movs	r3, #64	; 0x40
 800af8a:	eba0 000a 	sub.w	r0, r0, sl
 800af8e:	fa03 f000 	lsl.w	r0, r3, r0
 800af92:	9b04      	ldr	r3, [sp, #16]
 800af94:	4303      	orrs	r3, r0
 800af96:	3401      	adds	r4, #1
 800af98:	9304      	str	r3, [sp, #16]
 800af9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af9e:	4826      	ldr	r0, [pc, #152]	; (800b038 <_svfiprintf_r+0x1f0>)
 800afa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afa4:	2206      	movs	r2, #6
 800afa6:	f7f5 f92b 	bl	8000200 <memchr>
 800afaa:	2800      	cmp	r0, #0
 800afac:	d038      	beq.n	800b020 <_svfiprintf_r+0x1d8>
 800afae:	4b23      	ldr	r3, [pc, #140]	; (800b03c <_svfiprintf_r+0x1f4>)
 800afb0:	bb1b      	cbnz	r3, 800affa <_svfiprintf_r+0x1b2>
 800afb2:	9b03      	ldr	r3, [sp, #12]
 800afb4:	3307      	adds	r3, #7
 800afb6:	f023 0307 	bic.w	r3, r3, #7
 800afba:	3308      	adds	r3, #8
 800afbc:	9303      	str	r3, [sp, #12]
 800afbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afc0:	4433      	add	r3, r6
 800afc2:	9309      	str	r3, [sp, #36]	; 0x24
 800afc4:	e767      	b.n	800ae96 <_svfiprintf_r+0x4e>
 800afc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800afca:	460c      	mov	r4, r1
 800afcc:	2001      	movs	r0, #1
 800afce:	e7a5      	b.n	800af1c <_svfiprintf_r+0xd4>
 800afd0:	2300      	movs	r3, #0
 800afd2:	3401      	adds	r4, #1
 800afd4:	9305      	str	r3, [sp, #20]
 800afd6:	4619      	mov	r1, r3
 800afd8:	f04f 0c0a 	mov.w	ip, #10
 800afdc:	4620      	mov	r0, r4
 800afde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afe2:	3a30      	subs	r2, #48	; 0x30
 800afe4:	2a09      	cmp	r2, #9
 800afe6:	d903      	bls.n	800aff0 <_svfiprintf_r+0x1a8>
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d0c5      	beq.n	800af78 <_svfiprintf_r+0x130>
 800afec:	9105      	str	r1, [sp, #20]
 800afee:	e7c3      	b.n	800af78 <_svfiprintf_r+0x130>
 800aff0:	fb0c 2101 	mla	r1, ip, r1, r2
 800aff4:	4604      	mov	r4, r0
 800aff6:	2301      	movs	r3, #1
 800aff8:	e7f0      	b.n	800afdc <_svfiprintf_r+0x194>
 800affa:	ab03      	add	r3, sp, #12
 800affc:	9300      	str	r3, [sp, #0]
 800affe:	462a      	mov	r2, r5
 800b000:	4b0f      	ldr	r3, [pc, #60]	; (800b040 <_svfiprintf_r+0x1f8>)
 800b002:	a904      	add	r1, sp, #16
 800b004:	4638      	mov	r0, r7
 800b006:	f3af 8000 	nop.w
 800b00a:	1c42      	adds	r2, r0, #1
 800b00c:	4606      	mov	r6, r0
 800b00e:	d1d6      	bne.n	800afbe <_svfiprintf_r+0x176>
 800b010:	89ab      	ldrh	r3, [r5, #12]
 800b012:	065b      	lsls	r3, r3, #25
 800b014:	f53f af2c 	bmi.w	800ae70 <_svfiprintf_r+0x28>
 800b018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b01a:	b01d      	add	sp, #116	; 0x74
 800b01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b020:	ab03      	add	r3, sp, #12
 800b022:	9300      	str	r3, [sp, #0]
 800b024:	462a      	mov	r2, r5
 800b026:	4b06      	ldr	r3, [pc, #24]	; (800b040 <_svfiprintf_r+0x1f8>)
 800b028:	a904      	add	r1, sp, #16
 800b02a:	4638      	mov	r0, r7
 800b02c:	f000 fa4c 	bl	800b4c8 <_printf_i>
 800b030:	e7eb      	b.n	800b00a <_svfiprintf_r+0x1c2>
 800b032:	bf00      	nop
 800b034:	0800ca1c 	.word	0x0800ca1c
 800b038:	0800ca26 	.word	0x0800ca26
 800b03c:	00000000 	.word	0x00000000
 800b040:	0800ad91 	.word	0x0800ad91
 800b044:	0800ca22 	.word	0x0800ca22

0800b048 <_sungetc_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	1c4b      	adds	r3, r1, #1
 800b04c:	4614      	mov	r4, r2
 800b04e:	d103      	bne.n	800b058 <_sungetc_r+0x10>
 800b050:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b054:	4628      	mov	r0, r5
 800b056:	bd38      	pop	{r3, r4, r5, pc}
 800b058:	8993      	ldrh	r3, [r2, #12]
 800b05a:	f023 0320 	bic.w	r3, r3, #32
 800b05e:	8193      	strh	r3, [r2, #12]
 800b060:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b062:	6852      	ldr	r2, [r2, #4]
 800b064:	b2cd      	uxtb	r5, r1
 800b066:	b18b      	cbz	r3, 800b08c <_sungetc_r+0x44>
 800b068:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b06a:	4293      	cmp	r3, r2
 800b06c:	dd08      	ble.n	800b080 <_sungetc_r+0x38>
 800b06e:	6823      	ldr	r3, [r4, #0]
 800b070:	1e5a      	subs	r2, r3, #1
 800b072:	6022      	str	r2, [r4, #0]
 800b074:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b078:	6863      	ldr	r3, [r4, #4]
 800b07a:	3301      	adds	r3, #1
 800b07c:	6063      	str	r3, [r4, #4]
 800b07e:	e7e9      	b.n	800b054 <_sungetc_r+0xc>
 800b080:	4621      	mov	r1, r4
 800b082:	f000 fddb 	bl	800bc3c <__submore>
 800b086:	2800      	cmp	r0, #0
 800b088:	d0f1      	beq.n	800b06e <_sungetc_r+0x26>
 800b08a:	e7e1      	b.n	800b050 <_sungetc_r+0x8>
 800b08c:	6921      	ldr	r1, [r4, #16]
 800b08e:	6823      	ldr	r3, [r4, #0]
 800b090:	b151      	cbz	r1, 800b0a8 <_sungetc_r+0x60>
 800b092:	4299      	cmp	r1, r3
 800b094:	d208      	bcs.n	800b0a8 <_sungetc_r+0x60>
 800b096:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b09a:	42a9      	cmp	r1, r5
 800b09c:	d104      	bne.n	800b0a8 <_sungetc_r+0x60>
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	3201      	adds	r2, #1
 800b0a2:	6023      	str	r3, [r4, #0]
 800b0a4:	6062      	str	r2, [r4, #4]
 800b0a6:	e7d5      	b.n	800b054 <_sungetc_r+0xc>
 800b0a8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b0ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0b0:	6363      	str	r3, [r4, #52]	; 0x34
 800b0b2:	2303      	movs	r3, #3
 800b0b4:	63a3      	str	r3, [r4, #56]	; 0x38
 800b0b6:	4623      	mov	r3, r4
 800b0b8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b0bc:	6023      	str	r3, [r4, #0]
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e7dc      	b.n	800b07c <_sungetc_r+0x34>

0800b0c2 <__ssrefill_r>:
 800b0c2:	b510      	push	{r4, lr}
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b0c8:	b169      	cbz	r1, 800b0e6 <__ssrefill_r+0x24>
 800b0ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0ce:	4299      	cmp	r1, r3
 800b0d0:	d001      	beq.n	800b0d6 <__ssrefill_r+0x14>
 800b0d2:	f7fe ffa9 	bl	800a028 <_free_r>
 800b0d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0d8:	6063      	str	r3, [r4, #4]
 800b0da:	2000      	movs	r0, #0
 800b0dc:	6360      	str	r0, [r4, #52]	; 0x34
 800b0de:	b113      	cbz	r3, 800b0e6 <__ssrefill_r+0x24>
 800b0e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b0e2:	6023      	str	r3, [r4, #0]
 800b0e4:	bd10      	pop	{r4, pc}
 800b0e6:	6923      	ldr	r3, [r4, #16]
 800b0e8:	6023      	str	r3, [r4, #0]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	6063      	str	r3, [r4, #4]
 800b0ee:	89a3      	ldrh	r3, [r4, #12]
 800b0f0:	f043 0320 	orr.w	r3, r3, #32
 800b0f4:	81a3      	strh	r3, [r4, #12]
 800b0f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0fa:	e7f3      	b.n	800b0e4 <__ssrefill_r+0x22>

0800b0fc <__ssvfiscanf_r>:
 800b0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b100:	460c      	mov	r4, r1
 800b102:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b106:	2100      	movs	r1, #0
 800b108:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b10c:	49a6      	ldr	r1, [pc, #664]	; (800b3a8 <__ssvfiscanf_r+0x2ac>)
 800b10e:	91a0      	str	r1, [sp, #640]	; 0x280
 800b110:	f10d 0804 	add.w	r8, sp, #4
 800b114:	49a5      	ldr	r1, [pc, #660]	; (800b3ac <__ssvfiscanf_r+0x2b0>)
 800b116:	4fa6      	ldr	r7, [pc, #664]	; (800b3b0 <__ssvfiscanf_r+0x2b4>)
 800b118:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b3b4 <__ssvfiscanf_r+0x2b8>
 800b11c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b120:	4606      	mov	r6, r0
 800b122:	91a1      	str	r1, [sp, #644]	; 0x284
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	7813      	ldrb	r3, [r2, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f000 815a 	beq.w	800b3e2 <__ssvfiscanf_r+0x2e6>
 800b12e:	5dd9      	ldrb	r1, [r3, r7]
 800b130:	f011 0108 	ands.w	r1, r1, #8
 800b134:	f102 0501 	add.w	r5, r2, #1
 800b138:	d019      	beq.n	800b16e <__ssvfiscanf_r+0x72>
 800b13a:	6863      	ldr	r3, [r4, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	dd0f      	ble.n	800b160 <__ssvfiscanf_r+0x64>
 800b140:	6823      	ldr	r3, [r4, #0]
 800b142:	781a      	ldrb	r2, [r3, #0]
 800b144:	5cba      	ldrb	r2, [r7, r2]
 800b146:	0712      	lsls	r2, r2, #28
 800b148:	d401      	bmi.n	800b14e <__ssvfiscanf_r+0x52>
 800b14a:	462a      	mov	r2, r5
 800b14c:	e7eb      	b.n	800b126 <__ssvfiscanf_r+0x2a>
 800b14e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b150:	3201      	adds	r2, #1
 800b152:	9245      	str	r2, [sp, #276]	; 0x114
 800b154:	6862      	ldr	r2, [r4, #4]
 800b156:	3301      	adds	r3, #1
 800b158:	3a01      	subs	r2, #1
 800b15a:	6062      	str	r2, [r4, #4]
 800b15c:	6023      	str	r3, [r4, #0]
 800b15e:	e7ec      	b.n	800b13a <__ssvfiscanf_r+0x3e>
 800b160:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b162:	4621      	mov	r1, r4
 800b164:	4630      	mov	r0, r6
 800b166:	4798      	blx	r3
 800b168:	2800      	cmp	r0, #0
 800b16a:	d0e9      	beq.n	800b140 <__ssvfiscanf_r+0x44>
 800b16c:	e7ed      	b.n	800b14a <__ssvfiscanf_r+0x4e>
 800b16e:	2b25      	cmp	r3, #37	; 0x25
 800b170:	d012      	beq.n	800b198 <__ssvfiscanf_r+0x9c>
 800b172:	469a      	mov	sl, r3
 800b174:	6863      	ldr	r3, [r4, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	f340 8091 	ble.w	800b29e <__ssvfiscanf_r+0x1a2>
 800b17c:	6822      	ldr	r2, [r4, #0]
 800b17e:	7813      	ldrb	r3, [r2, #0]
 800b180:	4553      	cmp	r3, sl
 800b182:	f040 812e 	bne.w	800b3e2 <__ssvfiscanf_r+0x2e6>
 800b186:	6863      	ldr	r3, [r4, #4]
 800b188:	3b01      	subs	r3, #1
 800b18a:	6063      	str	r3, [r4, #4]
 800b18c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b18e:	3201      	adds	r2, #1
 800b190:	3301      	adds	r3, #1
 800b192:	6022      	str	r2, [r4, #0]
 800b194:	9345      	str	r3, [sp, #276]	; 0x114
 800b196:	e7d8      	b.n	800b14a <__ssvfiscanf_r+0x4e>
 800b198:	9141      	str	r1, [sp, #260]	; 0x104
 800b19a:	9143      	str	r1, [sp, #268]	; 0x10c
 800b19c:	7853      	ldrb	r3, [r2, #1]
 800b19e:	2b2a      	cmp	r3, #42	; 0x2a
 800b1a0:	bf02      	ittt	eq
 800b1a2:	2310      	moveq	r3, #16
 800b1a4:	1c95      	addeq	r5, r2, #2
 800b1a6:	9341      	streq	r3, [sp, #260]	; 0x104
 800b1a8:	220a      	movs	r2, #10
 800b1aa:	46aa      	mov	sl, r5
 800b1ac:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b1b0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b1b4:	2b09      	cmp	r3, #9
 800b1b6:	d91d      	bls.n	800b1f4 <__ssvfiscanf_r+0xf8>
 800b1b8:	487e      	ldr	r0, [pc, #504]	; (800b3b4 <__ssvfiscanf_r+0x2b8>)
 800b1ba:	2203      	movs	r2, #3
 800b1bc:	f7f5 f820 	bl	8000200 <memchr>
 800b1c0:	b140      	cbz	r0, 800b1d4 <__ssvfiscanf_r+0xd8>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	eba0 0009 	sub.w	r0, r0, r9
 800b1c8:	fa03 f000 	lsl.w	r0, r3, r0
 800b1cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b1ce:	4318      	orrs	r0, r3
 800b1d0:	9041      	str	r0, [sp, #260]	; 0x104
 800b1d2:	4655      	mov	r5, sl
 800b1d4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b1d8:	2b78      	cmp	r3, #120	; 0x78
 800b1da:	d806      	bhi.n	800b1ea <__ssvfiscanf_r+0xee>
 800b1dc:	2b57      	cmp	r3, #87	; 0x57
 800b1de:	d810      	bhi.n	800b202 <__ssvfiscanf_r+0x106>
 800b1e0:	2b25      	cmp	r3, #37	; 0x25
 800b1e2:	d0c6      	beq.n	800b172 <__ssvfiscanf_r+0x76>
 800b1e4:	d856      	bhi.n	800b294 <__ssvfiscanf_r+0x198>
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d064      	beq.n	800b2b4 <__ssvfiscanf_r+0x1b8>
 800b1ea:	2303      	movs	r3, #3
 800b1ec:	9347      	str	r3, [sp, #284]	; 0x11c
 800b1ee:	230a      	movs	r3, #10
 800b1f0:	9342      	str	r3, [sp, #264]	; 0x108
 800b1f2:	e071      	b.n	800b2d8 <__ssvfiscanf_r+0x1dc>
 800b1f4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b1f6:	fb02 1103 	mla	r1, r2, r3, r1
 800b1fa:	3930      	subs	r1, #48	; 0x30
 800b1fc:	9143      	str	r1, [sp, #268]	; 0x10c
 800b1fe:	4655      	mov	r5, sl
 800b200:	e7d3      	b.n	800b1aa <__ssvfiscanf_r+0xae>
 800b202:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b206:	2a20      	cmp	r2, #32
 800b208:	d8ef      	bhi.n	800b1ea <__ssvfiscanf_r+0xee>
 800b20a:	a101      	add	r1, pc, #4	; (adr r1, 800b210 <__ssvfiscanf_r+0x114>)
 800b20c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b210:	0800b2c3 	.word	0x0800b2c3
 800b214:	0800b1eb 	.word	0x0800b1eb
 800b218:	0800b1eb 	.word	0x0800b1eb
 800b21c:	0800b321 	.word	0x0800b321
 800b220:	0800b1eb 	.word	0x0800b1eb
 800b224:	0800b1eb 	.word	0x0800b1eb
 800b228:	0800b1eb 	.word	0x0800b1eb
 800b22c:	0800b1eb 	.word	0x0800b1eb
 800b230:	0800b1eb 	.word	0x0800b1eb
 800b234:	0800b1eb 	.word	0x0800b1eb
 800b238:	0800b1eb 	.word	0x0800b1eb
 800b23c:	0800b337 	.word	0x0800b337
 800b240:	0800b30d 	.word	0x0800b30d
 800b244:	0800b29b 	.word	0x0800b29b
 800b248:	0800b29b 	.word	0x0800b29b
 800b24c:	0800b29b 	.word	0x0800b29b
 800b250:	0800b1eb 	.word	0x0800b1eb
 800b254:	0800b311 	.word	0x0800b311
 800b258:	0800b1eb 	.word	0x0800b1eb
 800b25c:	0800b1eb 	.word	0x0800b1eb
 800b260:	0800b1eb 	.word	0x0800b1eb
 800b264:	0800b1eb 	.word	0x0800b1eb
 800b268:	0800b347 	.word	0x0800b347
 800b26c:	0800b319 	.word	0x0800b319
 800b270:	0800b2bb 	.word	0x0800b2bb
 800b274:	0800b1eb 	.word	0x0800b1eb
 800b278:	0800b1eb 	.word	0x0800b1eb
 800b27c:	0800b343 	.word	0x0800b343
 800b280:	0800b1eb 	.word	0x0800b1eb
 800b284:	0800b30d 	.word	0x0800b30d
 800b288:	0800b1eb 	.word	0x0800b1eb
 800b28c:	0800b1eb 	.word	0x0800b1eb
 800b290:	0800b2c3 	.word	0x0800b2c3
 800b294:	3b45      	subs	r3, #69	; 0x45
 800b296:	2b02      	cmp	r3, #2
 800b298:	d8a7      	bhi.n	800b1ea <__ssvfiscanf_r+0xee>
 800b29a:	2305      	movs	r3, #5
 800b29c:	e01b      	b.n	800b2d6 <__ssvfiscanf_r+0x1da>
 800b29e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b2a0:	4621      	mov	r1, r4
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	4798      	blx	r3
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	f43f af68 	beq.w	800b17c <__ssvfiscanf_r+0x80>
 800b2ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	f040 808d 	bne.w	800b3ce <__ssvfiscanf_r+0x2d2>
 800b2b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2b8:	e08f      	b.n	800b3da <__ssvfiscanf_r+0x2de>
 800b2ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b2bc:	f042 0220 	orr.w	r2, r2, #32
 800b2c0:	9241      	str	r2, [sp, #260]	; 0x104
 800b2c2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b2c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2c8:	9241      	str	r2, [sp, #260]	; 0x104
 800b2ca:	2210      	movs	r2, #16
 800b2cc:	2b6f      	cmp	r3, #111	; 0x6f
 800b2ce:	9242      	str	r2, [sp, #264]	; 0x108
 800b2d0:	bf34      	ite	cc
 800b2d2:	2303      	movcc	r3, #3
 800b2d4:	2304      	movcs	r3, #4
 800b2d6:	9347      	str	r3, [sp, #284]	; 0x11c
 800b2d8:	6863      	ldr	r3, [r4, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	dd42      	ble.n	800b364 <__ssvfiscanf_r+0x268>
 800b2de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b2e0:	0659      	lsls	r1, r3, #25
 800b2e2:	d404      	bmi.n	800b2ee <__ssvfiscanf_r+0x1f2>
 800b2e4:	6823      	ldr	r3, [r4, #0]
 800b2e6:	781a      	ldrb	r2, [r3, #0]
 800b2e8:	5cba      	ldrb	r2, [r7, r2]
 800b2ea:	0712      	lsls	r2, r2, #28
 800b2ec:	d441      	bmi.n	800b372 <__ssvfiscanf_r+0x276>
 800b2ee:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	dc50      	bgt.n	800b396 <__ssvfiscanf_r+0x29a>
 800b2f4:	466b      	mov	r3, sp
 800b2f6:	4622      	mov	r2, r4
 800b2f8:	a941      	add	r1, sp, #260	; 0x104
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f000 fa0a 	bl	800b714 <_scanf_chars>
 800b300:	2801      	cmp	r0, #1
 800b302:	d06e      	beq.n	800b3e2 <__ssvfiscanf_r+0x2e6>
 800b304:	2802      	cmp	r0, #2
 800b306:	f47f af20 	bne.w	800b14a <__ssvfiscanf_r+0x4e>
 800b30a:	e7cf      	b.n	800b2ac <__ssvfiscanf_r+0x1b0>
 800b30c:	220a      	movs	r2, #10
 800b30e:	e7dd      	b.n	800b2cc <__ssvfiscanf_r+0x1d0>
 800b310:	2300      	movs	r3, #0
 800b312:	9342      	str	r3, [sp, #264]	; 0x108
 800b314:	2303      	movs	r3, #3
 800b316:	e7de      	b.n	800b2d6 <__ssvfiscanf_r+0x1da>
 800b318:	2308      	movs	r3, #8
 800b31a:	9342      	str	r3, [sp, #264]	; 0x108
 800b31c:	2304      	movs	r3, #4
 800b31e:	e7da      	b.n	800b2d6 <__ssvfiscanf_r+0x1da>
 800b320:	4629      	mov	r1, r5
 800b322:	4640      	mov	r0, r8
 800b324:	f000 fb5a 	bl	800b9dc <__sccl>
 800b328:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b32e:	9341      	str	r3, [sp, #260]	; 0x104
 800b330:	4605      	mov	r5, r0
 800b332:	2301      	movs	r3, #1
 800b334:	e7cf      	b.n	800b2d6 <__ssvfiscanf_r+0x1da>
 800b336:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b33c:	9341      	str	r3, [sp, #260]	; 0x104
 800b33e:	2300      	movs	r3, #0
 800b340:	e7c9      	b.n	800b2d6 <__ssvfiscanf_r+0x1da>
 800b342:	2302      	movs	r3, #2
 800b344:	e7c7      	b.n	800b2d6 <__ssvfiscanf_r+0x1da>
 800b346:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b348:	06c3      	lsls	r3, r0, #27
 800b34a:	f53f aefe 	bmi.w	800b14a <__ssvfiscanf_r+0x4e>
 800b34e:	9b00      	ldr	r3, [sp, #0]
 800b350:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b352:	1d19      	adds	r1, r3, #4
 800b354:	9100      	str	r1, [sp, #0]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f010 0f01 	tst.w	r0, #1
 800b35c:	bf14      	ite	ne
 800b35e:	801a      	strhne	r2, [r3, #0]
 800b360:	601a      	streq	r2, [r3, #0]
 800b362:	e6f2      	b.n	800b14a <__ssvfiscanf_r+0x4e>
 800b364:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b366:	4621      	mov	r1, r4
 800b368:	4630      	mov	r0, r6
 800b36a:	4798      	blx	r3
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d0b6      	beq.n	800b2de <__ssvfiscanf_r+0x1e2>
 800b370:	e79c      	b.n	800b2ac <__ssvfiscanf_r+0x1b0>
 800b372:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b374:	3201      	adds	r2, #1
 800b376:	9245      	str	r2, [sp, #276]	; 0x114
 800b378:	6862      	ldr	r2, [r4, #4]
 800b37a:	3a01      	subs	r2, #1
 800b37c:	2a00      	cmp	r2, #0
 800b37e:	6062      	str	r2, [r4, #4]
 800b380:	dd02      	ble.n	800b388 <__ssvfiscanf_r+0x28c>
 800b382:	3301      	adds	r3, #1
 800b384:	6023      	str	r3, [r4, #0]
 800b386:	e7ad      	b.n	800b2e4 <__ssvfiscanf_r+0x1e8>
 800b388:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b38a:	4621      	mov	r1, r4
 800b38c:	4630      	mov	r0, r6
 800b38e:	4798      	blx	r3
 800b390:	2800      	cmp	r0, #0
 800b392:	d0a7      	beq.n	800b2e4 <__ssvfiscanf_r+0x1e8>
 800b394:	e78a      	b.n	800b2ac <__ssvfiscanf_r+0x1b0>
 800b396:	2b04      	cmp	r3, #4
 800b398:	dc0e      	bgt.n	800b3b8 <__ssvfiscanf_r+0x2bc>
 800b39a:	466b      	mov	r3, sp
 800b39c:	4622      	mov	r2, r4
 800b39e:	a941      	add	r1, sp, #260	; 0x104
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	f000 fa11 	bl	800b7c8 <_scanf_i>
 800b3a6:	e7ab      	b.n	800b300 <__ssvfiscanf_r+0x204>
 800b3a8:	0800b049 	.word	0x0800b049
 800b3ac:	0800b0c3 	.word	0x0800b0c3
 800b3b0:	0800ca6b 	.word	0x0800ca6b
 800b3b4:	0800ca22 	.word	0x0800ca22
 800b3b8:	4b0b      	ldr	r3, [pc, #44]	; (800b3e8 <__ssvfiscanf_r+0x2ec>)
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f43f aec5 	beq.w	800b14a <__ssvfiscanf_r+0x4e>
 800b3c0:	466b      	mov	r3, sp
 800b3c2:	4622      	mov	r2, r4
 800b3c4:	a941      	add	r1, sp, #260	; 0x104
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	f3af 8000 	nop.w
 800b3cc:	e798      	b.n	800b300 <__ssvfiscanf_r+0x204>
 800b3ce:	89a3      	ldrh	r3, [r4, #12]
 800b3d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b3d4:	bf18      	it	ne
 800b3d6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800b3da:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3e2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b3e4:	e7f9      	b.n	800b3da <__ssvfiscanf_r+0x2de>
 800b3e6:	bf00      	nop
 800b3e8:	00000000 	.word	0x00000000

0800b3ec <_printf_common>:
 800b3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3f0:	4616      	mov	r6, r2
 800b3f2:	4699      	mov	r9, r3
 800b3f4:	688a      	ldr	r2, [r1, #8]
 800b3f6:	690b      	ldr	r3, [r1, #16]
 800b3f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	bfb8      	it	lt
 800b400:	4613      	movlt	r3, r2
 800b402:	6033      	str	r3, [r6, #0]
 800b404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b408:	4607      	mov	r7, r0
 800b40a:	460c      	mov	r4, r1
 800b40c:	b10a      	cbz	r2, 800b412 <_printf_common+0x26>
 800b40e:	3301      	adds	r3, #1
 800b410:	6033      	str	r3, [r6, #0]
 800b412:	6823      	ldr	r3, [r4, #0]
 800b414:	0699      	lsls	r1, r3, #26
 800b416:	bf42      	ittt	mi
 800b418:	6833      	ldrmi	r3, [r6, #0]
 800b41a:	3302      	addmi	r3, #2
 800b41c:	6033      	strmi	r3, [r6, #0]
 800b41e:	6825      	ldr	r5, [r4, #0]
 800b420:	f015 0506 	ands.w	r5, r5, #6
 800b424:	d106      	bne.n	800b434 <_printf_common+0x48>
 800b426:	f104 0a19 	add.w	sl, r4, #25
 800b42a:	68e3      	ldr	r3, [r4, #12]
 800b42c:	6832      	ldr	r2, [r6, #0]
 800b42e:	1a9b      	subs	r3, r3, r2
 800b430:	42ab      	cmp	r3, r5
 800b432:	dc26      	bgt.n	800b482 <_printf_common+0x96>
 800b434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b438:	1e13      	subs	r3, r2, #0
 800b43a:	6822      	ldr	r2, [r4, #0]
 800b43c:	bf18      	it	ne
 800b43e:	2301      	movne	r3, #1
 800b440:	0692      	lsls	r2, r2, #26
 800b442:	d42b      	bmi.n	800b49c <_printf_common+0xb0>
 800b444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b448:	4649      	mov	r1, r9
 800b44a:	4638      	mov	r0, r7
 800b44c:	47c0      	blx	r8
 800b44e:	3001      	adds	r0, #1
 800b450:	d01e      	beq.n	800b490 <_printf_common+0xa4>
 800b452:	6823      	ldr	r3, [r4, #0]
 800b454:	68e5      	ldr	r5, [r4, #12]
 800b456:	6832      	ldr	r2, [r6, #0]
 800b458:	f003 0306 	and.w	r3, r3, #6
 800b45c:	2b04      	cmp	r3, #4
 800b45e:	bf08      	it	eq
 800b460:	1aad      	subeq	r5, r5, r2
 800b462:	68a3      	ldr	r3, [r4, #8]
 800b464:	6922      	ldr	r2, [r4, #16]
 800b466:	bf0c      	ite	eq
 800b468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b46c:	2500      	movne	r5, #0
 800b46e:	4293      	cmp	r3, r2
 800b470:	bfc4      	itt	gt
 800b472:	1a9b      	subgt	r3, r3, r2
 800b474:	18ed      	addgt	r5, r5, r3
 800b476:	2600      	movs	r6, #0
 800b478:	341a      	adds	r4, #26
 800b47a:	42b5      	cmp	r5, r6
 800b47c:	d11a      	bne.n	800b4b4 <_printf_common+0xc8>
 800b47e:	2000      	movs	r0, #0
 800b480:	e008      	b.n	800b494 <_printf_common+0xa8>
 800b482:	2301      	movs	r3, #1
 800b484:	4652      	mov	r2, sl
 800b486:	4649      	mov	r1, r9
 800b488:	4638      	mov	r0, r7
 800b48a:	47c0      	blx	r8
 800b48c:	3001      	adds	r0, #1
 800b48e:	d103      	bne.n	800b498 <_printf_common+0xac>
 800b490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b498:	3501      	adds	r5, #1
 800b49a:	e7c6      	b.n	800b42a <_printf_common+0x3e>
 800b49c:	18e1      	adds	r1, r4, r3
 800b49e:	1c5a      	adds	r2, r3, #1
 800b4a0:	2030      	movs	r0, #48	; 0x30
 800b4a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4a6:	4422      	add	r2, r4
 800b4a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4b0:	3302      	adds	r3, #2
 800b4b2:	e7c7      	b.n	800b444 <_printf_common+0x58>
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	4622      	mov	r2, r4
 800b4b8:	4649      	mov	r1, r9
 800b4ba:	4638      	mov	r0, r7
 800b4bc:	47c0      	blx	r8
 800b4be:	3001      	adds	r0, #1
 800b4c0:	d0e6      	beq.n	800b490 <_printf_common+0xa4>
 800b4c2:	3601      	adds	r6, #1
 800b4c4:	e7d9      	b.n	800b47a <_printf_common+0x8e>
	...

0800b4c8 <_printf_i>:
 800b4c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4cc:	7e0f      	ldrb	r7, [r1, #24]
 800b4ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4d0:	2f78      	cmp	r7, #120	; 0x78
 800b4d2:	4691      	mov	r9, r2
 800b4d4:	4680      	mov	r8, r0
 800b4d6:	460c      	mov	r4, r1
 800b4d8:	469a      	mov	sl, r3
 800b4da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4de:	d807      	bhi.n	800b4f0 <_printf_i+0x28>
 800b4e0:	2f62      	cmp	r7, #98	; 0x62
 800b4e2:	d80a      	bhi.n	800b4fa <_printf_i+0x32>
 800b4e4:	2f00      	cmp	r7, #0
 800b4e6:	f000 80d8 	beq.w	800b69a <_printf_i+0x1d2>
 800b4ea:	2f58      	cmp	r7, #88	; 0x58
 800b4ec:	f000 80a3 	beq.w	800b636 <_printf_i+0x16e>
 800b4f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4f8:	e03a      	b.n	800b570 <_printf_i+0xa8>
 800b4fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4fe:	2b15      	cmp	r3, #21
 800b500:	d8f6      	bhi.n	800b4f0 <_printf_i+0x28>
 800b502:	a101      	add	r1, pc, #4	; (adr r1, 800b508 <_printf_i+0x40>)
 800b504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b508:	0800b561 	.word	0x0800b561
 800b50c:	0800b575 	.word	0x0800b575
 800b510:	0800b4f1 	.word	0x0800b4f1
 800b514:	0800b4f1 	.word	0x0800b4f1
 800b518:	0800b4f1 	.word	0x0800b4f1
 800b51c:	0800b4f1 	.word	0x0800b4f1
 800b520:	0800b575 	.word	0x0800b575
 800b524:	0800b4f1 	.word	0x0800b4f1
 800b528:	0800b4f1 	.word	0x0800b4f1
 800b52c:	0800b4f1 	.word	0x0800b4f1
 800b530:	0800b4f1 	.word	0x0800b4f1
 800b534:	0800b681 	.word	0x0800b681
 800b538:	0800b5a5 	.word	0x0800b5a5
 800b53c:	0800b663 	.word	0x0800b663
 800b540:	0800b4f1 	.word	0x0800b4f1
 800b544:	0800b4f1 	.word	0x0800b4f1
 800b548:	0800b6a3 	.word	0x0800b6a3
 800b54c:	0800b4f1 	.word	0x0800b4f1
 800b550:	0800b5a5 	.word	0x0800b5a5
 800b554:	0800b4f1 	.word	0x0800b4f1
 800b558:	0800b4f1 	.word	0x0800b4f1
 800b55c:	0800b66b 	.word	0x0800b66b
 800b560:	682b      	ldr	r3, [r5, #0]
 800b562:	1d1a      	adds	r2, r3, #4
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	602a      	str	r2, [r5, #0]
 800b568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b56c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b570:	2301      	movs	r3, #1
 800b572:	e0a3      	b.n	800b6bc <_printf_i+0x1f4>
 800b574:	6820      	ldr	r0, [r4, #0]
 800b576:	6829      	ldr	r1, [r5, #0]
 800b578:	0606      	lsls	r6, r0, #24
 800b57a:	f101 0304 	add.w	r3, r1, #4
 800b57e:	d50a      	bpl.n	800b596 <_printf_i+0xce>
 800b580:	680e      	ldr	r6, [r1, #0]
 800b582:	602b      	str	r3, [r5, #0]
 800b584:	2e00      	cmp	r6, #0
 800b586:	da03      	bge.n	800b590 <_printf_i+0xc8>
 800b588:	232d      	movs	r3, #45	; 0x2d
 800b58a:	4276      	negs	r6, r6
 800b58c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b590:	485e      	ldr	r0, [pc, #376]	; (800b70c <_printf_i+0x244>)
 800b592:	230a      	movs	r3, #10
 800b594:	e019      	b.n	800b5ca <_printf_i+0x102>
 800b596:	680e      	ldr	r6, [r1, #0]
 800b598:	602b      	str	r3, [r5, #0]
 800b59a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b59e:	bf18      	it	ne
 800b5a0:	b236      	sxthne	r6, r6
 800b5a2:	e7ef      	b.n	800b584 <_printf_i+0xbc>
 800b5a4:	682b      	ldr	r3, [r5, #0]
 800b5a6:	6820      	ldr	r0, [r4, #0]
 800b5a8:	1d19      	adds	r1, r3, #4
 800b5aa:	6029      	str	r1, [r5, #0]
 800b5ac:	0601      	lsls	r1, r0, #24
 800b5ae:	d501      	bpl.n	800b5b4 <_printf_i+0xec>
 800b5b0:	681e      	ldr	r6, [r3, #0]
 800b5b2:	e002      	b.n	800b5ba <_printf_i+0xf2>
 800b5b4:	0646      	lsls	r6, r0, #25
 800b5b6:	d5fb      	bpl.n	800b5b0 <_printf_i+0xe8>
 800b5b8:	881e      	ldrh	r6, [r3, #0]
 800b5ba:	4854      	ldr	r0, [pc, #336]	; (800b70c <_printf_i+0x244>)
 800b5bc:	2f6f      	cmp	r7, #111	; 0x6f
 800b5be:	bf0c      	ite	eq
 800b5c0:	2308      	moveq	r3, #8
 800b5c2:	230a      	movne	r3, #10
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5ca:	6865      	ldr	r5, [r4, #4]
 800b5cc:	60a5      	str	r5, [r4, #8]
 800b5ce:	2d00      	cmp	r5, #0
 800b5d0:	bfa2      	ittt	ge
 800b5d2:	6821      	ldrge	r1, [r4, #0]
 800b5d4:	f021 0104 	bicge.w	r1, r1, #4
 800b5d8:	6021      	strge	r1, [r4, #0]
 800b5da:	b90e      	cbnz	r6, 800b5e0 <_printf_i+0x118>
 800b5dc:	2d00      	cmp	r5, #0
 800b5de:	d04d      	beq.n	800b67c <_printf_i+0x1b4>
 800b5e0:	4615      	mov	r5, r2
 800b5e2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5e6:	fb03 6711 	mls	r7, r3, r1, r6
 800b5ea:	5dc7      	ldrb	r7, [r0, r7]
 800b5ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5f0:	4637      	mov	r7, r6
 800b5f2:	42bb      	cmp	r3, r7
 800b5f4:	460e      	mov	r6, r1
 800b5f6:	d9f4      	bls.n	800b5e2 <_printf_i+0x11a>
 800b5f8:	2b08      	cmp	r3, #8
 800b5fa:	d10b      	bne.n	800b614 <_printf_i+0x14c>
 800b5fc:	6823      	ldr	r3, [r4, #0]
 800b5fe:	07de      	lsls	r6, r3, #31
 800b600:	d508      	bpl.n	800b614 <_printf_i+0x14c>
 800b602:	6923      	ldr	r3, [r4, #16]
 800b604:	6861      	ldr	r1, [r4, #4]
 800b606:	4299      	cmp	r1, r3
 800b608:	bfde      	ittt	le
 800b60a:	2330      	movle	r3, #48	; 0x30
 800b60c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b610:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b614:	1b52      	subs	r2, r2, r5
 800b616:	6122      	str	r2, [r4, #16]
 800b618:	f8cd a000 	str.w	sl, [sp]
 800b61c:	464b      	mov	r3, r9
 800b61e:	aa03      	add	r2, sp, #12
 800b620:	4621      	mov	r1, r4
 800b622:	4640      	mov	r0, r8
 800b624:	f7ff fee2 	bl	800b3ec <_printf_common>
 800b628:	3001      	adds	r0, #1
 800b62a:	d14c      	bne.n	800b6c6 <_printf_i+0x1fe>
 800b62c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b630:	b004      	add	sp, #16
 800b632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b636:	4835      	ldr	r0, [pc, #212]	; (800b70c <_printf_i+0x244>)
 800b638:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b63c:	6829      	ldr	r1, [r5, #0]
 800b63e:	6823      	ldr	r3, [r4, #0]
 800b640:	f851 6b04 	ldr.w	r6, [r1], #4
 800b644:	6029      	str	r1, [r5, #0]
 800b646:	061d      	lsls	r5, r3, #24
 800b648:	d514      	bpl.n	800b674 <_printf_i+0x1ac>
 800b64a:	07df      	lsls	r7, r3, #31
 800b64c:	bf44      	itt	mi
 800b64e:	f043 0320 	orrmi.w	r3, r3, #32
 800b652:	6023      	strmi	r3, [r4, #0]
 800b654:	b91e      	cbnz	r6, 800b65e <_printf_i+0x196>
 800b656:	6823      	ldr	r3, [r4, #0]
 800b658:	f023 0320 	bic.w	r3, r3, #32
 800b65c:	6023      	str	r3, [r4, #0]
 800b65e:	2310      	movs	r3, #16
 800b660:	e7b0      	b.n	800b5c4 <_printf_i+0xfc>
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	f043 0320 	orr.w	r3, r3, #32
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	2378      	movs	r3, #120	; 0x78
 800b66c:	4828      	ldr	r0, [pc, #160]	; (800b710 <_printf_i+0x248>)
 800b66e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b672:	e7e3      	b.n	800b63c <_printf_i+0x174>
 800b674:	0659      	lsls	r1, r3, #25
 800b676:	bf48      	it	mi
 800b678:	b2b6      	uxthmi	r6, r6
 800b67a:	e7e6      	b.n	800b64a <_printf_i+0x182>
 800b67c:	4615      	mov	r5, r2
 800b67e:	e7bb      	b.n	800b5f8 <_printf_i+0x130>
 800b680:	682b      	ldr	r3, [r5, #0]
 800b682:	6826      	ldr	r6, [r4, #0]
 800b684:	6961      	ldr	r1, [r4, #20]
 800b686:	1d18      	adds	r0, r3, #4
 800b688:	6028      	str	r0, [r5, #0]
 800b68a:	0635      	lsls	r5, r6, #24
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	d501      	bpl.n	800b694 <_printf_i+0x1cc>
 800b690:	6019      	str	r1, [r3, #0]
 800b692:	e002      	b.n	800b69a <_printf_i+0x1d2>
 800b694:	0670      	lsls	r0, r6, #25
 800b696:	d5fb      	bpl.n	800b690 <_printf_i+0x1c8>
 800b698:	8019      	strh	r1, [r3, #0]
 800b69a:	2300      	movs	r3, #0
 800b69c:	6123      	str	r3, [r4, #16]
 800b69e:	4615      	mov	r5, r2
 800b6a0:	e7ba      	b.n	800b618 <_printf_i+0x150>
 800b6a2:	682b      	ldr	r3, [r5, #0]
 800b6a4:	1d1a      	adds	r2, r3, #4
 800b6a6:	602a      	str	r2, [r5, #0]
 800b6a8:	681d      	ldr	r5, [r3, #0]
 800b6aa:	6862      	ldr	r2, [r4, #4]
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f7f4 fda6 	bl	8000200 <memchr>
 800b6b4:	b108      	cbz	r0, 800b6ba <_printf_i+0x1f2>
 800b6b6:	1b40      	subs	r0, r0, r5
 800b6b8:	6060      	str	r0, [r4, #4]
 800b6ba:	6863      	ldr	r3, [r4, #4]
 800b6bc:	6123      	str	r3, [r4, #16]
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6c4:	e7a8      	b.n	800b618 <_printf_i+0x150>
 800b6c6:	6923      	ldr	r3, [r4, #16]
 800b6c8:	462a      	mov	r2, r5
 800b6ca:	4649      	mov	r1, r9
 800b6cc:	4640      	mov	r0, r8
 800b6ce:	47d0      	blx	sl
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	d0ab      	beq.n	800b62c <_printf_i+0x164>
 800b6d4:	6823      	ldr	r3, [r4, #0]
 800b6d6:	079b      	lsls	r3, r3, #30
 800b6d8:	d413      	bmi.n	800b702 <_printf_i+0x23a>
 800b6da:	68e0      	ldr	r0, [r4, #12]
 800b6dc:	9b03      	ldr	r3, [sp, #12]
 800b6de:	4298      	cmp	r0, r3
 800b6e0:	bfb8      	it	lt
 800b6e2:	4618      	movlt	r0, r3
 800b6e4:	e7a4      	b.n	800b630 <_printf_i+0x168>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	4632      	mov	r2, r6
 800b6ea:	4649      	mov	r1, r9
 800b6ec:	4640      	mov	r0, r8
 800b6ee:	47d0      	blx	sl
 800b6f0:	3001      	adds	r0, #1
 800b6f2:	d09b      	beq.n	800b62c <_printf_i+0x164>
 800b6f4:	3501      	adds	r5, #1
 800b6f6:	68e3      	ldr	r3, [r4, #12]
 800b6f8:	9903      	ldr	r1, [sp, #12]
 800b6fa:	1a5b      	subs	r3, r3, r1
 800b6fc:	42ab      	cmp	r3, r5
 800b6fe:	dcf2      	bgt.n	800b6e6 <_printf_i+0x21e>
 800b700:	e7eb      	b.n	800b6da <_printf_i+0x212>
 800b702:	2500      	movs	r5, #0
 800b704:	f104 0619 	add.w	r6, r4, #25
 800b708:	e7f5      	b.n	800b6f6 <_printf_i+0x22e>
 800b70a:	bf00      	nop
 800b70c:	0800ca2d 	.word	0x0800ca2d
 800b710:	0800ca3e 	.word	0x0800ca3e

0800b714 <_scanf_chars>:
 800b714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b718:	4615      	mov	r5, r2
 800b71a:	688a      	ldr	r2, [r1, #8]
 800b71c:	4680      	mov	r8, r0
 800b71e:	460c      	mov	r4, r1
 800b720:	b932      	cbnz	r2, 800b730 <_scanf_chars+0x1c>
 800b722:	698a      	ldr	r2, [r1, #24]
 800b724:	2a00      	cmp	r2, #0
 800b726:	bf0c      	ite	eq
 800b728:	2201      	moveq	r2, #1
 800b72a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800b72e:	608a      	str	r2, [r1, #8]
 800b730:	6822      	ldr	r2, [r4, #0]
 800b732:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b7c4 <_scanf_chars+0xb0>
 800b736:	06d1      	lsls	r1, r2, #27
 800b738:	bf5f      	itttt	pl
 800b73a:	681a      	ldrpl	r2, [r3, #0]
 800b73c:	1d11      	addpl	r1, r2, #4
 800b73e:	6019      	strpl	r1, [r3, #0]
 800b740:	6816      	ldrpl	r6, [r2, #0]
 800b742:	2700      	movs	r7, #0
 800b744:	69a0      	ldr	r0, [r4, #24]
 800b746:	b188      	cbz	r0, 800b76c <_scanf_chars+0x58>
 800b748:	2801      	cmp	r0, #1
 800b74a:	d107      	bne.n	800b75c <_scanf_chars+0x48>
 800b74c:	682a      	ldr	r2, [r5, #0]
 800b74e:	7811      	ldrb	r1, [r2, #0]
 800b750:	6962      	ldr	r2, [r4, #20]
 800b752:	5c52      	ldrb	r2, [r2, r1]
 800b754:	b952      	cbnz	r2, 800b76c <_scanf_chars+0x58>
 800b756:	2f00      	cmp	r7, #0
 800b758:	d031      	beq.n	800b7be <_scanf_chars+0xaa>
 800b75a:	e022      	b.n	800b7a2 <_scanf_chars+0x8e>
 800b75c:	2802      	cmp	r0, #2
 800b75e:	d120      	bne.n	800b7a2 <_scanf_chars+0x8e>
 800b760:	682b      	ldr	r3, [r5, #0]
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b768:	071b      	lsls	r3, r3, #28
 800b76a:	d41a      	bmi.n	800b7a2 <_scanf_chars+0x8e>
 800b76c:	6823      	ldr	r3, [r4, #0]
 800b76e:	06da      	lsls	r2, r3, #27
 800b770:	bf5e      	ittt	pl
 800b772:	682b      	ldrpl	r3, [r5, #0]
 800b774:	781b      	ldrbpl	r3, [r3, #0]
 800b776:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b77a:	682a      	ldr	r2, [r5, #0]
 800b77c:	686b      	ldr	r3, [r5, #4]
 800b77e:	3201      	adds	r2, #1
 800b780:	602a      	str	r2, [r5, #0]
 800b782:	68a2      	ldr	r2, [r4, #8]
 800b784:	3b01      	subs	r3, #1
 800b786:	3a01      	subs	r2, #1
 800b788:	606b      	str	r3, [r5, #4]
 800b78a:	3701      	adds	r7, #1
 800b78c:	60a2      	str	r2, [r4, #8]
 800b78e:	b142      	cbz	r2, 800b7a2 <_scanf_chars+0x8e>
 800b790:	2b00      	cmp	r3, #0
 800b792:	dcd7      	bgt.n	800b744 <_scanf_chars+0x30>
 800b794:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b798:	4629      	mov	r1, r5
 800b79a:	4640      	mov	r0, r8
 800b79c:	4798      	blx	r3
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	d0d0      	beq.n	800b744 <_scanf_chars+0x30>
 800b7a2:	6823      	ldr	r3, [r4, #0]
 800b7a4:	f013 0310 	ands.w	r3, r3, #16
 800b7a8:	d105      	bne.n	800b7b6 <_scanf_chars+0xa2>
 800b7aa:	68e2      	ldr	r2, [r4, #12]
 800b7ac:	3201      	adds	r2, #1
 800b7ae:	60e2      	str	r2, [r4, #12]
 800b7b0:	69a2      	ldr	r2, [r4, #24]
 800b7b2:	b102      	cbz	r2, 800b7b6 <_scanf_chars+0xa2>
 800b7b4:	7033      	strb	r3, [r6, #0]
 800b7b6:	6923      	ldr	r3, [r4, #16]
 800b7b8:	443b      	add	r3, r7
 800b7ba:	6123      	str	r3, [r4, #16]
 800b7bc:	2000      	movs	r0, #0
 800b7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7c2:	bf00      	nop
 800b7c4:	0800ca6b 	.word	0x0800ca6b

0800b7c8 <_scanf_i>:
 800b7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7cc:	4698      	mov	r8, r3
 800b7ce:	4b76      	ldr	r3, [pc, #472]	; (800b9a8 <_scanf_i+0x1e0>)
 800b7d0:	460c      	mov	r4, r1
 800b7d2:	4682      	mov	sl, r0
 800b7d4:	4616      	mov	r6, r2
 800b7d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b7da:	b087      	sub	sp, #28
 800b7dc:	ab03      	add	r3, sp, #12
 800b7de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b7e2:	4b72      	ldr	r3, [pc, #456]	; (800b9ac <_scanf_i+0x1e4>)
 800b7e4:	69a1      	ldr	r1, [r4, #24]
 800b7e6:	4a72      	ldr	r2, [pc, #456]	; (800b9b0 <_scanf_i+0x1e8>)
 800b7e8:	2903      	cmp	r1, #3
 800b7ea:	bf18      	it	ne
 800b7ec:	461a      	movne	r2, r3
 800b7ee:	68a3      	ldr	r3, [r4, #8]
 800b7f0:	9201      	str	r2, [sp, #4]
 800b7f2:	1e5a      	subs	r2, r3, #1
 800b7f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b7f8:	bf88      	it	hi
 800b7fa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b7fe:	4627      	mov	r7, r4
 800b800:	bf82      	ittt	hi
 800b802:	eb03 0905 	addhi.w	r9, r3, r5
 800b806:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b80a:	60a3      	strhi	r3, [r4, #8]
 800b80c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b810:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b814:	bf98      	it	ls
 800b816:	f04f 0900 	movls.w	r9, #0
 800b81a:	6023      	str	r3, [r4, #0]
 800b81c:	463d      	mov	r5, r7
 800b81e:	f04f 0b00 	mov.w	fp, #0
 800b822:	6831      	ldr	r1, [r6, #0]
 800b824:	ab03      	add	r3, sp, #12
 800b826:	7809      	ldrb	r1, [r1, #0]
 800b828:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b82c:	2202      	movs	r2, #2
 800b82e:	f7f4 fce7 	bl	8000200 <memchr>
 800b832:	b328      	cbz	r0, 800b880 <_scanf_i+0xb8>
 800b834:	f1bb 0f01 	cmp.w	fp, #1
 800b838:	d159      	bne.n	800b8ee <_scanf_i+0x126>
 800b83a:	6862      	ldr	r2, [r4, #4]
 800b83c:	b92a      	cbnz	r2, 800b84a <_scanf_i+0x82>
 800b83e:	6822      	ldr	r2, [r4, #0]
 800b840:	2308      	movs	r3, #8
 800b842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b846:	6063      	str	r3, [r4, #4]
 800b848:	6022      	str	r2, [r4, #0]
 800b84a:	6822      	ldr	r2, [r4, #0]
 800b84c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b850:	6022      	str	r2, [r4, #0]
 800b852:	68a2      	ldr	r2, [r4, #8]
 800b854:	1e51      	subs	r1, r2, #1
 800b856:	60a1      	str	r1, [r4, #8]
 800b858:	b192      	cbz	r2, 800b880 <_scanf_i+0xb8>
 800b85a:	6832      	ldr	r2, [r6, #0]
 800b85c:	1c51      	adds	r1, r2, #1
 800b85e:	6031      	str	r1, [r6, #0]
 800b860:	7812      	ldrb	r2, [r2, #0]
 800b862:	f805 2b01 	strb.w	r2, [r5], #1
 800b866:	6872      	ldr	r2, [r6, #4]
 800b868:	3a01      	subs	r2, #1
 800b86a:	2a00      	cmp	r2, #0
 800b86c:	6072      	str	r2, [r6, #4]
 800b86e:	dc07      	bgt.n	800b880 <_scanf_i+0xb8>
 800b870:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b874:	4631      	mov	r1, r6
 800b876:	4650      	mov	r0, sl
 800b878:	4790      	blx	r2
 800b87a:	2800      	cmp	r0, #0
 800b87c:	f040 8085 	bne.w	800b98a <_scanf_i+0x1c2>
 800b880:	f10b 0b01 	add.w	fp, fp, #1
 800b884:	f1bb 0f03 	cmp.w	fp, #3
 800b888:	d1cb      	bne.n	800b822 <_scanf_i+0x5a>
 800b88a:	6863      	ldr	r3, [r4, #4]
 800b88c:	b90b      	cbnz	r3, 800b892 <_scanf_i+0xca>
 800b88e:	230a      	movs	r3, #10
 800b890:	6063      	str	r3, [r4, #4]
 800b892:	6863      	ldr	r3, [r4, #4]
 800b894:	4947      	ldr	r1, [pc, #284]	; (800b9b4 <_scanf_i+0x1ec>)
 800b896:	6960      	ldr	r0, [r4, #20]
 800b898:	1ac9      	subs	r1, r1, r3
 800b89a:	f000 f89f 	bl	800b9dc <__sccl>
 800b89e:	f04f 0b00 	mov.w	fp, #0
 800b8a2:	68a3      	ldr	r3, [r4, #8]
 800b8a4:	6822      	ldr	r2, [r4, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d03d      	beq.n	800b926 <_scanf_i+0x15e>
 800b8aa:	6831      	ldr	r1, [r6, #0]
 800b8ac:	6960      	ldr	r0, [r4, #20]
 800b8ae:	f891 c000 	ldrb.w	ip, [r1]
 800b8b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	d035      	beq.n	800b926 <_scanf_i+0x15e>
 800b8ba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b8be:	d124      	bne.n	800b90a <_scanf_i+0x142>
 800b8c0:	0510      	lsls	r0, r2, #20
 800b8c2:	d522      	bpl.n	800b90a <_scanf_i+0x142>
 800b8c4:	f10b 0b01 	add.w	fp, fp, #1
 800b8c8:	f1b9 0f00 	cmp.w	r9, #0
 800b8cc:	d003      	beq.n	800b8d6 <_scanf_i+0x10e>
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b8d4:	60a3      	str	r3, [r4, #8]
 800b8d6:	6873      	ldr	r3, [r6, #4]
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	6073      	str	r3, [r6, #4]
 800b8de:	dd1b      	ble.n	800b918 <_scanf_i+0x150>
 800b8e0:	6833      	ldr	r3, [r6, #0]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	6033      	str	r3, [r6, #0]
 800b8e6:	68a3      	ldr	r3, [r4, #8]
 800b8e8:	3b01      	subs	r3, #1
 800b8ea:	60a3      	str	r3, [r4, #8]
 800b8ec:	e7d9      	b.n	800b8a2 <_scanf_i+0xda>
 800b8ee:	f1bb 0f02 	cmp.w	fp, #2
 800b8f2:	d1ae      	bne.n	800b852 <_scanf_i+0x8a>
 800b8f4:	6822      	ldr	r2, [r4, #0]
 800b8f6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b8fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b8fe:	d1bf      	bne.n	800b880 <_scanf_i+0xb8>
 800b900:	2310      	movs	r3, #16
 800b902:	6063      	str	r3, [r4, #4]
 800b904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b908:	e7a2      	b.n	800b850 <_scanf_i+0x88>
 800b90a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b90e:	6022      	str	r2, [r4, #0]
 800b910:	780b      	ldrb	r3, [r1, #0]
 800b912:	f805 3b01 	strb.w	r3, [r5], #1
 800b916:	e7de      	b.n	800b8d6 <_scanf_i+0x10e>
 800b918:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b91c:	4631      	mov	r1, r6
 800b91e:	4650      	mov	r0, sl
 800b920:	4798      	blx	r3
 800b922:	2800      	cmp	r0, #0
 800b924:	d0df      	beq.n	800b8e6 <_scanf_i+0x11e>
 800b926:	6823      	ldr	r3, [r4, #0]
 800b928:	05db      	lsls	r3, r3, #23
 800b92a:	d50d      	bpl.n	800b948 <_scanf_i+0x180>
 800b92c:	42bd      	cmp	r5, r7
 800b92e:	d909      	bls.n	800b944 <_scanf_i+0x17c>
 800b930:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b934:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b938:	4632      	mov	r2, r6
 800b93a:	4650      	mov	r0, sl
 800b93c:	4798      	blx	r3
 800b93e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800b942:	464d      	mov	r5, r9
 800b944:	42bd      	cmp	r5, r7
 800b946:	d02d      	beq.n	800b9a4 <_scanf_i+0x1dc>
 800b948:	6822      	ldr	r2, [r4, #0]
 800b94a:	f012 0210 	ands.w	r2, r2, #16
 800b94e:	d113      	bne.n	800b978 <_scanf_i+0x1b0>
 800b950:	702a      	strb	r2, [r5, #0]
 800b952:	6863      	ldr	r3, [r4, #4]
 800b954:	9e01      	ldr	r6, [sp, #4]
 800b956:	4639      	mov	r1, r7
 800b958:	4650      	mov	r0, sl
 800b95a:	47b0      	blx	r6
 800b95c:	6821      	ldr	r1, [r4, #0]
 800b95e:	f8d8 3000 	ldr.w	r3, [r8]
 800b962:	f011 0f20 	tst.w	r1, #32
 800b966:	d013      	beq.n	800b990 <_scanf_i+0x1c8>
 800b968:	1d1a      	adds	r2, r3, #4
 800b96a:	f8c8 2000 	str.w	r2, [r8]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	6018      	str	r0, [r3, #0]
 800b972:	68e3      	ldr	r3, [r4, #12]
 800b974:	3301      	adds	r3, #1
 800b976:	60e3      	str	r3, [r4, #12]
 800b978:	1bed      	subs	r5, r5, r7
 800b97a:	44ab      	add	fp, r5
 800b97c:	6925      	ldr	r5, [r4, #16]
 800b97e:	445d      	add	r5, fp
 800b980:	6125      	str	r5, [r4, #16]
 800b982:	2000      	movs	r0, #0
 800b984:	b007      	add	sp, #28
 800b986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b98a:	f04f 0b00 	mov.w	fp, #0
 800b98e:	e7ca      	b.n	800b926 <_scanf_i+0x15e>
 800b990:	1d1a      	adds	r2, r3, #4
 800b992:	f8c8 2000 	str.w	r2, [r8]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f011 0f01 	tst.w	r1, #1
 800b99c:	bf14      	ite	ne
 800b99e:	8018      	strhne	r0, [r3, #0]
 800b9a0:	6018      	streq	r0, [r3, #0]
 800b9a2:	e7e6      	b.n	800b972 <_scanf_i+0x1aa>
 800b9a4:	2001      	movs	r0, #1
 800b9a6:	e7ed      	b.n	800b984 <_scanf_i+0x1bc>
 800b9a8:	0800c554 	.word	0x0800c554
 800b9ac:	0800bc39 	.word	0x0800bc39
 800b9b0:	0800bb51 	.word	0x0800bb51
 800b9b4:	0800ca68 	.word	0x0800ca68

0800b9b8 <_read_r>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	4d07      	ldr	r5, [pc, #28]	; (800b9d8 <_read_r+0x20>)
 800b9bc:	4604      	mov	r4, r0
 800b9be:	4608      	mov	r0, r1
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	602a      	str	r2, [r5, #0]
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	f7f7 f9d0 	bl	8002d6c <_read>
 800b9cc:	1c43      	adds	r3, r0, #1
 800b9ce:	d102      	bne.n	800b9d6 <_read_r+0x1e>
 800b9d0:	682b      	ldr	r3, [r5, #0]
 800b9d2:	b103      	cbz	r3, 800b9d6 <_read_r+0x1e>
 800b9d4:	6023      	str	r3, [r4, #0]
 800b9d6:	bd38      	pop	{r3, r4, r5, pc}
 800b9d8:	20017694 	.word	0x20017694

0800b9dc <__sccl>:
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	780b      	ldrb	r3, [r1, #0]
 800b9e0:	4604      	mov	r4, r0
 800b9e2:	2b5e      	cmp	r3, #94	; 0x5e
 800b9e4:	bf0b      	itete	eq
 800b9e6:	784b      	ldrbeq	r3, [r1, #1]
 800b9e8:	1c48      	addne	r0, r1, #1
 800b9ea:	1c88      	addeq	r0, r1, #2
 800b9ec:	2200      	movne	r2, #0
 800b9ee:	bf08      	it	eq
 800b9f0:	2201      	moveq	r2, #1
 800b9f2:	1e61      	subs	r1, r4, #1
 800b9f4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b9f8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b9fc:	42a9      	cmp	r1, r5
 800b9fe:	d1fb      	bne.n	800b9f8 <__sccl+0x1c>
 800ba00:	b90b      	cbnz	r3, 800ba06 <__sccl+0x2a>
 800ba02:	3801      	subs	r0, #1
 800ba04:	bd70      	pop	{r4, r5, r6, pc}
 800ba06:	f082 0201 	eor.w	r2, r2, #1
 800ba0a:	54e2      	strb	r2, [r4, r3]
 800ba0c:	4605      	mov	r5, r0
 800ba0e:	4628      	mov	r0, r5
 800ba10:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ba14:	292d      	cmp	r1, #45	; 0x2d
 800ba16:	d006      	beq.n	800ba26 <__sccl+0x4a>
 800ba18:	295d      	cmp	r1, #93	; 0x5d
 800ba1a:	d0f3      	beq.n	800ba04 <__sccl+0x28>
 800ba1c:	b909      	cbnz	r1, 800ba22 <__sccl+0x46>
 800ba1e:	4628      	mov	r0, r5
 800ba20:	e7f0      	b.n	800ba04 <__sccl+0x28>
 800ba22:	460b      	mov	r3, r1
 800ba24:	e7f1      	b.n	800ba0a <__sccl+0x2e>
 800ba26:	786e      	ldrb	r6, [r5, #1]
 800ba28:	2e5d      	cmp	r6, #93	; 0x5d
 800ba2a:	d0fa      	beq.n	800ba22 <__sccl+0x46>
 800ba2c:	42b3      	cmp	r3, r6
 800ba2e:	dcf8      	bgt.n	800ba22 <__sccl+0x46>
 800ba30:	3502      	adds	r5, #2
 800ba32:	4619      	mov	r1, r3
 800ba34:	3101      	adds	r1, #1
 800ba36:	428e      	cmp	r6, r1
 800ba38:	5462      	strb	r2, [r4, r1]
 800ba3a:	dcfb      	bgt.n	800ba34 <__sccl+0x58>
 800ba3c:	1af1      	subs	r1, r6, r3
 800ba3e:	3901      	subs	r1, #1
 800ba40:	1c58      	adds	r0, r3, #1
 800ba42:	42b3      	cmp	r3, r6
 800ba44:	bfa8      	it	ge
 800ba46:	2100      	movge	r1, #0
 800ba48:	1843      	adds	r3, r0, r1
 800ba4a:	e7e0      	b.n	800ba0e <__sccl+0x32>

0800ba4c <_strtol_l.constprop.0>:
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba52:	d001      	beq.n	800ba58 <_strtol_l.constprop.0+0xc>
 800ba54:	2b24      	cmp	r3, #36	; 0x24
 800ba56:	d906      	bls.n	800ba66 <_strtol_l.constprop.0+0x1a>
 800ba58:	f7fe fa96 	bl	8009f88 <__errno>
 800ba5c:	2316      	movs	r3, #22
 800ba5e:	6003      	str	r3, [r0, #0]
 800ba60:	2000      	movs	r0, #0
 800ba62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba66:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bb4c <_strtol_l.constprop.0+0x100>
 800ba6a:	460d      	mov	r5, r1
 800ba6c:	462e      	mov	r6, r5
 800ba6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba72:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ba76:	f017 0708 	ands.w	r7, r7, #8
 800ba7a:	d1f7      	bne.n	800ba6c <_strtol_l.constprop.0+0x20>
 800ba7c:	2c2d      	cmp	r4, #45	; 0x2d
 800ba7e:	d132      	bne.n	800bae6 <_strtol_l.constprop.0+0x9a>
 800ba80:	782c      	ldrb	r4, [r5, #0]
 800ba82:	2701      	movs	r7, #1
 800ba84:	1cb5      	adds	r5, r6, #2
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d05b      	beq.n	800bb42 <_strtol_l.constprop.0+0xf6>
 800ba8a:	2b10      	cmp	r3, #16
 800ba8c:	d109      	bne.n	800baa2 <_strtol_l.constprop.0+0x56>
 800ba8e:	2c30      	cmp	r4, #48	; 0x30
 800ba90:	d107      	bne.n	800baa2 <_strtol_l.constprop.0+0x56>
 800ba92:	782c      	ldrb	r4, [r5, #0]
 800ba94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ba98:	2c58      	cmp	r4, #88	; 0x58
 800ba9a:	d14d      	bne.n	800bb38 <_strtol_l.constprop.0+0xec>
 800ba9c:	786c      	ldrb	r4, [r5, #1]
 800ba9e:	2310      	movs	r3, #16
 800baa0:	3502      	adds	r5, #2
 800baa2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800baa6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800baaa:	f04f 0c00 	mov.w	ip, #0
 800baae:	fbb8 f9f3 	udiv	r9, r8, r3
 800bab2:	4666      	mov	r6, ip
 800bab4:	fb03 8a19 	mls	sl, r3, r9, r8
 800bab8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800babc:	f1be 0f09 	cmp.w	lr, #9
 800bac0:	d816      	bhi.n	800baf0 <_strtol_l.constprop.0+0xa4>
 800bac2:	4674      	mov	r4, lr
 800bac4:	42a3      	cmp	r3, r4
 800bac6:	dd24      	ble.n	800bb12 <_strtol_l.constprop.0+0xc6>
 800bac8:	f1bc 0f00 	cmp.w	ip, #0
 800bacc:	db1e      	blt.n	800bb0c <_strtol_l.constprop.0+0xc0>
 800bace:	45b1      	cmp	r9, r6
 800bad0:	d31c      	bcc.n	800bb0c <_strtol_l.constprop.0+0xc0>
 800bad2:	d101      	bne.n	800bad8 <_strtol_l.constprop.0+0x8c>
 800bad4:	45a2      	cmp	sl, r4
 800bad6:	db19      	blt.n	800bb0c <_strtol_l.constprop.0+0xc0>
 800bad8:	fb06 4603 	mla	r6, r6, r3, r4
 800badc:	f04f 0c01 	mov.w	ip, #1
 800bae0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bae4:	e7e8      	b.n	800bab8 <_strtol_l.constprop.0+0x6c>
 800bae6:	2c2b      	cmp	r4, #43	; 0x2b
 800bae8:	bf04      	itt	eq
 800baea:	782c      	ldrbeq	r4, [r5, #0]
 800baec:	1cb5      	addeq	r5, r6, #2
 800baee:	e7ca      	b.n	800ba86 <_strtol_l.constprop.0+0x3a>
 800baf0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800baf4:	f1be 0f19 	cmp.w	lr, #25
 800baf8:	d801      	bhi.n	800bafe <_strtol_l.constprop.0+0xb2>
 800bafa:	3c37      	subs	r4, #55	; 0x37
 800bafc:	e7e2      	b.n	800bac4 <_strtol_l.constprop.0+0x78>
 800bafe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bb02:	f1be 0f19 	cmp.w	lr, #25
 800bb06:	d804      	bhi.n	800bb12 <_strtol_l.constprop.0+0xc6>
 800bb08:	3c57      	subs	r4, #87	; 0x57
 800bb0a:	e7db      	b.n	800bac4 <_strtol_l.constprop.0+0x78>
 800bb0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800bb10:	e7e6      	b.n	800bae0 <_strtol_l.constprop.0+0x94>
 800bb12:	f1bc 0f00 	cmp.w	ip, #0
 800bb16:	da05      	bge.n	800bb24 <_strtol_l.constprop.0+0xd8>
 800bb18:	2322      	movs	r3, #34	; 0x22
 800bb1a:	6003      	str	r3, [r0, #0]
 800bb1c:	4646      	mov	r6, r8
 800bb1e:	b942      	cbnz	r2, 800bb32 <_strtol_l.constprop.0+0xe6>
 800bb20:	4630      	mov	r0, r6
 800bb22:	e79e      	b.n	800ba62 <_strtol_l.constprop.0+0x16>
 800bb24:	b107      	cbz	r7, 800bb28 <_strtol_l.constprop.0+0xdc>
 800bb26:	4276      	negs	r6, r6
 800bb28:	2a00      	cmp	r2, #0
 800bb2a:	d0f9      	beq.n	800bb20 <_strtol_l.constprop.0+0xd4>
 800bb2c:	f1bc 0f00 	cmp.w	ip, #0
 800bb30:	d000      	beq.n	800bb34 <_strtol_l.constprop.0+0xe8>
 800bb32:	1e69      	subs	r1, r5, #1
 800bb34:	6011      	str	r1, [r2, #0]
 800bb36:	e7f3      	b.n	800bb20 <_strtol_l.constprop.0+0xd4>
 800bb38:	2430      	movs	r4, #48	; 0x30
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1b1      	bne.n	800baa2 <_strtol_l.constprop.0+0x56>
 800bb3e:	2308      	movs	r3, #8
 800bb40:	e7af      	b.n	800baa2 <_strtol_l.constprop.0+0x56>
 800bb42:	2c30      	cmp	r4, #48	; 0x30
 800bb44:	d0a5      	beq.n	800ba92 <_strtol_l.constprop.0+0x46>
 800bb46:	230a      	movs	r3, #10
 800bb48:	e7ab      	b.n	800baa2 <_strtol_l.constprop.0+0x56>
 800bb4a:	bf00      	nop
 800bb4c:	0800ca6b 	.word	0x0800ca6b

0800bb50 <_strtol_r>:
 800bb50:	f7ff bf7c 	b.w	800ba4c <_strtol_l.constprop.0>

0800bb54 <_strtoul_l.constprop.0>:
 800bb54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb58:	4f36      	ldr	r7, [pc, #216]	; (800bc34 <_strtoul_l.constprop.0+0xe0>)
 800bb5a:	4686      	mov	lr, r0
 800bb5c:	460d      	mov	r5, r1
 800bb5e:	4628      	mov	r0, r5
 800bb60:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb64:	5de6      	ldrb	r6, [r4, r7]
 800bb66:	f016 0608 	ands.w	r6, r6, #8
 800bb6a:	d1f8      	bne.n	800bb5e <_strtoul_l.constprop.0+0xa>
 800bb6c:	2c2d      	cmp	r4, #45	; 0x2d
 800bb6e:	d12f      	bne.n	800bbd0 <_strtoul_l.constprop.0+0x7c>
 800bb70:	782c      	ldrb	r4, [r5, #0]
 800bb72:	2601      	movs	r6, #1
 800bb74:	1c85      	adds	r5, r0, #2
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d057      	beq.n	800bc2a <_strtoul_l.constprop.0+0xd6>
 800bb7a:	2b10      	cmp	r3, #16
 800bb7c:	d109      	bne.n	800bb92 <_strtoul_l.constprop.0+0x3e>
 800bb7e:	2c30      	cmp	r4, #48	; 0x30
 800bb80:	d107      	bne.n	800bb92 <_strtoul_l.constprop.0+0x3e>
 800bb82:	7828      	ldrb	r0, [r5, #0]
 800bb84:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bb88:	2858      	cmp	r0, #88	; 0x58
 800bb8a:	d149      	bne.n	800bc20 <_strtoul_l.constprop.0+0xcc>
 800bb8c:	786c      	ldrb	r4, [r5, #1]
 800bb8e:	2310      	movs	r3, #16
 800bb90:	3502      	adds	r5, #2
 800bb92:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800bb96:	2700      	movs	r7, #0
 800bb98:	fbb8 f8f3 	udiv	r8, r8, r3
 800bb9c:	fb03 f908 	mul.w	r9, r3, r8
 800bba0:	ea6f 0909 	mvn.w	r9, r9
 800bba4:	4638      	mov	r0, r7
 800bba6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bbaa:	f1bc 0f09 	cmp.w	ip, #9
 800bbae:	d814      	bhi.n	800bbda <_strtoul_l.constprop.0+0x86>
 800bbb0:	4664      	mov	r4, ip
 800bbb2:	42a3      	cmp	r3, r4
 800bbb4:	dd22      	ble.n	800bbfc <_strtoul_l.constprop.0+0xa8>
 800bbb6:	2f00      	cmp	r7, #0
 800bbb8:	db1d      	blt.n	800bbf6 <_strtoul_l.constprop.0+0xa2>
 800bbba:	4580      	cmp	r8, r0
 800bbbc:	d31b      	bcc.n	800bbf6 <_strtoul_l.constprop.0+0xa2>
 800bbbe:	d101      	bne.n	800bbc4 <_strtoul_l.constprop.0+0x70>
 800bbc0:	45a1      	cmp	r9, r4
 800bbc2:	db18      	blt.n	800bbf6 <_strtoul_l.constprop.0+0xa2>
 800bbc4:	fb00 4003 	mla	r0, r0, r3, r4
 800bbc8:	2701      	movs	r7, #1
 800bbca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbce:	e7ea      	b.n	800bba6 <_strtoul_l.constprop.0+0x52>
 800bbd0:	2c2b      	cmp	r4, #43	; 0x2b
 800bbd2:	bf04      	itt	eq
 800bbd4:	782c      	ldrbeq	r4, [r5, #0]
 800bbd6:	1c85      	addeq	r5, r0, #2
 800bbd8:	e7cd      	b.n	800bb76 <_strtoul_l.constprop.0+0x22>
 800bbda:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bbde:	f1bc 0f19 	cmp.w	ip, #25
 800bbe2:	d801      	bhi.n	800bbe8 <_strtoul_l.constprop.0+0x94>
 800bbe4:	3c37      	subs	r4, #55	; 0x37
 800bbe6:	e7e4      	b.n	800bbb2 <_strtoul_l.constprop.0+0x5e>
 800bbe8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bbec:	f1bc 0f19 	cmp.w	ip, #25
 800bbf0:	d804      	bhi.n	800bbfc <_strtoul_l.constprop.0+0xa8>
 800bbf2:	3c57      	subs	r4, #87	; 0x57
 800bbf4:	e7dd      	b.n	800bbb2 <_strtoul_l.constprop.0+0x5e>
 800bbf6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bbfa:	e7e6      	b.n	800bbca <_strtoul_l.constprop.0+0x76>
 800bbfc:	2f00      	cmp	r7, #0
 800bbfe:	da07      	bge.n	800bc10 <_strtoul_l.constprop.0+0xbc>
 800bc00:	2322      	movs	r3, #34	; 0x22
 800bc02:	f8ce 3000 	str.w	r3, [lr]
 800bc06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc0a:	b932      	cbnz	r2, 800bc1a <_strtoul_l.constprop.0+0xc6>
 800bc0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc10:	b106      	cbz	r6, 800bc14 <_strtoul_l.constprop.0+0xc0>
 800bc12:	4240      	negs	r0, r0
 800bc14:	2a00      	cmp	r2, #0
 800bc16:	d0f9      	beq.n	800bc0c <_strtoul_l.constprop.0+0xb8>
 800bc18:	b107      	cbz	r7, 800bc1c <_strtoul_l.constprop.0+0xc8>
 800bc1a:	1e69      	subs	r1, r5, #1
 800bc1c:	6011      	str	r1, [r2, #0]
 800bc1e:	e7f5      	b.n	800bc0c <_strtoul_l.constprop.0+0xb8>
 800bc20:	2430      	movs	r4, #48	; 0x30
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1b5      	bne.n	800bb92 <_strtoul_l.constprop.0+0x3e>
 800bc26:	2308      	movs	r3, #8
 800bc28:	e7b3      	b.n	800bb92 <_strtoul_l.constprop.0+0x3e>
 800bc2a:	2c30      	cmp	r4, #48	; 0x30
 800bc2c:	d0a9      	beq.n	800bb82 <_strtoul_l.constprop.0+0x2e>
 800bc2e:	230a      	movs	r3, #10
 800bc30:	e7af      	b.n	800bb92 <_strtoul_l.constprop.0+0x3e>
 800bc32:	bf00      	nop
 800bc34:	0800ca6b 	.word	0x0800ca6b

0800bc38 <_strtoul_r>:
 800bc38:	f7ff bf8c 	b.w	800bb54 <_strtoul_l.constprop.0>

0800bc3c <__submore>:
 800bc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc40:	460c      	mov	r4, r1
 800bc42:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bc44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc48:	4299      	cmp	r1, r3
 800bc4a:	d11d      	bne.n	800bc88 <__submore+0x4c>
 800bc4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bc50:	f7fe fa56 	bl	800a100 <_malloc_r>
 800bc54:	b918      	cbnz	r0, 800bc5e <__submore+0x22>
 800bc56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc62:	63a3      	str	r3, [r4, #56]	; 0x38
 800bc64:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bc68:	6360      	str	r0, [r4, #52]	; 0x34
 800bc6a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bc6e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bc72:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bc76:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bc7a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bc7e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bc82:	6020      	str	r0, [r4, #0]
 800bc84:	2000      	movs	r0, #0
 800bc86:	e7e8      	b.n	800bc5a <__submore+0x1e>
 800bc88:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bc8a:	0077      	lsls	r7, r6, #1
 800bc8c:	463a      	mov	r2, r7
 800bc8e:	f000 f84b 	bl	800bd28 <_realloc_r>
 800bc92:	4605      	mov	r5, r0
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d0de      	beq.n	800bc56 <__submore+0x1a>
 800bc98:	eb00 0806 	add.w	r8, r0, r6
 800bc9c:	4601      	mov	r1, r0
 800bc9e:	4632      	mov	r2, r6
 800bca0:	4640      	mov	r0, r8
 800bca2:	f7fe f9ab 	bl	8009ffc <memcpy>
 800bca6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bcaa:	f8c4 8000 	str.w	r8, [r4]
 800bcae:	e7e9      	b.n	800bc84 <__submore+0x48>

0800bcb0 <_fstat_r>:
 800bcb0:	b538      	push	{r3, r4, r5, lr}
 800bcb2:	4d07      	ldr	r5, [pc, #28]	; (800bcd0 <_fstat_r+0x20>)
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	4608      	mov	r0, r1
 800bcba:	4611      	mov	r1, r2
 800bcbc:	602b      	str	r3, [r5, #0]
 800bcbe:	f7f7 f89a 	bl	8002df6 <_fstat>
 800bcc2:	1c43      	adds	r3, r0, #1
 800bcc4:	d102      	bne.n	800bccc <_fstat_r+0x1c>
 800bcc6:	682b      	ldr	r3, [r5, #0]
 800bcc8:	b103      	cbz	r3, 800bccc <_fstat_r+0x1c>
 800bcca:	6023      	str	r3, [r4, #0]
 800bccc:	bd38      	pop	{r3, r4, r5, pc}
 800bcce:	bf00      	nop
 800bcd0:	20017694 	.word	0x20017694

0800bcd4 <_isatty_r>:
 800bcd4:	b538      	push	{r3, r4, r5, lr}
 800bcd6:	4d06      	ldr	r5, [pc, #24]	; (800bcf0 <_isatty_r+0x1c>)
 800bcd8:	2300      	movs	r3, #0
 800bcda:	4604      	mov	r4, r0
 800bcdc:	4608      	mov	r0, r1
 800bcde:	602b      	str	r3, [r5, #0]
 800bce0:	f7f7 f899 	bl	8002e16 <_isatty>
 800bce4:	1c43      	adds	r3, r0, #1
 800bce6:	d102      	bne.n	800bcee <_isatty_r+0x1a>
 800bce8:	682b      	ldr	r3, [r5, #0]
 800bcea:	b103      	cbz	r3, 800bcee <_isatty_r+0x1a>
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	bd38      	pop	{r3, r4, r5, pc}
 800bcf0:	20017694 	.word	0x20017694

0800bcf4 <memmove>:
 800bcf4:	4288      	cmp	r0, r1
 800bcf6:	b510      	push	{r4, lr}
 800bcf8:	eb01 0402 	add.w	r4, r1, r2
 800bcfc:	d902      	bls.n	800bd04 <memmove+0x10>
 800bcfe:	4284      	cmp	r4, r0
 800bd00:	4623      	mov	r3, r4
 800bd02:	d807      	bhi.n	800bd14 <memmove+0x20>
 800bd04:	1e43      	subs	r3, r0, #1
 800bd06:	42a1      	cmp	r1, r4
 800bd08:	d008      	beq.n	800bd1c <memmove+0x28>
 800bd0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd12:	e7f8      	b.n	800bd06 <memmove+0x12>
 800bd14:	4402      	add	r2, r0
 800bd16:	4601      	mov	r1, r0
 800bd18:	428a      	cmp	r2, r1
 800bd1a:	d100      	bne.n	800bd1e <memmove+0x2a>
 800bd1c:	bd10      	pop	{r4, pc}
 800bd1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd26:	e7f7      	b.n	800bd18 <memmove+0x24>

0800bd28 <_realloc_r>:
 800bd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd2c:	4680      	mov	r8, r0
 800bd2e:	4614      	mov	r4, r2
 800bd30:	460e      	mov	r6, r1
 800bd32:	b921      	cbnz	r1, 800bd3e <_realloc_r+0x16>
 800bd34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd38:	4611      	mov	r1, r2
 800bd3a:	f7fe b9e1 	b.w	800a100 <_malloc_r>
 800bd3e:	b92a      	cbnz	r2, 800bd4c <_realloc_r+0x24>
 800bd40:	f7fe f972 	bl	800a028 <_free_r>
 800bd44:	4625      	mov	r5, r4
 800bd46:	4628      	mov	r0, r5
 800bd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd4c:	f000 f81b 	bl	800bd86 <_malloc_usable_size_r>
 800bd50:	4284      	cmp	r4, r0
 800bd52:	4607      	mov	r7, r0
 800bd54:	d802      	bhi.n	800bd5c <_realloc_r+0x34>
 800bd56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd5a:	d812      	bhi.n	800bd82 <_realloc_r+0x5a>
 800bd5c:	4621      	mov	r1, r4
 800bd5e:	4640      	mov	r0, r8
 800bd60:	f7fe f9ce 	bl	800a100 <_malloc_r>
 800bd64:	4605      	mov	r5, r0
 800bd66:	2800      	cmp	r0, #0
 800bd68:	d0ed      	beq.n	800bd46 <_realloc_r+0x1e>
 800bd6a:	42bc      	cmp	r4, r7
 800bd6c:	4622      	mov	r2, r4
 800bd6e:	4631      	mov	r1, r6
 800bd70:	bf28      	it	cs
 800bd72:	463a      	movcs	r2, r7
 800bd74:	f7fe f942 	bl	8009ffc <memcpy>
 800bd78:	4631      	mov	r1, r6
 800bd7a:	4640      	mov	r0, r8
 800bd7c:	f7fe f954 	bl	800a028 <_free_r>
 800bd80:	e7e1      	b.n	800bd46 <_realloc_r+0x1e>
 800bd82:	4635      	mov	r5, r6
 800bd84:	e7df      	b.n	800bd46 <_realloc_r+0x1e>

0800bd86 <_malloc_usable_size_r>:
 800bd86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd8a:	1f18      	subs	r0, r3, #4
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	bfbc      	itt	lt
 800bd90:	580b      	ldrlt	r3, [r1, r0]
 800bd92:	18c0      	addlt	r0, r0, r3
 800bd94:	4770      	bx	lr
	...

0800bd98 <_init>:
 800bd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9a:	bf00      	nop
 800bd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd9e:	bc08      	pop	{r3}
 800bda0:	469e      	mov	lr, r3
 800bda2:	4770      	bx	lr

0800bda4 <_fini>:
 800bda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda6:	bf00      	nop
 800bda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdaa:	bc08      	pop	{r3}
 800bdac:	469e      	mov	lr, r3
 800bdae:	4770      	bx	lr
